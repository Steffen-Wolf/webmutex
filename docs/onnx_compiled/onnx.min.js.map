{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./lib/util.ts","webpack:///./lib/tensor.ts","webpack:///./lib/backends/webgl/glsl-source.ts","webpack:///./lib/instrument.ts","webpack:///./lib/wasm-binding.ts","webpack:///./lib/operators.ts","webpack:///./lib/backends/webgl/glsl-definitions.ts","webpack:///./node_modules/protobufjs/src/util/minimal.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/onnx-proto/dist/onnx.js","webpack:///./lib/backends/webgl/ops/reshape.ts","webpack:///./lib/opset.ts","webpack:///./node_modules/buffer/index.js","webpack:///./node_modules/long/src/long.js","webpack:///./lib/ops/batch-normalization.ts","webpack:///./lib/ops/binary-op.ts","webpack:///./lib/ops/conv.ts","webpack:///./lib/backends/cpu/ops/matmul.ts","webpack:///./lib/ops/matmul.ts","webpack:///./lib/ops/gemm.ts","webpack:///./lib/ops/instance-normalization.ts","webpack:///./lib/ops/pool.ts","webpack:///./lib/ops/softmax.ts","webpack:///./lib/ops/sum.ts","webpack:///./node_modules/process/browser.js","webpack:///./lib/env.ts","webpack:///./lib/api/index.ts","webpack:///./lib/backends/cpu/op-resolve-rules.ts","webpack:///./node_modules/protobufjs/src/writer.js","webpack:///./node_modules/protobufjs/src/reader.js","webpack:///./lib/ops/concat.ts","webpack:///./lib/ops/dropout.ts","webpack:///./lib/ops/flatten.ts","webpack:///./lib/ops/gather.ts","webpack:///./lib/ops/image-scaler.ts","webpack:///./lib/ops/pad.ts","webpack:///./lib/ops/reduce-op.ts","webpack:///./lib/ops/reshape.ts","webpack:///./lib/ops/slice.ts","webpack:///./lib/ops/squeeze.ts","webpack:///./lib/ops/tile.ts","webpack:///./lib/ops/transpose.ts","webpack:///./lib/backends/cpu/ops/unary-op.ts","webpack:///./lib/ops/unary-op.ts","webpack:///./lib/ops/unsqueeze.ts","webpack:///./lib/ops/upsample.ts","webpack:///./node_modules/platform/platform.js","webpack:///./node_modules/path-browserify/index.js","webpack:///./lib/ops/clip.ts","webpack:///./lib/backends/webgl/utils.ts","webpack:///./lib/api/tensor-impl.ts","webpack:///./lib/api/tensor-impl-utils.ts","webpack:///./lib/api/onnx-impl.ts","webpack:///./lib/backends/backend-cpu.ts","webpack:///./lib/backends/cpu/session-handler.ts","webpack:///./lib/backends/cpu/inference-handler.ts","webpack:///./lib/backends/cpu/ops/argMax.ts","webpack:///./lib/ops/argMax.ts","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/protobufjs/minimal.js","webpack:///./node_modules/protobufjs/src/index-minimal.js","webpack:///./node_modules/@protobufjs/aspromise/index.js","webpack:///./node_modules/@protobufjs/base64/index.js","webpack:///./node_modules/@protobufjs/eventemitter/index.js","webpack:///./node_modules/@protobufjs/float/index.js","webpack:///./node_modules/@protobufjs/inquire/index.js","webpack:///./node_modules/@protobufjs/utf8/index.js","webpack:///./node_modules/@protobufjs/pool/index.js","webpack:///./node_modules/protobufjs/src/util/longbits.js","webpack:///./node_modules/protobufjs/src/writer_buffer.js","webpack:///./node_modules/protobufjs/src/reader_buffer.js","webpack:///./node_modules/protobufjs/src/rpc.js","webpack:///./node_modules/protobufjs/src/rpc/service.js","webpack:///./node_modules/protobufjs/src/roots.js","webpack:///./lib/backends/cpu/ops/batch-normalization.ts","webpack:///./lib/backends/cpu/ops/binary-op.ts","webpack:///./lib/backends/cpu/ops/cast.ts","webpack:///./lib/ops/cast.ts","webpack:///./lib/backends/cpu/ops/concat.ts","webpack:///./lib/backends/cpu/ops/conv.ts","webpack:///./lib/backends/cpu/ops/dropout.ts","webpack:///./lib/backends/cpu/ops/expand.ts","webpack:///./lib/ops/expand.ts","webpack:///./lib/backends/cpu/ops/flatten.ts","webpack:///./lib/backends/cpu/ops/gather.ts","webpack:///./lib/backends/cpu/ops/gemm.ts","webpack:///./lib/backends/cpu/ops/image-scaler.ts","webpack:///./lib/backends/cpu/ops/instance-normalization.ts","webpack:///./lib/backends/cpu/ops/lrn.ts","webpack:///./lib/ops/lrn.ts","webpack:///./lib/backends/cpu/ops/pad.ts","webpack:///./lib/backends/cpu/ops/pool.ts","webpack:///./lib/backends/cpu/ops/reduce.ts","webpack:///./lib/backends/cpu/ops/reshape.ts","webpack:///./lib/backends/cpu/ops/shape.ts","webpack:///./lib/ops/shape.ts","webpack:///./lib/backends/cpu/ops/slice.ts","webpack:///./lib/backends/cpu/ops/softmax.ts","webpack:///./lib/backends/cpu/ops/squeeze.ts","webpack:///./lib/backends/cpu/ops/sum.ts","webpack:///./lib/backends/cpu/ops/tile.ts","webpack:///./lib/backends/cpu/ops/transpose.ts","webpack:///./lib/backends/cpu/ops/unsqueeze.ts","webpack:///./lib/backends/cpu/ops/upsample.ts","webpack:///./lib/backends/backend-wasm.ts","webpack:///(webpack)/buildin/module.js","webpack:///./lib/wasm-binding-core.ts","webpack:///./dist/onnx-wasm.js","webpack:///./lib/worker/worker-main.ts","webpack:///./lib/backends/wasm/session-handler.ts","webpack:///./lib/backends/wasm/inference-handler.ts","webpack:///./lib/backends/wasm/op-resolve-rules.ts","webpack:///./lib/backends/wasm/ops/batch-normalization.ts","webpack:///./lib/backends/wasm/ops/binary-op.ts","webpack:///./lib/backends/wasm/ops/clip.ts","webpack:///./lib/backends/wasm/ops/conv.ts","webpack:///./lib/backends/wasm/ops/gemm.ts","webpack:///./lib/backends/wasm/ops/instance-normalization.ts","webpack:///./lib/backends/wasm/ops/matmul.ts","webpack:///./lib/backends/wasm/ops/pool.ts","webpack:///./lib/backends/wasm/ops/softmax.ts","webpack:///./lib/backends/wasm/ops/sum.ts","webpack:///./lib/backends/backend-webgl.ts","webpack:///./lib/backends/webgl/session-handler.ts","webpack:///./lib/backends/webgl/inference-handler.ts","webpack:///./lib/backends/webgl/ops/uint8-encode.ts","webpack:///./lib/backends/webgl/op-resolve-rules.ts","webpack:///./lib/backends/webgl/ops/batch-normalization.ts","webpack:///./lib/backends/webgl/ops/binary-op.ts","webpack:///./lib/backends/webgl/ops/clip.ts","webpack:///./lib/backends/webgl/ops/concat.ts","webpack:///./lib/backends/webgl/ops/conv.ts","webpack:///./lib/backends/webgl/ops/dropout.ts","webpack:///./lib/backends/webgl/ops/elu.ts","webpack:///./lib/ops/elu.ts","webpack:///./lib/backends/webgl/ops/flatten.ts","webpack:///./lib/backends/webgl/ops/gather.ts","webpack:///./lib/backends/webgl/ops/gemm.ts","webpack:///./lib/backends/webgl/ops/image-scaler.ts","webpack:///./lib/backends/webgl/ops/instance-normalization.ts","webpack:///./lib/backends/webgl/ops/leaky-relu.ts","webpack:///./lib/ops/leaky-relu.ts","webpack:///./lib/backends/webgl/ops/matmul.ts","webpack:///./lib/backends/webgl/ops/pad.ts","webpack:///./lib/backends/webgl/ops/pool.ts","webpack:///./lib/backends/webgl/ops/reduce.ts","webpack:///./lib/backends/webgl/ops/slice.ts","webpack:///./lib/backends/webgl/ops/softmax.ts","webpack:///./lib/backends/webgl/ops/split.ts","webpack:///./lib/ops/split.ts","webpack:///./lib/backends/webgl/ops/squeeze.ts","webpack:///./lib/backends/webgl/ops/sum.ts","webpack:///./lib/backends/webgl/ops/tile.ts","webpack:///./lib/backends/webgl/ops/transpose.ts","webpack:///./lib/backends/webgl/ops/unary-op.ts","webpack:///./lib/backends/webgl/ops/unsqueeze.ts","webpack:///./lib/backends/webgl/ops/upsample.ts","webpack:///./lib/backends/webgl/program-manager.ts","webpack:///./lib/backends/webgl/glsl-preprocessor.ts","webpack:///./lib/backends/webgl/glsl-function-inliner.ts","webpack:///./lib/backends/webgl/glsl-registered-libs.ts","webpack:///./lib/backends/webgl/glsl-coordinate-lib.ts","webpack:///./lib/backends/webgl/glsl-encoding-lib.ts","webpack:///./lib/backends/webgl/glsl-fragcolor-lib.ts","webpack:///./lib/backends/webgl/glsl-shape-utils-lib.ts","webpack:///./lib/backends/webgl/glsl-vec-lib.ts","webpack:///./lib/backends/webgl/texture-layout-strategy.ts","webpack:///./lib/backends/webgl/texture-manager.ts","webpack:///./lib/backends/webgl/webgl-context-factory.ts","webpack:///./lib/backends/webgl/webgl-context.ts","webpack:///./lib/backends/webgl/texture-data-encoder.ts","webpack:///./lib/api/env-impl.ts","webpack:///./lib/api/tensor.ts","webpack:///./lib/api/inference-session.ts","webpack:///./lib/api/inference-session-impl.ts","webpack:///./lib/session.ts","webpack:///./node_modules/util/util.js","webpack:///./node_modules/util/support/isBufferBrowser.js","webpack:///./node_modules/util/node_modules/inherits/inherits_browser.js","webpack:///./lib/backend.ts","webpack:///./lib/execution-plan.ts","webpack:///./lib/model.ts","webpack:///./lib/graph.ts","webpack:///./lib/attribute.ts"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","inputs","length","expectedDimensions","dims","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","outputShape","aRank","bRank","splice","pop","calcMatMulShape","b","undefined","MatMulUtil","calcShape","adims","bdims","isMatMul","arank","brank","crank","Math","max","cdims","Array","cShapeMatMul","aLen","bLen","index","broadcastedIndices","originalShape","originalIndices","BroadcastUtil","fillIndex","dimOffset","calc","op","inplace","resultType","ShapeUtil","areEqual","size","Tensor","type","set","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","j","floor","isValidBroadcast","shape","finalShape","inputRank","finalRank","target","source","targetIndex","sourceIndex","blockSize","Error","offset","getShapeOfGemmResult","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","GemmUtil","tensorDataTypeFromProto","typeProto","onnx","TensorProto","DataType","INT8","UINT8","BOOL","INT16","UINT16","INT32","UINT32","FLOAT","DOUBLE","STRING","INT64","UINT64","tensorDimsFromProto","map","isLong","toNumber","tensorValueTypeFromProto","valueType","tensorType","ProtoUtil","elemType","dim","dimValue","longToNumber","LongUtil","getSizeFromDimensionRange","sizeFromDimension","axis","sizeToDimension","start","end","computeStrides","rank","strides","transpose","slice","reverse","indicesToOffset","indices","offsetToIndices","normalizeAxis","tensorRank","normalizeAxes","axes","x","incrementIndex","axisToIncrementOn","k","calculateReshapedDims","originalDims","shapeHints","nDims","reshapedDims","unknownDimension","newTensorSize","oldTensorSize","sortBasedOnPerm","perm","v","padShape","pad","shape1","shape2","every","validateDimsAndCalcSize","TypeError","Number","isInteger","flattenShape","total","reduce","y","right","squeezeShape","outputDims","inSqueezeList","indexOf","push","unsqueezeShape","fill","inputDimsIterator","sqr","pow","axpy","alpha","powx","mul","MathUtil","splitShape","split","numOutputs","SplitUtil","determineSplit","shapes","offsets","numElementsAlongAxis","calcReduce","keepdims","op1","op2","forEach","ind","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","numberData","data","dataId","input","curAxisInd","pos","res","step","keepDims","filter","adjustPoolAttributes","isGlobalOperator","inputDims","kernelShape","pads","adjustPadsBasedOnAutoPad","dilations","autoPad","PoolConvUtil","adjustPadAndReturnShape","computePoolOutputShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","stride","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","dataProvider","asyncDataProvider","cache","this","empty","RangeError","isArray","constructor","dataviewConstructor","buf","ArrayBuffer","sizeof","dataBuffer","createView","getData","_strides","fromProto","tensorProto","dataType","stringData","str","Buffer","from","buffer","byteOffset","byteLength","toString","rawData","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","array","floatData","int32Data","int64Data","doubleData","uint64Data","element","fromData","Uint8Array","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","greaterThanOrEqual","lessThan","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","GLSL_ES_2_0","version","attribute","varyingVertex","varyingFrag","texture2D","output","outputDeclaration","GLSL_ES_3_0","getGlsl","glsl","outputShapeLength","log","severity","content","category","console","color","SEVERITY_VALUE","verbose","info","warning","error","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","stack","config","Date","toISOString","reset","previousConfig","Logger","startTime","endCallback","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","event","func","begin","isPromise","then","Promise","resolve","reject","reason","flush","Event","e","EventRecord","toFixed","currentTime","previousPointer","Profiler","performance","workers","WORKER_NUMBER","completeCallbacks","initialized","initializing","numWorkers","initTimeout","waitForBindingInitTimeoutId","clearWaitForBindingInit","clearTimeout","onFulfilled","bindingInitTask","bindingCore","init","rejectAfterTimeOutPromise","setTimeout","Worker","areWebWorkersSupported","workerInitTasks","workerId","workerInitTask","resolveWorkerInit","rejectWorkerInit","worker","default","onerror","onmessage","perfData","shift","race","all","err","getInstance","WasmBinding","instance","ccallRemote","functionName","calculateOffsets","params","ccallSerialize","postMessage","perf","startTimeWorker","endTimeWorker","ccallDeserialize","NUMBER_TYPES","INT_TYPES","FLOAT_TYPES","FunctionType","glContext","programInfo","GlslContext","context","GlslLib","routineBody","dependencies","GlslLibRoutine","addDependency","node","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","result","createOrderedNodes","graphNodes","dfsTraverse","has","add","delete","TopologicalSortGlslRoutines","util","merge","dst","src","ifNotSet","keys","newError","CustomError","message","properties","captureStackTrace","asPromise","base64","EventEmitter","float","inquire","utf8","pool","LongBits","global","self","emptyArray","freeze","emptyObject","isNode","Boolean","process","versions","isFinite","isString","String","isObject","isset","isSet","obj","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","Long","dcodeIO","key2Re","key32Re","key64Re","longToHash","toHash","zeroHash","longFromHash","hash","unsigned","bits","fromHash","lo","hi","lcFirst","charAt","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","bytes","json","_configure","encoding","allocUnsafe","g","Function","$protobuf","$Reader","Reader","$Writer","Writer","$util","$root","roots","valuesById","values","Version","AttributeProto","floats","ints","strings","tensors","graphs","refAttrName","docString","f","encode","writer","uint32","string","int64","fork","ldelim","GraphProto","int32","encodeDelimited","decode","reader","len","tag","end2","skipType","decodeDelimited","verify","low","high","fromObject","fromValue","parseInt","toObject","options","arrays","defaults","long","AttributeType","toJSON","ValueInfoProto","TypeProto","NodeProto","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","Dimension","$oneOfFields","dimParam","denotation","oneofs","run","inferenceHandler","integerData","reshape","Reshape","inputTD","getOrCreateTextureData","packedShape","channels","getPackedShape","newTextureLayout","height","width","unpackedShape","createSharedTextureData","texture","tensor","WebGLReshape","matchSelector","selector","endsWith","rangeStart","isNaN","pair","rangeEnd","opsets","rules","rule","versionSelector","opConstructor","opset","join","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","__proto__","arg","encodingOrOffset","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","isBuffer","checked","copy","val","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","substr","blitBuffer","asciiWrite","byteArray","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","utf16leToBytes","fromByteArray","min","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","configurable","allocUnsafeSlow","_isBuffer","compare","concat","list","swap16","swap32","swap64","arguments","equals","inspect","match","thisStart","thisEnd","thisCopy","targetCopy","includes","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","wasm","WebAssembly","Instance","Module","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","other","notEquals","neq","ne","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","gte","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","ceil","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","initialize","attributes","epsilon","getFloat","momentum","spatial","getInt","checkInputs","checkInputTypes","X","scale","B","mean","var_","BatchNormalization","typeConstraint","BinaryOp","getString","getInts","group","spatialRank","Conv","matMul","MatMul","mat2dShape","num2dMatrices","offsetY","indicesA","indicesB","offsetA","offsetB","matMul2d","A","C","transA","transB","beta","offsetC","mm","nn","sum","kk","matMul2d_tAtB","matMul2d_tA","matMul2d_tB","matMul2d_","CpuMatMul","isOptionalC","Gemm","InstanceNormalization","countIncludePad","ceilMode","PoolBase","AveragePool","GlobalAveragePool","storageOrder","MaxPool","GlobalMaxPool","Softmax","Sum","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","marker","runClearTimeout","Item","noop","nextTick","args","title","browser","env","argv","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask","backend","platform","debug","EnvironmentImpl","onnxImpl","CPU_OP_RESOLVE_RULES","CpuUnaryOp","unaryOps","abs","acos","acosh","CpuBinaryOp","e1","e2","CpuArgMax","asin","asinh","atan","atanh","CpuAveragePool","CpuBatchNormalization","CpuCast","clip","clipInitializer","CpuConcat","CpuConv","cos","cosh","CpuDropout","elu","eluInitializer","exp","CpuExpand","CpuFlatten","CpuGather","CpuGemm","CpuGlobalAveragePool","CpuGlobalMaxPool","CpuImageScaler","CpuInstanceNormalization","isNan","leakyRelu","leakyReluInitializer","CpuLrn","CpuMaxPool","CpuPad","reciprocal","cpuReduce","CpuReduceLogSum","CpuReduceMax","CpuReduceMean","CpuReduceMin","CpuReduceProd","CpuReduceSum","CpuReduceSumSquare","relu","CpuReshape","CpuUpsample","CpuShape","sigmoid","sign","sin","sinh","CpuSliceV10","CpuSlice","CpuSoftmax","sqrt","CpuSqueeze","CpuSum","tan","tanh","CpuTile","CpuTranspose","CpuUnsqueeze","BufferWriter","Op","fn","next","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","sint32","sint64","zzEncode","bool","fixed32","sfixed32","fixed64","sfixed64","writeBytes","finish","BufferWriter_","BufferReader","indexOutOfRange","writeLength","create_array","readLongVarint","readFixed32_end","readFixed64","_slice","skip","wireType","BufferReader_","zzDecode","inputType","inputDimensionality","Concat","ratio","testMode","Dropout","Flatten","Gather","bias","getFloats","ImageScaler","Pad","ReduceBase","starts","ends","Slice","SliceV10","Squeeze","Tile","Transpose","attributesInitializer","unaryOp","UnaryOp","Unsqueeze","isResize","scales","scalesValidataion","extrapolationValue","coordinateTransformMode","useExtrapolation","needRoiInput","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","scalesInputIdx","sizesInputIdx","getValues","roi","getOriginalCoordinate","xResized","xScale","lengthResized","lengthOriginal","roiStart","roiEnd","getOriginalCoordinateFromResizedCoordinate","getNearestPixel","xOriginal","isDownSample","round","getNearestPixelFromOriginal","prepare","xDims","parseRoiData","outputSizes","scalesTensor","parseScalesData","sizesTensor","parseScalesDataFromOutputSize","computeOutputShape","yDims","Upsample","objectTypes","freeExports","freeModule","nodeType","freeGlobal","maxSafeInteger","reOpera","objectProto","capitalize","toUpperCase","format","test","forOwn","callback","getClassOf","qualify","accumulator","each","parse","ua","isCustomContext","nav","navigator","userAgent","isSpecialCasedOS","likeChrome","airRuntimeClass","enviroClass","javaClass","java","phantomClass","rhino","environment","doc","document","opera","operamini","operaClass","arch","description","prerelease","useFeatures","layout","guess","RegExp","pattern","exec","label","guesses","getName","product","getProduct","manufacturer","getManufacturer","os","cleanupOS","getOS","getVersion","patterns","unshift","parseFloat","runtime","flash","system","Capabilities","phantom","major","minor","patch","documentMode","lang","System","getProperty","require","electron","nw","appMinorVersion","external","family","architecture","cpuClass","normalizeArray","parts","allowAboveRoot","up","last","xs","resolvedPath","resolvedAbsolute","path","normalize","isAbsolute","trailingSlash","paths","relative","to","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","hasRoot","matchedSlash","basename","extname","startDot","startPart","preDotState","Clip","inferredDims","internalTensor","indexArray","Utils","validateIndices","idx","matchElementType","cpu","CpuBackend","WasmBackend","webgl","WebGLBackend","ENV","envImpl","createSessionHandler","CpuSessionHandler","dispose","createInferenceHandler","CpuInferenceHandler","profiler","resolveOperator","session","argMax","ArgMax","Y","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","num","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","protobuf","configure","build","rpc","ctx","pending","s64","chunk","_listeners","evt","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloat_ieee754","writeUint","exponent","readFloat_ieee754","readUint","uint","mantissa","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDouble_ieee754","off0","off1","readDouble_ieee754","moduleName","eval","c1","c2","SIZE","MAX","slab","zero","toLong","mask","part0","part1","part2","writeStringBuffer","writeBytesBuffer","Service","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","response","endedByRPC","batchNormalization","variance","inputDimensions","channelSize","scaleData","bData","meanData","varianceData","nc","opLambda","binaryOp","cast","Cast","inputData","outputData","input0","inputShape","concatAxisSize","dataNShape","dataN","axisIndex","axisPitch","outputBase","inputIndex","inputAxisPitch","inputSize","Util","outputOffset","w","wDims","conv2d","W","input_num","input_channels","input_height","input_width","filter_num","filter_channels","filter_height","filter_width","filter_size","kernel_shape","output_num","output_channels","output_height","output_width","output_image_size","X_offset","Y_offset","W_offset","kernel_dim","col_buffer_data","image_id","X_image_offset","Y_image_offset","group_id","im2col","biasData","batchSize","outputChannels","dataSize","batch","channel","data_im","data_col","kernel_h","kernel_w","dilation_h","dilation_w","pad_t","pad_l","pad_b","pad_r","stride_h","stride_w","output_h","output_w","height_col","width_col","channels_col","w_offset","h_offset","c_im","h","h_pad","w_pad","nip","kh","kw","dst_offset","src_offset","iy","ix","dropout","isTestMode","expand","Expand","shapeData","dimensions","originalDimensions","flatten","gather","newDims","indicesData","dimsStrides","newDimsStrides","newLogicalIndex","oldLogicalIndex","oldOffset","gemm","imageScaler","H","hw","instanceNormalization","temp","physicalOffset","iterEnd","currentChannel","lrn","Lrn","tensorDataSize","paddedSquareData","alphaOverSize","prePad","scaleSliceStart","arrayCopyHelper","outputDimensions","assign","getPadDimension","acc","cur","inx","mapToArrayIndex","getReflectionIndex","getEdgeIndex","position","numberIndex","dimension","some","arrayIndex","averagePool","globalAveragePool","maxPool","globalMaxPool","MIN_SAFE_INTEGER","startVal","processOp","finalOp","kernelSize","kernelStrides","stridesRank","outputSize","outputStride","curInd","startInd","isPad","reduceSum","reduceSumSquare","reduceLogSum","reduceMax","reduceMin","reduceMean","reduceProd","numItems","Shape","adjustedStarts","newDimsStride","oldDimsStride","softmax","D","squeeze","tile","repeats","finalPerm","inpDim","numElementsInBlock","numAxesInPrefix","suffixBlocksize","prefixBlocksize","isSuffix","inpAxis","numAxes","targetDims","numBlocks","startTargetIndex","sourceOffset","doTransposeEltWise","sizeOffset","doTranspose","unsqueeze","compute","xData","yData","extrapolationEnabled","inputDimCounter","inputDimFactor","useExtrapolationValue","yIdx","xIdx","oneDimensionProcessor","dimIdx","yDim","originalIdx","currentInputDimCounter","yDim0","yDim1","yDim2","yDim3","outputDimCounter","upsampleNearest","is2D","numChannels","inputHeight","inputWidth","outputHeight","outputWidth","heightScale","widthScale","yOriginal","inputWidthMulY1","inputWidthMulY2","inX1","inX2","dy1","dy2","dx1","dx2","roiYStart","roiYEnd","inY","inY1","inY2","roiXStart","roiXEnd","inX","xOffset","yOffset","x11","x21","x12","x22","upsampleBilinear","cubicCoeffs","Map","coeffTo1DinterpolationMap","getCubicCoeffs","yCoeffHolder","xCoeffHolder","yCoeffSum","xCoeffSum","yInt","sY","coeffY","origYCoeffs","yVal","xInt","sX","coeffX","origXCoeffs","xVal","interpolationResultCache","xResult","cubicInterpolation1D","clear","upsampleBiCubic","cubicCoeffA","getDataForCoordinate","coeffArray","coeffSum","gridStartPosition","originalData","cpuFallback","hardwareConcurrency","defaultNumWorkers","checkIfNumWorkersIsValid","isWasmSupported","WasmSessionHandler","wasmBinding","webpackPolyfill","deprecate","children","ptr8","numBytesAllocated","ccall","expandMemory","HEAPU8","startTimeFunc","endTimeFunc","ccallRaw","param","paramData","paramType","paramPass","heapU8","heap32","heapU32","heapF32","offset8","offset32","boolArray","int32Array","float32Array","minBytesRequired","_free","_malloc","_scriptDir","currentScript","__filename","moduleOverrides","arguments_","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","importScripts","read_","readBinary","nodeFS","nodePath","scriptDirectory","locateFile","__dirname","filename","binary","assert","ex","ExitStatus","abort","readbuffer","scriptArgs","print","warn","printErr","location","href","url","xhr","XMLHttpRequest","open","send","responseText","responseType","wasmBinary","wasmMemory","setTempRet0","wasmTable","Table","ABORT","condition","text","UTF8Decoder","TextDecoder","UTF8ArrayToString","u8Array","maxBytesToRead","endIdx","endPtr","u0","u1","u2","ch","UTF8ToString","ptr","HEAP32","WASM_PAGE_SIZE","alignUp","multiple","updateGlobalBufferAndViews","DYNAMIC_BASE","DYNAMICTOP_PTR","INITIAL_INITIAL_MEMORY","callRuntimeCallbacks","callbacks","Memory","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATEXIT__","__ATPOSTRUN__","preRun","addOnPreRun","initRuntime","preMain","postRun","addOnPostRun","cb","runDependencies","runDependencyWatcher","dependenciesFulfilled","addRunDependency","id","removeRunDependency","clearInterval","what","RuntimeError","dataURIPrefix","isDataURI","startsWith","wasmBinaryFile","getBinary","getBinaryPromise","fetch","credentials","catch","createWasm","asmLibraryArg","receiveInstance","receiveInstantiatedSource","instantiateArrayBuffer","receiver","instantiate","instantiateStreaming","instantiateAsync","___assert_fail","line","___cxa_allocate_exception","___wasm_call_ctors","___exception_infos","__ZSt18uncaught_exceptionv","uncaught_exceptions","___cxa_throw","destructor","adjusted","refcount","caught","rethrown","_abort","_emscripten_get_heap_size","_emscripten_get_sbrk_ptr","_emscripten_memcpy_big","dest","copyWithin","emscripten_realloc_buffer","grow","_emscripten_resize_heap","requestedSize","oldSize","cutDown","overGrownHeapSize","SYSCALLS","mappings","buffers","printChar","stream","curr","varargs","getStr","get64","_fd_close","fd","_fd_seek","offset_low","offset_high","whence","newOffset","flush_NO_FILESYSTEM","_fflush","_fd_write","iov","iovcnt","pnum","_setTempRet0","$i","asm","calledRun","status","doRun","old","runCaller","fallbackToCpuOps","opResolveRules","WASM_OP_RESOLVE_RULES","WasmInferenceHandler","WasmBinaryOp","WasmAveragePool","WasmBatchNormalization","WasmClip","WasmConv","WasmGemm","WasmGlobalAveragePool","WasmGlobalMaxPool","WasmInstanceNormalization","WasmMatMul","WasmMaxPool","WasmSoftmax","WasmSum","binaryOpType","numThreads","numFilterMaps","numWebWorkers","determineNumThreads","workerNumber","wDimsSp","wSizeSp","wDimsFinal","yDimsSp","ySizeSp","yDimsFinal","wArray","yArray","bArray","workerTasks","resultData","poolType","poolFunc","xDimsSp","xSizeSp","xDimsFinal","createWebGLContext","contextId","matmulMaxBatchSize","textureCacheMode","WebGLSessionHandler","programManager","ProgramManager","layoutStrategy","AlwaysKeepOriginalSizeStrategy","maxTextureSize","textureManager","TextureManager","reuseTextures","textureDataCache","WebGLInferenceHandler","onGraphInitialized","initializers","isInitializer","tensorId","getTextureData","setTextureData","textureData","clearActiveTextures","td","releaseTexture","WEBGL_OP_RESOLVE_RULES","artifact","getArtifact","createProgramInfo","setArtifact","runData","createRunData","outputTextureData","createTextureLayoutFromShape","createTextureData","createTextureDataFromLayout","createTextureDataFromLayoutBindTensor","usage","JSON","stringify","createTextureFromLayout","createTextureDataFromTexture","readTexture","getOrCreateTextureLayout","prefs","computeTextureWH","isFloat32DownloadSupported","uint8TD","WebGLUint8Encode","runInternal","readUint8TextureAsFloat","outputLayout","inputLayouts","samplers","shaderSource","hasMain","encoder","getEncoder","allocateTexture","inputTextureDatas","uniformData","WebGLUnaryOp","glslAbs","glslAcos","binaryOps","WebGLBinaryOp","glslAdd","glslAnd","glslAsin","glslAtan","WebGLAveragePool","WebGLBatchNormalization","glslCeil","WebGLClip","WebGLConcat","WebGLConv","glslCos","glslDiv","WebGLDropout","glslEqual","WebGLElu","glslExp","WebGLFlatten","glslFloor","WebGLGather","WebGLGemm","WebGLGlobalAveragePool","WebGLGlobalMaxPool","glslGreater","glslIdentity","WebGLImageScaler","WebGLInstanceNormalization","WebGLLeakyRelu","glslLess","glslLog","WebGLMatMul","WebGLMaxPool","glslMul","glslNeg","glslNot","glslOr","WebGLPad","glslPow","glslPRelu","reduceOps","WebGLReduceLogSum","WebGLReduceMax","WebGLReduceMean","WebGLReduceMin","WebGLReduceProd","WebGLReduceSum","WebGLReduceSumSquare","glslRelu","WebGLUpsample","glslSigmoid","glslSin","WebGLSliceV10","WebGLSlice","WebGLSoftmax","WebGLSplit","outputs","glslSqrt","WebGLSqueeze","glslSub","WebGLSum","glslTan","glslTanh","WebGLTile","WebGLTranspose","WebGLUnsqueeze","glslXor","handler","inputTDs","outputTD","glslFunc","outputRank","aBcast","bBcast","body","ValueBased","fname","glslBuiltinBinary","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getValueFromArrayIndexMethod","variables","arrayLength","sizeInConcatAxis","previousSum","numberOfTensors","codeLines","arrayRank","readSize","artifacts","programInfos","createProgramInfos","runDatas","createRunDatas","xshape","kshape","calcOutputShape","im2colProgramInfo","createIm2ColProgramInfo","createDotProductProgramInfo","kTD","newKernelData","prepKernelForDotProduct","runtDataIm2Col","draw","gl","sharedDim","sharedDimReadSize","sharedDimOffsetLocation","uniformLocations","find","blend","enable","BLEND","checkError","blendEquation","FUNC_ADD","blendFunc","uniform1i","disable","im2colDims","calcIm2ColDims","breakAxis","im2colLayout","bLayout","adjustedKernelShape","kLayout","initValue","isBlendSupported","calcSharedDimReadSize","numFeatureMaps","oldRowSize","newRowSize","adjustPads","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","preferredBatchSize","calcBlockSize","toExponential","Elu","indexDataShape","indexCopyOps","aShape","bShape","oShape","createGetBiasMethod","pi","createMeanAndVarianceProgramInfo","xLayout","outputUnpackedShape","createComputOutputProgramInfo","scaleLayout","meanAndVarianceLayout","meanAndVarianceProgramInfo","scaleTD","bTD","LeakyRelu","alayout","getPadFunction","inputLayout","block","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","GeneratePoolingCode","createMaxPoolProgramInfo","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","sh","phStart","phEnd","dimH","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","arrayName","iRank","idxCopy","ops","getOps","WebGLGenericReduce","idxZero","sliceOps","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","textureWidth","textureHeight","createComputScaleProgramInfo","xlayout","createComputeMaxProgramInfo","computeMaxProgramInfo","computeScaleProgramInfo","count","getProgramCount","results","rundata","Split","sumLine","tileOps","getOutputShape","inputShapes","getAdjustedPerm","unpackedOutputShape","getPermFunctionBody","getPositionalFunction","Positional","reverseFunc","glslBuiltinUnary","roiCache","scalesCache","mappingOriginCache","mappingWeightCache","mappingExtrapolateCache","mappingCoeffCache","scalesHeight","scalesWidth","roiStartHeight","roiEndHeight","roiStartWidth","roiEndWidth","precalculatedPitches","shaderPrecalculatedPitches","getInputFloatFunction","shaderGetInputFloatFunction","mappingOrigin","mappingExtrapolation","originalCoord","fillResizeNearestMapping2D","mappingWeight","inputY","intY","inputX","intX","fillResizeBilinearCoordinateMapping","isY","maxInputCoord","inputCoord","intCoord","sCoord","coeff0","coeff1","coeff2","coeff3","fillResizeCubicCoordinateMapping","createResizeProgramInfo","createUpsampleProgramInfo","mo","me","mw","mc","outputPitches","inputPitches","repo","attributesBound","buildArtifact","program","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","doDraw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","preprocess","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","bindTexture","uniform1fv","uniform1f","uniform1iv","uniformHandle","bindTextureToUniform","getAttribLocation","sampler","getUniformLocation","variable","reference","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","getFunctions","routine","currentNode","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","getImports","script","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","uniformLines","INLINE_FUNC_DEF_REGEX","inlineDefs","tokens","regexString","regex","declLine","newBody","paramRedecLine","replacement","EncodingGlslLib","FragColorGlslLib","VecGlslLib","ShapeUtilsGlslLib","CoordsGlslLib","offsetToCoords","coordsToOffset","toVec","valueFrom","getCustomTypes","yScale","stridesBlock","funcName","getValueFromSingle","varName","encodeFloat32","decodeFloat32","encodeUint8","endianness","isLittleEndian","decodeUint8","setFragColor","getColorAsFloat","bcastIndex","bcastMatmulIndex","incrementIndices","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","assignmentBlock","wsize","hsize","totalSize","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","internalFormat","textureType","updateTexture","toTextureData","toTensorData","deleteTexture","createNewWebGLContext","canvas","createElement","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","DEPTH_TEST","STENCIL_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","SCISSOR_TEST","CULL_FACE","cullFace","BACK","frameBufferBound","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","allocate","readPixels","RGBA","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","textureFloatExtension","RGBA32F","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","R32F","RED","textureSize","ALPHA","UNSIGNED_BYTE","TensorImpl","InferenceSession","InferenceSessionImpl","Session","loadModel","Blob","URL","createObjectURL","inputFeed","modelInputFeed","convertedOutput","tensorUtils","fromInternalTensor","startProfiling","endProfiling","_initialized","backendHint","graphInputTypes","graphInputDims","Backend","sessionHandler","_model","Model","promisify","readFile","arrayBuffer","modelProtoBlob","graphInitializer","transformGraph","load","initializeOps","_executionPlan","ExecutionPlan","_ops","inputTensors","normalizeAndValidateInputs","execute","outputTensors","createOutput","modelInputNames","getInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","getInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","getOutputNames","getNodes","getOwnPropertyDescriptors","descriptors","getOwnPropertyDescriptor","formatRegExp","objects","_","isNull","msg","noDeprecation","warned","throwDeprecation","traceDeprecation","trace","debugEnviron","debugs","opts","seen","stylize","stylizeNoColor","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","recurseTimes","isFunction","primitive","simple","isNumber","formatPrimitive","visibleKeys","arrayToHash","getOwnPropertyNames","isError","formatError","isRegExp","isDate","base","braces","toUTCString","formatProperty","formatArray","prev","numLinesEst","reduceToSingleString","desc","ar","re","objectToString","debuglog","NODE_DEBUG","pid","isNullOrUndefined","isSymbol","isPrimitive","months","timestamp","time","getHours","getMinutes","getSeconds","getDate","getMonth","inherits","origin","kCustomPromisifiedSymbol","callbackifyOnRejected","newReason","original","writable","promiseResolve","promiseReject","promise","setPrototypeOf","getPrototypeOf","defineProperties","custom","callbackify","callbackified","maybeCb","rej","ctor","superCtor","super_","TempCtor","backendsCache","tryLoadBackend","backendObj","isBackend","disabled","hint","hints","KernelOp","_starter","resolved","_values","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","thisValue","modelProto","_opsets","_graph","Graph","graphProto","GraphImpl","_from","_to","_nodeProto","Attribute","executeNode","buildGraph","checkIsAcyclic","_allInputIndices","_allInputNames","_allOutputIndices","_allOutputNames","_allData","_nodes","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","nodeProto","pick","Node","dataIndex","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","finalizeGraph","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","_attributes","attr","getValue","getType","defaultValue","getTensor","getStrings","getTensors","valueAndType","INT","TENSOR","FLOATS","INTS","STRINGS","TENSORS","GRAPH","GRAPHS","getValueNoCheck","numberValue","maybeLong","utf8String"],"mappings":"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","file":"onnx.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: ReadonlyArray<number>, dimsB: ReadonlyArray<number>):\n      [ReadonlyArray<number>, ReadonlyArray<number>] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: ReadonlyArray<number>, bdims: ReadonlyArray<number>, isMatMul = false):\n      ReadonlyArray<number>|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: ReadonlyArray<number>, originalShape: ReadonlyArray<number>): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(\n      broadcastedIndices: ReadonlyArray<number>, originalShape: ReadonlyArray<number>, originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: ReadonlyArray<number>, finalShape: ReadonlyArray<number>): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error(`sourceIndex out of bounds`);\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error(`targetIndex out of bounds`);\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error(`source indices to be copied are outside bounds`);\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error(`target array is too small to hold result`);\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: ReadonlyArray<number>, transLeft: boolean, rightShape: ReadonlyArray<number>, transRight: boolean,\n      biasShape?: ReadonlyArray<number>): ReadonlyArray<number> {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error(`shape need to be of size 2`);\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error(`dimension mismatch`);\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error(`invalid shape specified`);\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error(`gemm: invalid bias shape for broadcast`);\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n}\n\nexport class LongUtil {\n  static longToNumber(n: Long|number) {\n    return Long.isLong(n) ? n.toNumber() : n;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: ReadonlyArray<number>): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: ReadonlyArray<number>, axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: ReadonlyArray<number>, axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: ReadonlyArray<number>, start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // tslint:disable-next-line:max-line-length\n            `cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.`);\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: ReadonlyArray<number>): ReadonlyArray<number> {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: ReadonlyArray<number>): ReadonlyArray<number> {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: ReadonlyArray<number>, strides: ReadonlyArray<number>, axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: ReadonlyArray<number>): ReadonlyArray<number> {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: ReadonlyArray<number>, tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: ReadonlyArray<number>, axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error(`Index incrementing unsupported for scalar Tensor`);\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error(`Incorrect axis to increment on`);\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(\n      originalDims: ReadonlyArray<number>,\n      shapeHints: number[]|ReadonlyArray<number>|Tensor.IntegerType): ReadonlyArray<number> {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error(`cannot reshape to a scalar Tensor`);\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error(`reshapedDims and originalDims don't have matching sizes`);\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: ReadonlyArray<number>, perm?: ReadonlyArray<number>): ReadonlyArray<number> {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: ReadonlyArray<number>, pad: ReadonlyArray<number>): ReadonlyArray<number> {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: ReadonlyArray<number>, shape2: ReadonlyArray<number>): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: ReadonlyArray<number>): number {\n    if (dims.length > 6) {\n      throw new TypeError(`Only rank 0 to 6 is supported for tensor shape.`);\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: ReadonlyArray<number>, axis: number): ReadonlyArray<number> {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>): ReadonlyArray<number> {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error(`squeeze an axis of size different than 1`);\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>): ReadonlyArray<number> {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\n      if (axis >= outputDims.length) {\n        throw new Error(`'axes' has an out of range axis`);\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error(`'axes' has a duplicate axis`);\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error(`sourceIndex out of bounds`);\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error(`targetIndex out of bounds`);\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error(`source indices to be copied are outside bounds`);\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error(`target array is too small to hold result`);\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error(`sourceIndex out of bounds`);\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error(`targetIndex out of bounds`);\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error(`source indices to be copied are outside bounds`);\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error(`target array is too small to hold result`);\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error(`sourceIndex out of bounds`);\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error(`targetIndex out of bounds`);\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error(`source indices to be copied are outside bounds`);\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error(`target array is too small to hold result`);\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error(`sourceIndex out of bounds`);\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error(`targetIndex out of bounds`);\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error(`source indices to be copied are outside bounds`);\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error(`target array is too small to hold result`);\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: ReadonlyArray<number>, axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error(`need to know number of outputs when the 'split' attribute is not specified`);\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error(`cannot split tensor to equal sized parts`);\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>, keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, kernelShape: number[], strides: number[],\n      pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error(`length of specified kernel shapes should be 2 less than length of input dimensions`);\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error(`strides should be greater than or equal to 1`);\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error(`pad should be greater than or equal to 1`);\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error(`kernel shapes need to be greater than 0`);\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error(`pads should be smaller than kernel`);\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: ReadonlyArray<number>, strides: number[], dilations: number[], kernelShape: number[], pads: number[],\n      autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, strides: number[], kernelShape: number[],\n      pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error(`input shape must be of size greater than 0`);\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    // TODO: support dilations for pool operators\n    const dilations = new Array<number>(kernelShape.length).fill(1);\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: ReadonlyArray<number>, filterDims: ReadonlyArray<number>, strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error(`invalid input tensor dims or invalid filter tensor dims`);\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, outputDims: number[], strides: ReadonlyArray<number>,\n      dilations: ReadonlyArray<number>, kernelShape: ReadonlyArray<number>, pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error(`Dilation not supported for SAME_UPPER or SAME_LOWER`);\n          }\n          const legacyTargetSize = (inSize + stride - 1) / stride;\n          const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n          pads[padHeadIndex] = (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n          pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n          return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n        default:\n          throw new Error(`Unsupported AutoPad type`);\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {ProtoUtil, ShapeUtil} from './util';\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export interface Id {\n    // this field helps typescript to perform type check, comparing to use `Id` as an alias of object.\n    _tensorDataId_unused?: never;\n  }\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error(`Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.`);\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError(`data type is not string`);\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError(`data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)`);\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError(`data type is not float (float32, float64)`);\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError(`type cannot be non-number (string)`);\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: ReadonlyArray<number>): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: ReadonlyArray<number>, value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    // TBD: This function is designed for usage when any backend data provider offers a way to retrieve data in an\n    //      asynchronous way. should implement this function when enabling webgl async read data.\n\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: ReadonlyArray<number>;\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): ReadonlyArray<number> {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: ReadonlyArray<number>,\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Tensor.Id = {}) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError(`Input dims doesn't match data length.`);\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError(`cache should be a string array`);\n      }\n\n      if (empty) {\n        cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        const buf = Buffer.from(str.buffer, str.byteOffset, str.byteLength);\n        value.data[i] = buf.toString();\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error(`invalid buffer length`);\n      }\n      if (dataDest.length !== length) {\n        throw new Error(`buffer length mismatch`);\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error(`array length mismatch`);\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: ReadonlyArray<number>, type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (type === onnx.TensorProto.DataType.UINT32 || type === onnx.TensorProto.DataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'info' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n  }\n}\n\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'info',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// tslint:disable-next-line:no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    // tslint:disable-next-line:no-backbone-get-set-outside-model\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n}\n\n// tslint:disable-next-line:variable-name\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void;\n  }\n}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void) {}\n\n  end() {\n    this.endCallback(this);\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>): T|Promise<T> {\n    const event = this._started ? this.begin(category, name) : undefined;\n    let isPromise = false;\n\n    try {\n      const res = func();\n\n      // we consider a then-able object is a promise\n      if (res && typeof (res as Promise<T>).then === 'function') {\n        isPromise = true;\n        return new Promise<T>((resolve, reject) => {\n          (res as Promise<T>)\n              .then(\n                  value => {  // fulfilled\n                    resolve(value);\n                    if (event) {\n                      event.end();\n                    }\n                  },\n                  reason => {  // rejected\n                    reject(reason);\n                    if (event) {\n                      event.end();\n                    }\n                  });\n        });\n      }\n\n      return res;\n\n    } finally {\n      if (!isPromise && event) {\n        event.end();\n      }\n    }\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    const startTime = now();\n    this.flush(startTime);\n    return new Event(category, name, startTime, e => this.end(e));\n  }\n\n  // end the specific event\n  private end(event: Event) {\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      const endTime = now();\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger} from './instrument';\nimport * as bindingCore from './wasm-binding-core';\nimport {WasmCallArgument} from './wasm-binding-core';\n\nexport {WasmCallArgument} from './wasm-binding-core';\n\ninterface PerformanceData extends bindingCore.PerformanceData {\n  startTimeWorker?: number;\n  endTimeWorker?: number;\n}\n\nlet workers: Worker[];\nlet WORKER_NUMBER: number;\n\n// complete callback after\ntype CompleteCallbackType = (buffer: ArrayBuffer, perfData: PerformanceData) => void;\nlet completeCallbacks: CompleteCallbackType[][];\n\nlet initialized = false;\nlet initializing = false;\n\n/**\n * initialize the WASM instance.\n *\n * this function should be called before any other calls to methods in WasmBinding.\n */\nexport function init(numWorkers: number, initTimeout: number): Promise<void> {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error(`multiple calls to 'init()' detected.`);\n  }\n\n  initializing = true;\n  return new Promise<void>((resolve, reject) => {\n    // the timeout ID that used as a guard for rejecting binding init.\n    // we set the type of this variable to unknown because the return type of function 'setTimeout' is different\n    // in node.js (type Timeout) and browser (number)\n    let waitForBindingInitTimeoutId: unknown;\n    const clearWaitForBindingInit = () => {\n      if (waitForBindingInitTimeoutId !== undefined) {\n        // tslint:disable-next-line:no-any\n        clearTimeout(waitForBindingInitTimeoutId as any);\n        waitForBindingInitTimeoutId = undefined;\n      }\n    };\n\n    const onFulfilled = () => {\n      clearWaitForBindingInit();\n      resolve();\n      initializing = false;\n      initialized = true;\n    };\n    const onRejected = (err: unknown) => {\n      clearWaitForBindingInit();\n      reject(err);\n      initializing = false;\n    };\n\n    const bindingInitTask = bindingCore.init();\n    // a promise that gets rejected after 5s to work around the fact that\n    // there is an unrejected promise in the wasm glue logic file when\n    // it has some problem instantiating the wasm file\n    const rejectAfterTimeOutPromise = new Promise((resolve, reject) => {\n      waitForBindingInitTimeoutId = setTimeout(() => {\n        reject('Wasm init promise failed to be resolved within set timeout');\n      }, initTimeout);\n    });\n\n    // user requests positive number of workers\n    if (numWorkers > 0) {\n      Logger.verbose('WebAssembly-Workers', `User has requested ${numWorkers} Workers.`);\n      // check if environment supports usage of workers\n      if (areWebWorkersSupported()) {\n        Logger.verbose(\n            'WebAssembly-Workers', `Environment supports usage of Workers. Will spawn ${numWorkers} Workers`);\n        WORKER_NUMBER = numWorkers;\n      } else {\n        Logger.error('WebAssembly-Workers', 'Environment does not support usage of Workers. Will not spawn workers.');\n        WORKER_NUMBER = 0;\n      }\n    }\n\n    // user explicitly disables workers\n    else {\n      Logger.verbose('WebAssembly-Workers', 'User has disabled usage of Workers. Will not spawn workers.');\n      WORKER_NUMBER = 0;\n    }\n\n    const workerInitTasks = new Array<Promise<void>>(WORKER_NUMBER);\n    workers = new Array(WORKER_NUMBER);\n    completeCallbacks = new Array(WORKER_NUMBER);\n\n    for (let workerId = 0; workerId < WORKER_NUMBER; workerId++) {\n      const workerInitTask = new Promise<void>((resolveWorkerInit, rejectWorkerInit) => {\n        // tslint:disable-next-line\n        const worker = require('worker-loader?filename=onnx-worker.js!./worker/worker-main').default() as Worker;\n        workers[workerId] = worker;\n        completeCallbacks[workerId] = [];\n        worker.onerror = e => {\n          Logger.error('WebAssembly-Workers', `worker-${workerId} ERR: ${e}`);\n          if (initialized) {\n            // TODO: we need error-handling logic\n          } else {\n            rejectWorkerInit();\n          }\n        };\n        worker.onmessage = e => {\n          if (e && e.data && e.data.type) {\n            if (e.data.type === 'init-success') {\n              resolveWorkerInit();\n            } else if (e.data.type === 'ccall') {\n              const perfData = e.data.perfData as PerformanceData;\n              completeCallbacks[workerId].shift()!(e.data.buffer as ArrayBuffer, perfData);\n            } else {\n              throw new Error(`unknown message type from worker: ${e.data.type}`);\n            }\n          } else {\n            throw new Error(`missing message type from worker`);\n          }\n        };\n      });\n      workerInitTasks[workerId] = workerInitTask;\n    }\n\n    // TODO: Fix this hack to work-around the fact that the Wasm binding instantiate promise\n    // is unrejected incase there is a fatal exception (missing wasm file for example)\n    // we impose a healthy timeout (should not affect core framework performance)\n    Promise.race([bindingInitTask, rejectAfterTimeOutPromise])\n        .then(\n            () => {\n              // Wasm init promise resolved\n              Promise.all(workerInitTasks)\n                  .then(\n                      // Wasm AND Web-worker init promises resolved. SUCCESS!!\n                      onFulfilled,\n                      // Wasm init promise resolved. Some (or all) web-worker init promises failed to be resolved.\n                      // PARTIAL SUCCESS. Use Wasm backend with no web-workers (best-effort).\n                      (e) => {\n                        Logger.warning(\n                            'WebAssembly-Workers',\n                            `Unable to get all requested workers initialized. Will use Wasm backend with 0 workers. ERR: ${\n                                e}`);\n                        // TODO: need house-keeping logic to cull exisitng successfully initialized workers\n                        WORKER_NUMBER = 0;\n                        onFulfilled();\n                      });\n            },\n            // Wasm init promise failed to be resolved. COMPLETE FAILURE. Reject this init promise.\n            onRejected);\n  });\n}\n\n// Extending the WasmBinding class to deal with web-worker specific logic here\nexport class WasmBinding extends bindingCore.WasmBinding {\n  protected static instance?: WasmBinding;\n  static getInstance(): WasmBinding {\n    if (!WasmBinding.instance) {\n      WasmBinding.instance = new WasmBinding();\n    }\n    return WasmBinding.instance;\n  }\n  static get workerNumber() {\n    return WORKER_NUMBER;\n  }\n  ccallRemote(workerId: number, functionName: string, ...params: WasmCallArgument[]): Promise<PerformanceData> {\n    if (!initialized) {\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\n    }\n\n    if (workerId < 0 || workerId >= WORKER_NUMBER) {\n      throw new Error(`invalid worker ID ${workerId}. should be in range [0, ${WORKER_NUMBER})`);\n    }\n\n    const offset: number[] = [];\n    const size = WasmBinding.calculateOffsets(offset, params);\n    const buffer = new ArrayBuffer(size);\n    WasmBinding.ccallSerialize(new Uint8Array(buffer), offset, params);\n\n    const startTime = bindingCore.now();\n    workers[workerId].postMessage({type: 'ccall', func: functionName, buffer}, [buffer]);\n\n    return new Promise<PerformanceData>((resolve, reject) => {\n      completeCallbacks[workerId].push((buffer, perf) => {\n        perf.startTimeWorker = perf.startTime;\n        perf.endTimeWorker = perf.endTime;\n        perf.startTime = startTime;\n        perf.endTime = bindingCore.now();\n\n        WasmBinding.ccallDeserialize(new Uint8Array(buffer), offset, params);\n        resolve(perf);\n      });\n    });\n  }\n}\n\nfunction areWebWorkersSupported(): boolean {\n  // very simplistic check to make sure the environment supports usage of workers\n  // tslint:disable-next-line:no-any\n  if (typeof window !== 'undefined' && typeof (window as any).Worker !== 'undefined') {\n    return true;\n  }\n  return false;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from './attribute';\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport interface Operator {\n  initialize(attributes: Attribute, node: Graph.Node, graph: Graph): void;\n  checkInputs(inputs: Tensor[]): boolean;\n  run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n}\n\nexport const NUMBER_TYPES: ReadonlyArray<Tensor.DataType> =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: ReadonlyArray<Tensor.DataType> = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: ReadonlyArray<Tensor.DataType> = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {ProgramInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport interface GlslValueFunction extends GlslFunction<FunctionType.ValueBased> {}\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: ReadonlyArray<number>;\n  outputShape: ReadonlyArray<number>;\n}\n\nexport class GlslContext {\n  constructor(public glContext: WebGLContext, public programInfo: ProgramInfo) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error(`Cyclic dependency detected. Can't topologically sort routines needed for shader.`);\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n// global object reference\nutil.global = typeof window !== \"undefined\" && window\n           || typeof global !== \"undefined\" && global\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Reshape} from '../../../ops/reshape';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureLayout} from '../types';\nimport {getPackedShape} from '../utils';\n\nexport class WebGLReshape extends Reshape {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n    const reshapedTensor = reshape(inferenceHandler, inputs[0], reshapedDims);\n    return [reshapedTensor];\n  }\n}\n\nexport function reshape(\n    inferenceHandler: WebGLInferenceHandler, input: Tensor, reshapedDims: ReadonlyArray<number>): Tensor {\n  const inputTD = inferenceHandler.getOrCreateTextureData(input);\n  let packedShape = reshapedDims;\n  if (inputTD.channels === 4) {\n    packedShape = getPackedShape(reshapedDims);\n  }\n  const newTextureLayout: TextureLayout = {\n    channels: inputTD.channels,\n    height: inputTD.height,\n    width: inputTD.width,\n    // handle reshaping into scalar Tensors\n    shape: packedShape.length !== 0 ? packedShape : [1],\n    strides: ShapeUtil.computeStrides(packedShape),\n    unpackedShape: reshapedDims,\n  };\n\n  const newTextureData =\n      inferenceHandler.createSharedTextureData(newTextureLayout, input.type, inputTD.texture, input.dataId);\n  return newTextureData.tensor;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Graph} from './graph';\nimport {Operator} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\n\nexport declare namespace OpSet {\n  interface OperatorConstructor {\n    (node: Graph.Node): Operator;\n  }\n\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml';\n\n  /**\n   * A resolve rule consists of 4 items: opType, opSetDomain, versionSelector and operatorConstructor\n   */\n  type ResolveRule = [string, Domain, string, OperatorConstructor];\n}\n\nexport function resolveOperator(\n    node: Graph.Node, opsets: ReadonlyArray<OpSet>, rules: ReadonlyArray<OpSet.ResolveRule>) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opConstructor = rule[3];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return opConstructor(node);\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\n// currently this operator supports ONLY 'test' mode\n// inputs/outputs and parameters will reflect that\n// the operator implementation only supports test mode\nexport abstract class BatchNormalization implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\n    this.momentum = attributes.getFloat('momentum', 0.9);\n    this.spatial = attributes.getInt('spatial', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 5) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n    const mean = inputs[3];\n    const var_ = inputs[4];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs can have only one dimensions\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n        var_.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n        var_.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n        (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n        (var_.type !== 'float32' && var_.type !== 'float64')) {\n      return false;\n    }\n    return true;\n  }\n\n  protected epsilon: number;\n  protected momentum: number;\n  protected spatial: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class BinaryOp implements Operator {\n  constructor(\n      protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected opType?: string,\n      protected resultType?: Tensor.DataType) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[0].type !== inputs[1].type) {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Conv implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.dilations = attributes.getInts('dilations', [1, 1]);\n    this.group = attributes.getInt('group', 1);\n    this.kernelShape = attributes.getInts('kernel_shape', []);\n    this.pads = attributes.getInts('pads', [0, 0, 0, 0]);\n    this.strides = attributes.getInts('strides', [1, 1]);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    // Refer to the below link for all input checks\n    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n    if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n      return false;\n    }\n\n    // TODO : Need to add support for multi-dimensional conv\n    // currently only support 2-dimensional conv\n    if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n      return false;\n    }\n\n    // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n    const dataChannel = inputs[0].dims[1];\n    const filterInChannel = inputs[1].dims[1] * this.group;\n    if (dataChannel !== filterInChannel) {\n      return false;\n    }\n\n    // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n    if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n      return false;\n    }\n\n    const spatialRank = inputs[0].dims.length - 2;\n    // wrong dilations dimension\n    if (this.dilations.length !== spatialRank) {\n      return false;\n    }\n\n    // Wrong strides dimension\n    if (this.strides.length !== spatialRank) {\n      return false;\n    }\n\n    // Wrong pads dimension\n    if (this.pads.length !== spatialRank * 2) {\n      return false;\n    }\n\n    // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n    // (the first 2 dims are batch_size and channels)\n    if (this.kernelShape.length !== 0 && this.kernelShape.length !== inputs[1].dims.length - 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO : Need to add support for float64\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n      return false;\n    }\n\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected autoPad: string;\n  protected dilations: number[];\n  protected group: number;\n  protected kernelShape: number[];\n  protected pads: number[];\n  protected strides: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {MatMul} from '../../../ops/matmul';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, MatMulUtil, ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuMatMul extends MatMul {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = matMul(inputs[0], inputs[1]);\n    return [output];\n  }\n}\n\nexport function matMul(a: Tensor, b: Tensor) {\n  const [dimsA, dimsB] = MatMulUtil.preprocessInputShapes(a.dims, b.dims);\n  const mat2dShape = [dimsA[dimsA.length - 2], dimsB[dimsB.length - 1]];\n  const shape = BroadcastUtil.calcShape(dimsA, dimsB, true);\n  if (!shape) {\n    // the inputs cannot broadcast or cannot multiply\n    throw new Error(`input dimensions do not match the requirement`);\n  }\n  const size = ShapeUtil.size(shape);\n  const num2dMatrices = size / (mat2dShape[0] * mat2dShape[1]);\n\n  const y = new Tensor(shape, a.type === 'float64' || b.type === 'float64' ? 'float64' : 'float32');\n  let offsetY = 0;\n  const indices = new Array<number>(shape.length);\n  const indicesA = new Array<number>(a.dims.length);\n  const indicesB = new Array<number>(b.dims.length);\n  for (let i = 0; i < num2dMatrices; i++) {\n    // traverse nd array at 2d level\n    indices[shape.length - 2] = 0;\n    indices[shape.length - 1] = 0;\n    let rest = i;\n    for (let j = shape.length - 3; j >= 0; j--) {\n      indices[j] = rest % shape[j];\n      rest = Math.floor(rest / shape[j]);\n    }\n    // map the \"broadcasted\" index to original index\n    BroadcastUtil.fillIndex(indices, a.dims, indicesA);\n    BroadcastUtil.fillIndex(indices, b.dims, indicesB);\n    // calculate subarrays offset for A and B\n    const offsetA = indicesA.length <= 2 ? 0 : ShapeUtil.indicesToOffset(indicesA, a.strides, shape.length - 2);\n    const offsetB = indicesB.length <= 2 ? 0 : ShapeUtil.indicesToOffset(indicesB, b.strides, shape.length - 2);\n    // multiply like conventional matrices\n    matMul2d(\n        a.floatData.subarray(offsetA), b.floatData.subarray(offsetB), y.floatData.subarray(offsetY), false, false, 1, 0,\n        mat2dShape[0], mat2dShape[1], dimsA[dimsA.length - 1]);\n    offsetY += mat2dShape[0] * mat2dShape[1];\n  }\n  return y;\n}\n\n/**\n * perform matrix multiply on C = alpha * A * B + beta * C\n * @param A data of tensor A, whose shape is [M,K] or [K,M] (if transA)\n * @param B data of tensor B, whose shape is [K,N] or [N,K] (if transB)\n * @param C data of tensor C, whose shape is [M,N]\n */\nexport function matMul2d(\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, transA: boolean,\n    transB: boolean, alpha: number, beta: number, M: number, N: number, K: number) {\n  if (transA && transB) {\n    return matMul2d_tAtB(A, B, C, alpha, beta, M, N, K);\n  } else if (transA) {\n    return matMul2d_tA(A, B, C, alpha, beta, M, N, K);\n  } else if (transB) {\n    return matMul2d_tB(A, B, C, alpha, beta, M, N, K);\n  } else {\n    return matMul2d_(A, B, C, alpha, beta, M, N, K);\n  }\n}\n\nfunction matMul2d_(\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\n    beta: number, M: number, N: number, K: number) {\n  let offsetA = 0, offsetB = 0, offsetC = 0;\n  for (let mm = 0; mm < M; mm++) {\n    for (let nn = 0; nn < N; nn++) {\n      let sum = 0;\n      for (let kk = 0; kk < K; kk++) {\n        sum += A[offsetA] * B[offsetB];\n        offsetA += 1;\n        offsetB += N;\n      }\n      offsetA -= K;\n      offsetB -= N * K;\n      C[offsetC] = alpha * sum + beta * C[offsetC];\n      offsetC++;\n      offsetB++;\n    }\n    offsetB -= N;\n    offsetA += K;\n  }\n}\n\nfunction matMul2d_tA(\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\n    beta: number, M: number, N: number, K: number) {\n  let offsetA = 0, offsetB = 0, offsetC = 0;\n  for (let mm = 0; mm < M; mm++) {\n    for (let nn = 0; nn < N; nn++) {\n      let sum = 0;\n      for (let kk = 0; kk < K; kk++) {\n        sum += A[offsetA] * B[offsetB];\n        offsetA += M;\n        offsetB += N;\n      }\n      offsetA -= M * K;\n      offsetB -= N * K;\n      C[offsetC] = alpha * sum + beta * C[offsetC];\n      offsetC++;\n      offsetB++;\n    }\n    offsetB -= N;\n    offsetA++;\n  }\n}\n\nfunction matMul2d_tB(\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\n    beta: number, M: number, N: number, K: number) {\n  let offsetA = 0, offsetB = 0, offsetC = 0;\n  for (let mm = 0; mm < M; mm++) {\n    for (let nn = 0; nn < N; nn++) {\n      let sum = 0;\n      for (let kk = 0; kk < K; kk++) {\n        sum += A[offsetA] * B[offsetB];\n        offsetA += 1;\n        offsetB += 1;\n      }\n      offsetA -= K;\n      offsetB -= K;\n      C[offsetC] = alpha * sum + beta * C[offsetC];\n      offsetC++;\n      offsetB += K;\n    }\n    offsetB -= N * K;\n    offsetA += K;\n  }\n}\n\nfunction matMul2d_tAtB(\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\n    beta: number, M: number, N: number, K: number) {\n  let offsetA = 0, offsetB = 0, offsetC = 0;\n  for (let mm = 0; mm < M; mm++) {\n    for (let nn = 0; nn < N; nn++) {\n      let sum = 0;\n      for (let kk = 0; kk < K; kk++) {\n        sum += A[offsetA] * B[offsetB];\n        offsetA += M;\n        offsetB += 1;\n      }\n      offsetA -= M * K;\n      offsetB -= K;\n      C[offsetC] = alpha * sum + beta * C[offsetC];\n      offsetC++;\n      offsetB += K;\n    }\n    offsetB -= N * K;\n    offsetA++;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class MatMul implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n\n    if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    if (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') {\n      return false;\n    }\n\n    if (inputs[0].type !== inputs[1].type) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Gemm implements Operator {\n  constructor(isOptionalC: boolean) {\n    this.isOptionalC = isOptionalC;\n  }\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.transA = attributes.getInt('transA', 0) !== 0;\n    this.transB = attributes.getInt('transB', 0) !== 0;\n    this.alpha = attributes.getFloat('alpha', 1);\n    this.beta = attributes.getFloat('beta', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs) {\n      return false;\n    }\n    if (this.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n      return false;\n    }\n    if (!this.isOptionalC && inputs.length !== 3) {\n      return false;\n    }\n\n    // 'C' can be of dimensionality 1 or 2 only\n    if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n        (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n        (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n      return false;\n    }\n\n    if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected transA: boolean;\n  protected transB: boolean;\n  protected alpha: number;\n  protected beta: number;\n\n  protected isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class InstanceNormalization implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 3) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs can have only one dimensions\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n        (B.type !== 'float32' && B.type !== 'float64')) {\n      return false;\n    }\n    return true;\n  }\n\n  protected epsilon: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nclass PoolBase {\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected autoPad: string;\n  protected ceilMode: number;\n  protected countIncludePad: boolean;\n  protected kernelShape: number[];\n  protected strides: number[];\n  protected pads: number[];\n}\n\nexport abstract class AveragePool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.kernelShape = attributes.getInts('kernel_shape');\n    this.strides = attributes.getInts('strides', []);\n    this.pads = attributes.getInts('pads', []);\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\n\n    // TODO: support attribute 'ceil_mode'\n    if (this.ceilMode !== 0) {\n      throw new Error(`using ceil() in shape computation is not yet supported for AveragePool`);\n    }\n  }\n}\n\nexport abstract class GlobalAveragePool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n  }\n}\n\nexport abstract class MaxPool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\n    this.kernelShape = attributes.getInts('kernel_shape');\n    this.strides = attributes.getInts('strides', []);\n    this.pads = attributes.getInts('pads', []);\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\n    this.storageOrder = attributes.getInt('storage_order', 0);\n\n    // TODO: support attribute 'ceil_mode' and 'storage_order'\n    if (this.storageOrder !== 0) {\n      throw new Error(`column major storage order is not yet supported for MaxPool`);\n    }\n    if (this.ceilMode !== 0) {\n      throw new Error(`using ceil() in shape computation is not yet supported for MaxPool`);\n    }\n  }\n\n  protected storageOrder: number;\n}\n\nexport abstract class GlobalMaxPool extends PoolBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Softmax implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 1);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Sum implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length === 0) {\n      return false;\n    }\n\n    const length = inputs[0].dims.length;\n    for (let i = 1; i < inputs.length; i++) {\n      if (length !== inputs[i].dims.length) {\n        return false;\n      }\n\n      for (let j = 0; j < length; j++) {\n        if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n          return false;\n        }\n      }\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n    for (let i = 1; i < inputs.length; i++) {\n      if (inputs[0].type !== inputs[i].type) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import * as platform from 'platform';\n\nimport * as onnx from './api';\nimport {Backend, Environment, Onnx} from './api';\n\ninterface ENV extends Environment {\n  readonly onnx: Onnx;\n  readonly backend: Backend;\n  readonly platform: Platform;\n}\n\nclass EnvironmentImpl implements ENV {\n  public readonly onnx = onnx;\n  public readonly backend = onnx.backend;\n  public readonly platform = platform;\n\n  public debug = false;\n}\n\nexport const env: ENV = new EnvironmentImpl();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Onnx} from './onnx';\nimport * as onnxImpl from './onnx-impl';\n\n// get or create the onnx object in the global context\nconst onnxGlobal = ((typeof window !== 'undefined') ? window : global) as {onnx?: Onnx};\nconst onnx: Onnx = onnxImpl;\nonnxGlobal.onnx = onnx;\n\n// set module exported object to global.onnx\nexport = onnxImpl;\n\n// declaration of object global.onnx\ndeclare global {\n  /**\n   * the global onnxjs exported object\n   */\n  const onnx: Onnx;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\nimport {OpSet} from '../../opset';\n\nimport {CpuArgMax} from './ops/argMax';\nimport {CpuBatchNormalization} from './ops/batch-normalization';\nimport {CpuBinaryOp} from './ops/binary-op';\nimport {CpuCast} from './ops/cast';\nimport {CpuConcat} from './ops/concat';\nimport {CpuConv} from './ops/conv';\nimport {CpuDropout} from './ops/dropout';\nimport {CpuExpand} from './ops/expand';\nimport {CpuFlatten} from './ops/flatten';\nimport {CpuGather} from './ops/gather';\nimport {CpuGemm} from './ops/gemm';\nimport {CpuImageScaler} from './ops/image-scaler';\nimport {CpuInstanceNormalization} from './ops/instance-normalization';\nimport {CpuLrn} from './ops/lrn';\nimport {CpuMatMul} from './ops/matmul';\nimport {CpuPad} from './ops/pad';\nimport {CpuAveragePool, CpuGlobalAveragePool, CpuGlobalMaxPool, CpuMaxPool} from './ops/pool';\nimport * as cpuReduce from './ops/reduce';\nimport {CpuReshape} from './ops/reshape';\nimport {CpuShape} from './ops/shape';\nimport {CpuSlice, CpuSliceV10} from './ops/slice';\nimport {CpuSoftmax} from './ops/softmax';\nimport {CpuSqueeze} from './ops/squeeze';\nimport {CpuSum} from './ops/sum';\nimport {CpuTile} from './ops/tile';\nimport {CpuTranspose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {CpuUnaryOp} from './ops/unary-op';\nimport {CpuUnsqueeze} from './ops/unsqueeze';\nimport {CpuUpsample} from './ops/upsample';\n\nexport const CPU_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\n  ['Abs', '', '6+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.abs)],\n  ['Acos', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.acos)],\n  ['Acosh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.acosh)],\n  ['Add', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 + e2))],\n  ['And', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 && e2))],\n  ['ArgMax', '', '1-11', () => new CpuArgMax()],\n  ['Asin', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.asin)],\n  ['Asinh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.asinh)],\n  ['Atan', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.atan)],\n  ['Atanh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.atanh)],\n  ['AveragePool', '', '7-10', () => new CpuAveragePool()],  // TODO: support new attributes for AveragePool-10\n  ['BatchNormalization', '', '7+', () => new CpuBatchNormalization()],\n  ['Cast', '', '6+', () => new CpuCast()],\n  ['Ceil', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.ceil)],\n  ['Clip', '', '6-10', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.clip, unaryOps.clipInitializer)],\n  ['Concat', '', '4+', () => new CpuConcat()],\n  ['Conv', '', '1+', () => new CpuConv()],\n  ['Cos', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.cos)],\n  ['Cosh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.cosh)],\n  ['Div', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 / e2))],\n  ['Dropout', '', '7+', () => new CpuDropout()],\n  ['Elu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.elu, unaryOps.eluInitializer)],\n  ['Exp', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.exp)],\n  ['Expand', '', '8+', () => new CpuExpand()],\n  ['Flatten', '', '1+', () => new CpuFlatten()],\n  ['Floor', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.floor)],\n  ['Gather', '', '1+', () => new CpuGather()],\n  ['Gemm', '', '7-10', () => new CpuGemm(false)],\n  ['Gemm', '', '11+', () => new CpuGemm(true)],\n  ['GlobalAveragePool', '', '1+', () => new CpuGlobalAveragePool()],\n  ['GlobalMaxPool', '', '1+', () => new CpuGlobalMaxPool()],\n  ['ImageScaler', '', '1+', () => new CpuImageScaler()],\n  ['InstanceNormalization', '', '6+', () => new CpuInstanceNormalization()],\n  ['IsNaN', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.isNan, undefined, 'bool')],\n  ['LeakyRelu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.leakyRelu, unaryOps.leakyReluInitializer)],\n  ['Log', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.log)],\n  ['LRN', '', '1+', () => new CpuLrn()],\n  ['MatMul', '', '1+', () => new CpuMatMul()],\n  ['MaxPool', '', '1-9', () => new CpuMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['Mul', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 * e2))],\n  ['Neg', '', '6+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.neg)],\n  ['Not', '', '1+', () => new CpuUnaryOp(['bool'], unaryOps.not, undefined, 'bool')],\n  ['Or', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 || e2))],\n  ['PRelu', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 >= 0 ? e1 : e1 * e2))],\n  ['Pad', '', '2-10', () => new CpuPad()],\n  ['Pow', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 ** e2))],\n  ['Reciprocal', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.reciprocal)],\n  ['ReduceLogSum', '', '1+', () => new cpuReduce.CpuReduceLogSum()],\n  ['ReduceMax', '', '1+', () => new cpuReduce.CpuReduceMax()],\n  ['ReduceMean', '', '1+', () => new cpuReduce.CpuReduceMean()],\n  ['ReduceMin', '', '1+', () => new cpuReduce.CpuReduceMin()],\n  ['ReduceProd', '', '1+', () => new cpuReduce.CpuReduceProd()],\n  ['ReduceSum', '', '1+', () => new cpuReduce.CpuReduceSum()],\n  ['ReduceSumSquare', '', '1+', () => new cpuReduce.CpuReduceSumSquare()],\n  ['Relu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.relu)],\n  ['Reshape', '', '5+', () => new CpuReshape()],\n  ['Resize', '', '10', () => new CpuUpsample(10)],\n  ['Resize', '', '11+', () => new CpuUpsample(11)],\n  ['Shape', '', '1+', () => new CpuShape()],\n  ['Sigmoid', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sigmoid)],\n  ['Sign', '', '9+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.sign)],\n  ['Sin', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sin)],\n  ['Sinh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sinh)],\n  ['Slice', '', '10+', () => new CpuSliceV10()],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', () => new CpuSlice()],\n  ['Softmax', '', '1+', () => new CpuSoftmax()],\n  ['Sqrt', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sqrt)],\n  ['Squeeze', '', '1+', () => new CpuSqueeze()],\n  ['Sub', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 - e2))],\n  ['Sum', '', '6+', () => new CpuSum()],  // TODO: support multidirectional broadcast for Sum-8\n  ['Tan', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.tan)],\n  ['Tanh', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.tanh)],\n  ['Tile', '', '6+', () => new CpuTile()],\n  ['Transpose', '', '1+', () => new CpuTranspose()],\n  ['Unsqueeze', '', '1+', () => new CpuUnsqueeze()],\n  ['Upsample', '', '7-8', () => new CpuUpsample(7)],\n  ['Upsample', '', '9', () => new CpuUpsample(9)],\n  ['Xor', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 ^ e2))],\n];\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Concat implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length < 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    const inputType = inputs[0].type;\n    const inputDimensionality = inputs[0].dims.length;\n\n    // TODO: Support string concat\n    if (inputType === 'string') {\n      return false;\n    }\n\n    for (const input of inputs) {\n      // make sure types of all inputs match\n      if (input.type !== inputType) {\n        return false;\n      }\n\n      // make sure the dimensionality of all inputs are the same\n      if (input.dims.length !== inputDimensionality) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Dropout implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.ratio = attributes.getFloat('ratio', 0.5);\n    this.testMode = true;  // this is a hack to reflect that test mode is hardcoded\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected ratio: number;\n  protected testMode: boolean;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Flatten implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 1);  // default axis is 1\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    const r = inputs[0].dims.length;\n    if (r === 0) {\n      return false;  // scalar tensor is not supported\n    }\n\n    if (this.axis < -r || this.axis > r) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Gather implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 0);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n    const tensorRank = inputs[0].dims.length;\n    if (tensorRank < 1) {\n      return false;\n    }\n    if (this.axis < -tensorRank || this.axis > tensorRank - 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n      return false;\n    }\n    return true;\n  }\n\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class ImageScaler implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.scale = attributes.getFloat('scale');\n    this.bias = attributes.getFloats('bias');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    if (inputs[0].dims.length !== 4) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected scale: number;\n  protected bias: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Pad implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.mode = attributes.getString('mode', 'constant');\n    this.value = attributes.getFloat('value', 0.0);\n    this.pads = attributes.getInts('pads');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected mode: string;\n  protected pads: number[];\n  protected value: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class ReduceBase implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes', []);\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n  protected keepDims: boolean;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Reshape implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2 || inputs[1].dims.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    if (inputs[1].type !== 'int32') {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Slice implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.starts = attributes.getInts('starts');\n    this.ends = attributes.getInts('ends');\n    this.axes = attributes.getInts('axes', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    return true;\n  }\n\n  protected axes: number[];\n  protected ends: number[];\n  protected starts: number[];\n}\n\nexport abstract class SliceV10 implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length < 3 || inputs.length > 5) {\n      return false;\n    }\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n      return false;\n    }\n    if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n      return false;\n    }\n    if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n      return false;\n    }\n    if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Squeeze implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Tile implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n    if (inputs[1].dims.length !== 1) {\n      return false;\n    }\n    if (inputs[1].dims[0] !== inputs[0].dims.length) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Transpose implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.perm = attributes.getInts('perm', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected perm: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../../../attribute';\nimport {UnaryOp} from '../../../ops/unary-op';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\ntype UnaryOpCoreFunction<T> = (input: Tensor.NumberType, output: Tensor.NumberType, attributes?: T) => void;\n\nexport class CpuUnaryOp<T = unknown> extends UnaryOp {\n  private attributes?: T;\n\n  constructor(\n      typeConstraint: ReadonlyArray<Tensor.DataType>, private func: UnaryOpCoreFunction<T>,\n      private attributesInitializer?: (attributes: Attribute) => T, resultType?: Tensor.DataType) {\n    super(typeConstraint, resultType);\n  }\n\n  initialize(attributes: Attribute) {\n    if (this.attributesInitializer) {\n      this.attributes = this.attributesInitializer(attributes);\n    }\n  }\n\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    // TODO:  use webpack + ts-loader + CustomTransformer\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/TypeStrong/ts-loader#getcustomtransformers-----before-transformerfactory-after-transformerfactory--\n    const output = unaryOp(inputs[0], this.func, this.attributes, this.resultType);\n    return [output];\n  }\n}\n\nexport function unaryOp<T>(\n    x: Tensor, func: UnaryOpCoreFunction<T>, attributes: T, resultType?: Tensor.DataType): Tensor {\n  const output = new Tensor(x.dims, resultType ? resultType : x.type);\n  const inputNumberData = x.data as Tensor.NumberType;\n  const outputNumberData = output.data as Tensor.NumberType;\n  func(inputNumberData, outputNumberData, attributes);\n  return output;\n}\n\n// specific implementations pertaining to each unary-op.\n// although this can be accomplished with an op lambda\n// that approach was found to be detrimental to performance\n// so we use this approach which involves slight code duplication\n\nexport function abs(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.abs(input[i]);\n  }\n}\n\nexport function acos(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.acos(input[i]);\n  }\n}\n\nexport function acosh(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.acosh(input[i]);\n  }\n}\n\nexport function asin(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.asin(input[i]);\n  }\n}\n\nexport function asinh(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.asinh(input[i]);\n  }\n}\n\nexport function atan(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.atan(input[i]);\n  }\n}\n\nexport function atanh(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.atanh(input[i]);\n  }\n}\n\nexport function ceil(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.ceil(input[i]);\n  }\n}\n\nexport function clipInitializer(attributes: Attribute) {\n  return {\n    min: attributes.getFloat('min', -3.4028234663852886e+38),\n    max: attributes.getFloat('max', 3.4028234663852886e+38)\n  };\n}\n\nexport function clip(input: Tensor.NumberType, output: Tensor.NumberType, attributes: {min: number, max: number}) {\n  const min = attributes.min;\n  const max = attributes.max;\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    output[i] = (value < min) ? min : (value > max) ? max : value;\n  }\n}\n\nexport function cos(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.cos(input[i]);\n  }\n}\n\nexport function cosh(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.cosh(input[i]);\n  }\n}\n\nexport function eluInitializer(attributes: Attribute) {\n  return attributes.getFloat('alpha', 1.0);\n}\n\nexport function elu(input: Tensor.NumberType, output: Tensor.NumberType, attributes: number) {\n  const alpha = attributes;\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    output[i] = value >= 0 ? value : alpha * (Math.exp(value) - 1.0);\n  }\n}\n\nexport function exp(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.exp(input[i]);\n  }\n}\n\nexport function floor(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.floor(input[i]);\n  }\n}\n\nexport function isNan(input: Tensor.NumberType, output: Tensor.BooleanType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Number.isNaN(input[i]) ? 1 : 0;\n  }\n}\n\nexport function leakyReluInitializer(attributes: Attribute) {\n  return attributes.getFloat('alpha', 0.01);\n}\n\nexport function leakyRelu(input: Tensor.NumberType, output: Tensor.NumberType, attributes: number) {\n  const alpha = attributes;\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    output[i] = value >= 0 ? value : alpha * value;\n  }\n}\n\nexport function log(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.log(input[i]);\n  }\n}\n\nexport function neg(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = -input[i];\n  }\n}\n\nexport function not(input: Tensor.BooleanType, output: Tensor.BooleanType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = input[i] ? 0 : 1;\n  }\n}\n\nexport function reciprocal(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = 1.0 / input[i];\n  }\n}\n\nexport function relu(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.max(0, input[i]);\n  }\n}\n\nexport function sigmoid(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = (1 / (1 + Math.exp(-input[i])));\n  }\n}\n\nexport function sign(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = input[i] > 0 ? 1 : input[i] < 0 ? -1 : 0;\n  }\n}\n\nexport function sin(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.sin(input[i]);\n  }\n}\n\nexport function sinh(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.sinh(input[i]);\n  }\n}\n\nexport function sqrt(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.sqrt(input[i]);\n  }\n}\n\nexport function tan(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.tan(input[i]);\n  }\n}\n\nexport function tanh(input: Tensor.NumberType, output: Tensor.NumberType) {\n  for (let i = 0; i < input.length; i++) {\n    output[i] = Math.tanh(input[i]);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class UnaryOp implements Operator {\n  constructor(protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected resultType?: Tensor.DataType) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Unsqueeze implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axes = attributes.getInts('axes');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    // TODO: Support string type\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axes: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Graph} from '../graph';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport declare namespace Upsample {\n  interface GetNearestPixelFunc {\n    (a: number, b: boolean): number;\n  }\n  interface GetOriginalCoordinateFunc {\n    (xResized: number, xScale: number, lengthResized: number, lengthOriginal: number, roiStart: number,\n     roiEnd: number): number;\n  }\n}\n\nexport abstract class Upsample implements Operator {\n  constructor(protected opset: number) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute, node: Graph.Node, graph: Graph): void {\n    this.isResize = (this.opset >= 10);\n\n    this.mode = attributes.getString('mode', 'nearest');\n    if (this.mode !== 'nearest' && this.mode !== 'linear' && (this.opset < 11 || this.mode !== 'cubic')) {\n      throw new Error(`unrecognized mode: ${this.mode}`);\n    }\n\n    if (this.opset < 9) {\n      this.scales = attributes.getFloats('scales');\n      scalesValidataion(this.scales, this.mode, this.isResize);\n    }\n\n    this.extrapolationValue = attributes.getFloat('extrapolation_value', 0.0);\n\n    this.coordinateTransformMode =\n        this.opset > 10 ? attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n    if ([\n          'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize',\n          'half_pixel'\n        ].indexOf(this.coordinateTransformMode) === -1) {\n      throw new Error(`coordinate_transform_mode '${this.coordinateTransformMode}' is not supported`);\n    }\n    this.useExtrapolation = this.needRoiInput = (this.coordinateTransformMode === 'tf_crop_and_resize');\n\n    this.nearestMode =\n        (this.mode === 'nearest' && this.opset >= 11) ? attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n    if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(this.nearestMode) === -1) {\n      throw new Error(`nearest_mode '${this.nearestMode}' is not supported`);\n    }\n\n    this.cubicCoefficientA = attributes.getFloat('cubic_coeff_a', -0.75);\n    this.excludeOutside = attributes.getInt('exclude_outside', 0) !== 0;\n    if (this.excludeOutside && this.mode !== 'cubic') {\n      throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n    }\n\n    this.useNearest2xOptimization = (this.opset < 11) ?\n        true :\n        (this.mode === 'nearest' && this.coordinateTransformMode === 'asymmetric' && this.nearestMode === 'floor');\n\n    if (this.opset > 10) {\n      this.roiInputIdx = 1;\n      this.scalesInputIdx = 2;\n      this.sizesInputIdx = 3;\n    } else if (this.opset === 9) {\n      this.scalesInputIdx = 1;\n    }\n\n    if (this.scalesInputIdx > 0) {\n      const scale = graph.getValues()[node.inputs[this.scalesInputIdx]].tensor;\n\n      if (scale && scale.dims.length > 0) {\n        this.scales = Array.from(scale.floatData);\n        scalesValidataion(this.scales, this.mode, this.isResize);\n      }\n    }\n\n    // roi is only needed when coordinate transformation mode is tf_crop_and_resize\n    // for all other modes no need to read roi input\n    if (this.roiInputIdx > 0 && this.needRoiInput) {\n      const roi = graph.getValues()[node.inputs[this.roiInputIdx]].tensor;\n      if (roi) {\n        this.roi = Array.from(roi.floatData);\n      }\n    }\n\n    this.getOriginalCoordinate = getOriginalCoordinateFromResizedCoordinate(this.coordinateTransformMode);\n    this.getNearestPixel = getNearestPixelFromOriginal(this.nearestMode);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || (this.opset < 9 && inputs.length !== 1) ||\n        (this.opset >= 9 && this.opset < 11 && inputs.length !== 2) ||\n        (this.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\n      return false;\n    }\n\n    if (this.scales && inputs[0].dims.length !== this.scales.length) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type === 'string') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected prepare(inputs: Tensor[]): [number[], number[], ReadonlyArray<number>] {\n    const x = inputs[0];\n    const xDims = x.dims;\n\n    // get roi data\n    let roi = this.roi;\n    if (!roi) {\n      if (this.needRoiInput) {\n        if (this.roiInputIdx <= 0) {\n          throw new Error('Invalid roi input index.');\n        }\n        roi = parseRoiData(inputs[this.roiInputIdx]);\n      } else {\n        roi = new Array(xDims.length * 2).fill(0);\n      }\n    }\n\n    let scales = this.scales;\n    let outputSizes: number[]|undefined;\n    if (!scales) {\n      const scalesTensor = inputs[this.scalesInputIdx];\n      if (scalesTensor && scalesTensor.size !== 0) {\n        if (inputs[this.sizesInputIdx]) {\n          throw new Error('Only one of scales or sizes must be provided as input.');\n        }\n        scales = parseScalesData(scalesTensor, this.mode, this.isResize);\n      } else {\n        const sizesTensor = inputs[this.sizesInputIdx];\n        if (!sizesTensor || sizesTensor.size === 0) {\n          throw new Error('Either scales or sizes MUST be provided as input.');\n        }\n\n        outputSizes = Array.from(sizesTensor.integerData);\n        scales = parseScalesDataFromOutputSize(outputSizes, xDims, this.mode, this.isResize);\n      }\n    } else {\n      if (inputs[this.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n    }\n\n    const yDims = outputSizes || computeOutputShape(scales, xDims);\n\n    return [roi, scales, yDims];\n  }\n\n  protected isResize: boolean;\n  protected mode: string;\n  protected scales: number[];\n  protected extrapolationValue: number;\n  protected coordinateTransformMode: string;\n  protected useExtrapolation: boolean;\n  protected needRoiInput: boolean;\n  protected nearestMode: string;\n  protected cubicCoefficientA: number;\n  protected excludeOutside: boolean;\n  protected useNearest2xOptimization: boolean;\n  protected roiInputIdx: number;\n  protected scalesInputIdx: number;\n  protected sizesInputIdx: number;\n  protected roi: number[];\n\n  protected getOriginalCoordinate: Upsample.GetOriginalCoordinateFunc;\n  protected getNearestPixel: Upsample.GetNearestPixelFunc;\n}\n\nfunction scalesValidataion(scales: number[], mode: string, isResize: boolean) {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') or 4-D inputs\\\nwith the corresponding outermost 2 scale values being 1 in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n}\n\nexport function parseRoiData(roi: Tensor): number[] {\n  return roi.size > 0 ? Array.from(roi.floatData) : [];\n}\n\nexport function parseScalesData(scale: Tensor, mode: string, isResize: boolean): number[] {\n  const scales = Array.from(scale.floatData);\n  scalesValidataion(scales, mode, isResize);\n  return scales;\n}\n\nexport function parseScalesDataFromOutputSize(\n    yDims: ReadonlyArray<number>, xDims: ReadonlyArray<number>, mode: string, isResize: boolean): number[] {\n  const length = xDims.length;\n  const scales = new Array<number>(length);\n\n  for (let i = 0, end = length; i < end; i++) {\n    if (xDims[i] === 0) {\n      if (yDims[i] !== 0) {\n        throw new Error('Input dim is zero but required output dim is non-zero.');\n      }\n      scales[i] = 1;\n    } else {\n      scales[i] = yDims[i] / xDims[i];\n    }\n  }\n  scalesValidataion(scales, mode, isResize);\n  return scales;\n}\n\nexport function computeOutputShape(scales: ReadonlyArray<number>, inputDims: ReadonlyArray<number>): number[] {\n  return inputDims.map((dim, i) => Math.floor(dim * scales[i]));\n}\n\nfunction getOriginalCoordinateFromResizedCoordinate(mode: string): Upsample.GetOriginalCoordinateFunc {\n  switch (mode) {\n    case 'asymmetric':\n      return (xResized: number, xScale: number) => xResized / xScale;\n    case 'pytorch_half_pixel':\n      return (xResized: number, xScale: number, lengthResized: number) =>\n                 lengthResized > 1 ? (xResized + 0.5) / xScale - 0.5 : 0.0;\n    case 'tf_half_pixel_for_nn':\n      return (xResized: number, xScale: number) => (xResized + 0.5) / xScale;\n    case 'align_corners':\n      return (xResized: number, xScale: number, lengthResized: number, lengthOriginal: number) =>\n                 lengthResized === 1 ? 0 : xResized * (lengthOriginal - 1) / (lengthResized - 1);\n    case 'tf_crop_and_resize':\n      return (xResized: number, xScale: number, lengthResized: number, lengthOriginal: number, roiStart: number,\n              roiEnd: number) =>\n                 (lengthResized > 1 ? roiStart * (lengthOriginal - 1) +\n                          (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1) :\n                                      0.5 * (roiStart + roiEnd) * (lengthOriginal - 1));\n    default:  //'half_pixel'\n      return (xResized: number, xScale: number) => (xResized + 0.5) / xScale - 0.5;\n  }\n}\n\nfunction getNearestPixelFromOriginal(mode: string): Upsample.GetNearestPixelFunc {\n  switch (mode) {\n    case '':\n      return (xOriginal: number, isDownSample: boolean) => isDownSample ? Math.ceil(xOriginal) : Math.floor(xOriginal);\n    case 'round_prefer_ceil':\n      return (xOriginal: number) => Math.round(xOriginal);\n    case 'floor':\n      return (xOriginal: number) => Math.floor(xOriginal);\n    case 'ceil':\n      return (xOriginal: number) => Math.ceil(xOriginal);\n    default:  // round_prefer_floor\n      return (xOriginal: number) =>\n                 xOriginal === Math.floor(xOriginal) + 0.5 ? Math.floor(xOriginal) : Math.round(xOriginal);\n  }\n}\n","/*!\n * Platform.js v1.3.6\n * Copyright 2014-2020 Benjamin Tan\n * Copyright 2011-2013 John-David Dalton\n * Available under MIT license\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object. */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object. */\n  var oldRoot = root;\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /**\n   * Used as the maximum length of an array-like object.\n   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\n   * for more details.\n   */\n  var maxSafeInteger = Math.pow(2, 53) - 1;\n\n  /** Regular expression to detect Opera. */\n  var reOpera = /\\bOpera/;\n\n  /** Possible global object. */\n  var thisBinding = this;\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check for own properties of an object. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /** Used to resolve the internal `[[Class]]` of values. */\n  var toString = objectProto.toString;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Capitalizes a string value.\n   *\n   * @private\n   * @param {string} string The string to capitalize.\n   * @returns {string} The capitalized string.\n   */\n  function capitalize(string) {\n    string = String(string);\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  /**\n   * A utility function to clean up the OS name.\n   *\n   * @private\n   * @param {string} os The OS name to clean up.\n   * @param {string} [pattern] A `RegExp` pattern matching the OS name.\n   * @param {string} [label] A label for the OS.\n   */\n  function cleanupOS(os, pattern, label) {\n    // Platform tokens are defined at:\n    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    var data = {\n      '10.0': '10',\n      '6.4':  '10 Technical Preview',\n      '6.3':  '8.1',\n      '6.2':  '8',\n      '6.1':  'Server 2008 R2 / 7',\n      '6.0':  'Server 2008 / Vista',\n      '5.2':  'Server 2003 / XP 64-bit',\n      '5.1':  'XP',\n      '5.01': '2000 SP1',\n      '5.0':  '2000',\n      '4.0':  'NT',\n      '4.90': 'ME'\n    };\n    // Detect Windows version from platform tokens.\n    if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) &&\n        (data = data[/[\\d.]+$/.exec(os)])) {\n      os = 'Windows ' + data;\n    }\n    // Correct character case and cleanup string.\n    os = String(os);\n\n    if (pattern && label) {\n      os = os.replace(RegExp(pattern, 'i'), label);\n    }\n\n    os = format(\n      os.replace(/ ce$/i, ' CE')\n        .replace(/\\bhpw/i, 'web')\n        .replace(/\\bMacintosh\\b/, 'Mac OS')\n        .replace(/_PowerPC\\b/i, ' OS')\n        .replace(/\\b(OS X) [^ \\d]+/i, '$1')\n        .replace(/\\bMac (OS X)\\b/, '$1')\n        .replace(/\\/(\\d)/, ' $1')\n        .replace(/_/g, '.')\n        .replace(/(?: BePC|[ .]*fc[ \\d.]+)$/i, '')\n        .replace(/\\bx86\\.64\\b/gi, 'x86_64')\n        .replace(/\\b(Windows Phone) OS\\b/, '$1')\n        .replace(/\\b(Chrome OS \\w+) [\\d.]+\\b/, '$1')\n        .split(' on ')[0]\n    );\n\n    return os;\n  }\n\n  /**\n   * An iteration utility for arrays and objects.\n   *\n   * @private\n   * @param {Array|Object} object The object to iterate over.\n   * @param {Function} callback The function called per iteration.\n   */\n  function each(object, callback) {\n    var index = -1,\n        length = object ? object.length : 0;\n\n    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {\n      while (++index < length) {\n        callback(object[index], index, object);\n      }\n    } else {\n      forOwn(object, callback);\n    }\n  }\n\n  /**\n   * Trim and conditionally capitalize string values.\n   *\n   * @private\n   * @param {string} string The string to format.\n   * @returns {string} The formatted string.\n   */\n  function format(string) {\n    string = trim(string);\n    return /^(?:webOS|i(?:OS|P))/.test(string)\n      ? string\n      : capitalize(string);\n  }\n\n  /**\n   * Iterates over an object's own properties, executing the `callback` for each.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} callback The function executed per own property.\n   */\n  function forOwn(object, callback) {\n    for (var key in object) {\n      if (hasOwnProperty.call(object, key)) {\n        callback(object[key], key, object);\n      }\n    }\n  }\n\n  /**\n   * Gets the internal `[[Class]]` of a value.\n   *\n   * @private\n   * @param {*} value The value.\n   * @returns {string} The `[[Class]]`.\n   */\n  function getClassOf(value) {\n    return value == null\n      ? capitalize(value)\n      : toString.call(value).slice(8, -1);\n  }\n\n  /**\n   * Host objects can return type values that are different from their actual\n   * data type. The objects we are concerned with usually return non-primitive\n   * types of \"object\", \"function\", or \"unknown\".\n   *\n   * @private\n   * @param {*} object The owner of the property.\n   * @param {string} property The property to check.\n   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n   */\n  function isHostType(object, property) {\n    var type = object != null ? typeof object[property] : 'number';\n    return !/^(?:boolean|number|string|undefined)$/.test(type) &&\n      (type == 'object' ? !!object[property] : true);\n  }\n\n  /**\n   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.\n   *\n   * @private\n   * @param {string} string The string to qualify.\n   * @returns {string} The qualified string.\n   */\n  function qualify(string) {\n    return String(string).replace(/([ -])(?!$)/g, '$1?');\n  }\n\n  /**\n   * A bare-bones `Array#reduce` like utility function.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @returns {*} The accumulated result.\n   */\n  function reduce(array, callback) {\n    var accumulator = null;\n    each(array, function(value, index) {\n      accumulator = callback(accumulator, value, index, array);\n    });\n    return accumulator;\n  }\n\n  /**\n   * Removes leading and trailing whitespace from a string.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} The trimmed string.\n   */\n  function trim(string) {\n    return String(string).replace(/^ +| +$/g, '');\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a new platform object.\n   *\n   * @memberOf platform\n   * @param {Object|string} [ua=navigator.userAgent] The user agent string or\n   *  context object.\n   * @returns {Object} A platform object.\n   */\n  function parse(ua) {\n\n    /** The environment context object. */\n    var context = root;\n\n    /** Used to flag when a custom context is provided. */\n    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';\n\n    // Juggle arguments.\n    if (isCustomContext) {\n      context = ua;\n      ua = null;\n    }\n\n    /** Browser navigator object. */\n    var nav = context.navigator || {};\n\n    /** Browser user agent string. */\n    var userAgent = nav.userAgent || '';\n\n    ua || (ua = userAgent);\n\n    /** Used to flag when `thisBinding` is the [ModuleScope]. */\n    var isModuleScope = isCustomContext || thisBinding == oldRoot;\n\n    /** Used to detect if browser is like Chrome. */\n    var likeChrome = isCustomContext\n      ? !!nav.likeChrome\n      : /\\bChrome\\b/.test(ua) && !/internal|\\n/i.test(toString.toString());\n\n    /** Internal `[[Class]]` value shortcuts. */\n    var objectClass = 'Object',\n        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',\n        enviroClass = isCustomContext ? objectClass : 'Environment',\n        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),\n        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';\n\n    /** Detect Java environments. */\n    var java = /\\bJava/.test(javaClass) && context.java;\n\n    /** Detect Rhino. */\n    var rhino = java && getClassOf(context.environment) == enviroClass;\n\n    /** A character to represent alpha. */\n    var alpha = java ? 'a' : '\\u03b1';\n\n    /** A character to represent beta. */\n    var beta = java ? 'b' : '\\u03b2';\n\n    /** Browser document object. */\n    var doc = context.document || {};\n\n    /**\n     * Detect Opera browser (Presto-based).\n     * http://www.howtocreate.co.uk/operaStuff/operaObject.html\n     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini\n     */\n    var opera = context.operamini || context.opera;\n\n    /** Opera `[[Class]]`. */\n    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))\n      ? operaClass\n      : (opera = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /** Temporary variable used over the script's lifetime. */\n    var data;\n\n    /** The CPU architecture. */\n    var arch = ua;\n\n    /** Platform description array. */\n    var description = [];\n\n    /** Platform alpha/beta indicator. */\n    var prerelease = null;\n\n    /** A flag to indicate that environment features should be used to resolve the platform. */\n    var useFeatures = ua == userAgent;\n\n    /** The browser/environment version. */\n    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();\n\n    /** A flag to indicate if the OS ends with \"/ Version\" */\n    var isSpecialCasedOS;\n\n    /* Detectable layout engines (order is important). */\n    var layout = getLayout([\n      { 'label': 'EdgeHTML', 'pattern': 'Edge' },\n      'Trident',\n      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },\n      'iCab',\n      'Presto',\n      'NetFront',\n      'Tasman',\n      'KHTML',\n      'Gecko'\n    ]);\n\n    /* Detectable browser names (order is important). */\n    var name = getName([\n      'Adobe AIR',\n      'Arora',\n      'Avant Browser',\n      'Breach',\n      'Camino',\n      'Electron',\n      'Epiphany',\n      'Fennec',\n      'Flock',\n      'Galeon',\n      'GreenBrowser',\n      'iCab',\n      'Iceweasel',\n      'K-Meleon',\n      'Konqueror',\n      'Lunascape',\n      'Maxthon',\n      { 'label': 'Microsoft Edge', 'pattern': '(?:Edge|Edg|EdgA|EdgiOS)' },\n      'Midori',\n      'Nook Browser',\n      'PaleMoon',\n      'PhantomJS',\n      'Raven',\n      'Rekonq',\n      'RockMelt',\n      { 'label': 'Samsung Internet', 'pattern': 'SamsungBrowser' },\n      'SeaMonkey',\n      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Sleipnir',\n      'SlimBrowser',\n      { 'label': 'SRWare Iron', 'pattern': 'Iron' },\n      'Sunrise',\n      'Swiftfox',\n      'Vivaldi',\n      'Waterfox',\n      'WebPositive',\n      { 'label': 'Yandex Browser', 'pattern': 'YaBrowser' },\n      { 'label': 'UC Browser', 'pattern': 'UCBrowser' },\n      'Opera Mini',\n      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },\n      'Opera',\n      { 'label': 'Opera', 'pattern': 'OPR' },\n      'Chromium',\n      'Chrome',\n      { 'label': 'Chrome', 'pattern': '(?:HeadlessChrome)' },\n      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },\n      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },\n      { 'label': 'Firefox for iOS', 'pattern': 'FxiOS' },\n      { 'label': 'IE', 'pattern': 'IEMobile' },\n      { 'label': 'IE', 'pattern': 'MSIE' },\n      'Safari'\n    ]);\n\n    /* Detectable products (order is important). */\n    var product = getProduct([\n      { 'label': 'BlackBerry', 'pattern': 'BB10' },\n      'BlackBerry',\n      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },\n      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },\n      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },\n      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },\n      { 'label': 'Galaxy S5', 'pattern': 'SM-G900' },\n      { 'label': 'Galaxy S6', 'pattern': 'SM-G920' },\n      { 'label': 'Galaxy S6 Edge', 'pattern': 'SM-G925' },\n      { 'label': 'Galaxy S7', 'pattern': 'SM-G930' },\n      { 'label': 'Galaxy S7 Edge', 'pattern': 'SM-G935' },\n      'Google TV',\n      'Lumia',\n      'iPad',\n      'iPod',\n      'iPhone',\n      'Kindle',\n      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Nexus',\n      'Nook',\n      'PlayBook',\n      'PlayStation Vita',\n      'PlayStation',\n      'TouchPad',\n      'Transformer',\n      { 'label': 'Wii U', 'pattern': 'WiiU' },\n      'Wii',\n      'Xbox One',\n      { 'label': 'Xbox 360', 'pattern': 'Xbox' },\n      'Xoom'\n    ]);\n\n    /* Detectable manufacturers. */\n    var manufacturer = getManufacturer({\n      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },\n      'Alcatel': {},\n      'Archos': {},\n      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },\n      'Asus': { 'Transformer': 1 },\n      'Barnes & Noble': { 'Nook': 1 },\n      'BlackBerry': { 'PlayBook': 1 },\n      'Google': { 'Google TV': 1, 'Nexus': 1 },\n      'HP': { 'TouchPad': 1 },\n      'HTC': {},\n      'Huawei': {},\n      'Lenovo': {},\n      'LG': {},\n      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },\n      'Motorola': { 'Xoom': 1 },\n      'Nintendo': { 'Wii U': 1,  'Wii': 1 },\n      'Nokia': { 'Lumia': 1 },\n      'Oppo': {},\n      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },\n      'Sony': { 'PlayStation': 1, 'PlayStation Vita': 1 },\n      'Xiaomi': { 'Mi': 1, 'Redmi': 1 }\n    });\n\n    /* Detectable operating systems (order is important). */\n    var os = getOS([\n      'Windows Phone',\n      'KaiOS',\n      'Android',\n      'CentOS',\n      { 'label': 'Chrome OS', 'pattern': 'CrOS' },\n      'Debian',\n      { 'label': 'DragonFly BSD', 'pattern': 'DragonFly' },\n      'Fedora',\n      'FreeBSD',\n      'Gentoo',\n      'Haiku',\n      'Kubuntu',\n      'Linux Mint',\n      'OpenBSD',\n      'Red Hat',\n      'SuSE',\n      'Ubuntu',\n      'Xubuntu',\n      'Cygwin',\n      'Symbian OS',\n      'hpwOS',\n      'webOS ',\n      'webOS',\n      'Tablet OS',\n      'Tizen',\n      'Linux',\n      'Mac OS X',\n      'Macintosh',\n      'Mac',\n      'Windows 98;',\n      'Windows '\n    ]);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Picks the layout engine from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected layout engine.\n     */\n    function getLayout(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the manufacturer from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An object of guesses.\n     * @returns {null|string} The detected manufacturer.\n     */\n    function getManufacturer(guesses) {\n      return reduce(guesses, function(result, value, key) {\n        // Lookup the manufacturer by product or scan the UA for the manufacturer.\n        return result || (\n          value[product] ||\n          value[/^[a-z]+(?: +[a-z]+\\b)*/i.exec(product)] ||\n          RegExp('\\\\b' + qualify(key) + '(?:\\\\b|\\\\w*\\\\d)', 'i').exec(ua)\n        ) && key;\n      });\n    }\n\n    /**\n     * Picks the browser name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected browser name.\n     */\n    function getName(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the OS name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected OS name.\n     */\n    function getOS(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + '(?:/[\\\\d.]+|[ \\\\w.]*)', 'i').exec(ua)\n            )) {\n          result = cleanupOS(result, pattern, guess.label || guess);\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Picks the product name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected product name.\n     */\n    function getProduct(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + ' *\\\\d+[.\\\\w_]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + ' *\\\\w+-[\\\\w]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\\\d+|[^ ();-]*)', 'i').exec(ua)\n            )) {\n          // Split by forward slash and append product version if needed.\n          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\\d.]+/.test(result[0])) {\n            result[0] += ' ' + result[1];\n          }\n          // Correct character case and cleanup string.\n          guess = guess.label || guess;\n          result = format(result[0]\n            .replace(RegExp(pattern, 'i'), guess)\n            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')\n            .replace(RegExp('(' + guess + ')[-_.]?(\\\\w)', 'i'), '$1 $2'));\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Resolves the version using an array of UA patterns.\n     *\n     * @private\n     * @param {Array} patterns An array of UA patterns.\n     * @returns {null|string} The detected version.\n     */\n    function getVersion(patterns) {\n      return reduce(patterns, function(result, pattern) {\n        return result || (RegExp(pattern +\n          '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\n      });\n    }\n\n    /**\n     * Returns `platform.description` when the platform object is coerced to a string.\n     *\n     * @name toString\n     * @memberOf platform\n     * @returns {string} Returns `platform.description` if available, else an empty string.\n     */\n    function toStringPlatform() {\n      return this.description || '';\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Convert layout to an array so we can add extra details.\n    layout && (layout = [layout]);\n\n    // Detect Android products.\n    // Browsers on Android devices typically provide their product IDS after \"Android;\"\n    // up to \"Build\" or \") AppleWebKit\".\n    // Example:\n    // \"Mozilla/5.0 (Linux; Android 8.1.0; Moto G (5) Plus) AppleWebKit/537.36\n    // (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36\"\n    if (/\\bAndroid\\b/.test(os) && !product &&\n        (data = /\\bAndroid[^;]*;(.*?)(?:Build|\\) AppleWebKit)\\b/i.exec(ua))) {\n      product = trim(data[1])\n        // Replace any language codes (eg. \"en-US\").\n        .replace(/^[a-z]{2}-[a-z]{2};\\s*/i, '')\n        || null;\n    }\n    // Detect product names that contain their manufacturer's name.\n    if (manufacturer && !product) {\n      product = getProduct([manufacturer]);\n    } else if (manufacturer && product) {\n      product = product\n        .replace(RegExp('^(' + qualify(manufacturer) + ')[-_.\\\\s]', 'i'), manufacturer + ' ')\n        .replace(RegExp('^(' + qualify(manufacturer) + ')[-_.]?(\\\\w)', 'i'), manufacturer + ' $2');\n    }\n    // Clean up Google TV.\n    if ((data = /\\bGoogle TV\\b/.exec(product))) {\n      product = data[0];\n    }\n    // Detect simulators.\n    if (/\\bSimulator\\b/i.test(ua)) {\n      product = (product ? product + ' ' : '') + 'Simulator';\n    }\n    // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.\n    if (name == 'Opera Mini' && /\\bOPiOS\\b/.test(ua)) {\n      description.push('running in Turbo/Uncompressed mode');\n    }\n    // Detect IE Mobile 11.\n    if (name == 'IE' && /\\blike iPhone OS\\b/.test(ua)) {\n      data = parse(ua.replace(/like iPhone OS/, ''));\n      manufacturer = data.manufacturer;\n      product = data.product;\n    }\n    // Detect iOS.\n    else if (/^iP/.test(product)) {\n      name || (name = 'Safari');\n      os = 'iOS' + ((data = / OS ([\\d_]+)/i.exec(ua))\n        ? ' ' + data[1].replace(/_/g, '.')\n        : '');\n    }\n    // Detect Kubuntu.\n    else if (name == 'Konqueror' && /^Linux\\b/i.test(os)) {\n      os = 'Kubuntu';\n    }\n    // Detect Android browsers.\n    else if ((manufacturer && manufacturer != 'Google' &&\n        ((/Chrome/.test(name) && !/\\bMobile Safari\\b/i.test(ua)) || /\\bVita\\b/.test(product))) ||\n        (/\\bAndroid\\b/.test(os) && /^Chrome/.test(name) && /\\bVersion\\//i.test(ua))) {\n      name = 'Android Browser';\n      os = /\\bAndroid\\b/.test(os) ? os : 'Android';\n    }\n    // Detect Silk desktop/accelerated modes.\n    else if (name == 'Silk') {\n      if (!/\\bMobi/i.test(ua)) {\n        os = 'Android';\n        description.unshift('desktop mode');\n      }\n      if (/Accelerated *= *true/i.test(ua)) {\n        description.unshift('accelerated');\n      }\n    }\n    // Detect UC Browser speed mode.\n    else if (name == 'UC Browser' && /\\bUCWEB\\b/.test(ua)) {\n      description.push('speed mode');\n    }\n    // Detect PaleMoon identifying as Firefox.\n    else if (name == 'PaleMoon' && (data = /\\bFirefox\\/([\\d.]+)\\b/.exec(ua))) {\n      description.push('identifying as Firefox ' + data[1]);\n    }\n    // Detect Firefox OS and products running Firefox.\n    else if (name == 'Firefox' && (data = /\\b(Mobile|Tablet|TV)\\b/i.exec(ua))) {\n      os || (os = 'Firefox OS');\n      product || (product = data[1]);\n    }\n    // Detect false positives for Firefox/Safari.\n    else if (!name || (data = !/\\bMinefield\\b/i.test(ua) && /\\b(?:Firefox|Safari)\\b/.exec(name))) {\n      // Escape the `/` for Firefox 1.\n      if (name && !product && /[\\/,]|^[^(]+?\\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {\n        // Clear name of false positives.\n        name = null;\n      }\n      // Reassign a generic name.\n      if ((data = product || manufacturer || os) &&\n          (product || manufacturer || /\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b/.test(os))) {\n        name = /[a-z]+(?: Hat)?/i.exec(/\\bAndroid\\b/.test(os) ? os : data) + ' Browser';\n      }\n    }\n    // Add Chrome version to description for Electron.\n    else if (name == 'Electron' && (data = (/\\bChrome\\/([\\d.]+)\\b/.exec(ua) || 0)[1])) {\n      description.push('Chromium ' + data);\n    }\n    // Detect non-Opera (Presto-based) versions (order is important).\n    if (!version) {\n      version = getVersion([\n        '(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\\\d.]+$)|UCBrowser|YaBrowser)',\n        'Version',\n        qualify(name),\n        '(?:Firefox|Minefield|NetFront)'\n      ]);\n    }\n    // Detect stubborn layout engines.\n    if ((data =\n          layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' ||\n          /\\bOpera\\b/.test(name) && (/\\bOPR\\b/.test(ua) ? 'Blink' : 'Presto') ||\n          /\\b(?:Midori|Nook|Safari)\\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' ||\n          !layout && /\\bMSIE\\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') ||\n          layout == 'WebKit' && /\\bPlayStation\\b(?! Vita\\b)/i.test(name) && 'NetFront'\n        )) {\n      layout = [data];\n    }\n    // Detect Windows Phone 7 desktop mode.\n    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\\d+)/i.exec(ua) || 0)[1])) {\n      name += ' Mobile';\n      os = 'Windows Phone ' + (/\\+$/.test(data) ? data : data + '.x');\n      description.unshift('desktop mode');\n    }\n    // Detect Windows Phone 8.x desktop mode.\n    else if (/\\bWPDesktop\\b/i.test(ua)) {\n      name = 'IE Mobile';\n      os = 'Windows Phone 8.x';\n      description.unshift('desktop mode');\n      version || (version = (/\\brv:([\\d.]+)/.exec(ua) || 0)[1]);\n    }\n    // Detect IE 11 identifying as other browsers.\n    else if (name != 'IE' && layout == 'Trident' && (data = /\\brv:([\\d.]+)/.exec(ua))) {\n      if (name) {\n        description.push('identifying as ' + name + (version ? ' ' + version : ''));\n      }\n      name = 'IE';\n      version = data[1];\n    }\n    // Leverage environment features.\n    if (useFeatures) {\n      // Detect server-side environments.\n      // Rhino has a global function while others have a global object.\n      if (isHostType(context, 'global')) {\n        if (java) {\n          data = java.lang.System;\n          arch = data.getProperty('os.arch');\n          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');\n        }\n        if (rhino) {\n          try {\n            version = context.require('ringo/engine').version.join('.');\n            name = 'RingoJS';\n          } catch(e) {\n            if ((data = context.system) && data.global.system == context.system) {\n              name = 'Narwhal';\n              os || (os = data[0].os || null);\n            }\n          }\n          if (!name) {\n            name = 'Rhino';\n          }\n        }\n        else if (\n          typeof context.process == 'object' && !context.process.browser &&\n          (data = context.process)\n        ) {\n          if (typeof data.versions == 'object') {\n            if (typeof data.versions.electron == 'string') {\n              description.push('Node ' + data.versions.node);\n              name = 'Electron';\n              version = data.versions.electron;\n            } else if (typeof data.versions.nw == 'string') {\n              description.push('Chromium ' + version, 'Node ' + data.versions.node);\n              name = 'NW.js';\n              version = data.versions.nw;\n            }\n          }\n          if (!name) {\n            name = 'Node.js';\n            arch = data.arch;\n            os = data.platform;\n            version = /[\\d.]+/.exec(data.version);\n            version = version ? version[0] : null;\n          }\n        }\n      }\n      // Detect Adobe AIR.\n      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {\n        name = 'Adobe AIR';\n        os = data.flash.system.Capabilities.os;\n      }\n      // Detect PhantomJS.\n      else if (getClassOf((data = context.phantom)) == phantomClass) {\n        name = 'PhantomJS';\n        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);\n      }\n      // Detect IE compatibility modes.\n      else if (typeof doc.documentMode == 'number' && (data = /\\bTrident\\/(\\d+)/i.exec(ua))) {\n        // We're in compatibility mode when the Trident version + 4 doesn't\n        // equal the document mode.\n        version = [version, doc.documentMode];\n        if ((data = +data[1] + 4) != version[1]) {\n          description.push('IE ' + version[1] + ' mode');\n          layout && (layout[1] = '');\n          version[1] = data;\n        }\n        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];\n      }\n      // Detect IE 11 masking as other browsers.\n      else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\\b/.test(name)) {\n        description.push('masking as ' + name + ' ' + version);\n        name = 'IE';\n        version = '11.0';\n        layout = ['Trident'];\n        os = 'Windows';\n      }\n      os = os && format(os);\n    }\n    // Detect prerelease phases.\n    if (version && (data =\n          /(?:[ab]|dp|pre|[ab]\\d+pre)(?:\\d+\\+?)?$/i.exec(version) ||\n          /(?:alpha|beta)(?: ?\\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||\n          /\\bMinefield\\b/i.test(ua) && 'a'\n        )) {\n      prerelease = /b/i.test(data) ? 'beta' : 'alpha';\n      version = version.replace(RegExp(data + '\\\\+?$'), '') +\n        (prerelease == 'beta' ? beta : alpha) + (/\\d+\\+?/.exec(data) || '');\n    }\n    // Detect Firefox Mobile.\n    if (name == 'Fennec' || name == 'Firefox' && /\\b(?:Android|Firefox OS|KaiOS)\\b/.test(os)) {\n      name = 'Firefox Mobile';\n    }\n    // Obscure Maxthon's unreliable version.\n    else if (name == 'Maxthon' && version) {\n      version = version.replace(/\\.[\\d.]+/, '.x');\n    }\n    // Detect Xbox 360 and Xbox One.\n    else if (/\\bXbox\\b/i.test(product)) {\n      if (product == 'Xbox 360') {\n        os = null;\n      }\n      if (product == 'Xbox 360' && /\\bIEMobile\\b/.test(ua)) {\n        description.unshift('mobile mode');\n      }\n    }\n    // Add mobile postfix.\n    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&\n        (os == 'Windows CE' || /Mobi/i.test(ua))) {\n      name += ' Mobile';\n    }\n    // Detect IE platform preview.\n    else if (name == 'IE' && useFeatures) {\n      try {\n        if (context.external === null) {\n          description.unshift('platform preview');\n        }\n      } catch(e) {\n        description.unshift('embedded');\n      }\n    }\n    // Detect BlackBerry OS version.\n    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp\n    else if ((/\\bBlackBerry\\b/.test(product) || /\\bBB10\\b/.test(ua)) && (data =\n          (RegExp(product.replace(/ +/g, ' *') + '/([.\\\\d]+)', 'i').exec(ua) || 0)[1] ||\n          version\n        )) {\n      data = [data, /BB10/.test(ua)];\n      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];\n      version = null;\n    }\n    // Detect Opera identifying/masking itself as another browser.\n    // http://www.opera.com/support/kb/view/843/\n    else if (this != forOwn && product != 'Wii' && (\n          (useFeatures && opera) ||\n          (/Opera/.test(name) && /\\b(?:MSIE|Firefox)\\b/i.test(ua)) ||\n          (name == 'Firefox' && /\\bOS X (?:\\d+\\.){2,}/.test(os)) ||\n          (name == 'IE' && (\n            (os && !/^Win/.test(os) && version > 5.5) ||\n            /\\bWindows XP\\b/.test(os) && version > 8 ||\n            version == 8 && !/\\bTrident\\b/.test(ua)\n          ))\n        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {\n      // When \"identifying\", the UA contains both Opera and the other browser's name.\n      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');\n      if (reOpera.test(name)) {\n        if (/\\bIE\\b/.test(data) && os == 'Mac OS') {\n          os = null;\n        }\n        data = 'identify' + data;\n      }\n      // When \"masking\", the UA contains only the other browser's name.\n      else {\n        data = 'mask' + data;\n        if (operaClass) {\n          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));\n        } else {\n          name = 'Opera';\n        }\n        if (/\\bIE\\b/.test(data)) {\n          os = null;\n        }\n        if (!useFeatures) {\n          version = null;\n        }\n      }\n      layout = ['Presto'];\n      description.push(data);\n    }\n    // Detect WebKit Nightly and approximate Chrome/Safari versions.\n    if ((data = (/\\bAppleWebKit\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n      // Correct build number for numeric comparison.\n      // (e.g. \"532.5\" becomes \"532.05\")\n      data = [parseFloat(data.replace(/\\.(\\d)$/, '.0$1')), data];\n      // Nightly builds are postfixed with a \"+\".\n      if (name == 'Safari' && data[1].slice(-1) == '+') {\n        name = 'WebKit Nightly';\n        prerelease = 'alpha';\n        version = data[1].slice(0, -1);\n      }\n      // Clear incorrect browser versions.\n      else if (version == data[1] ||\n          version == (data[2] = (/\\bSafari\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n        version = null;\n      }\n      // Use the full Chrome version when available.\n      data[1] = (/\\b(?:Headless)?Chrome\\/([\\d.]+)/i.exec(ua) || 0)[1];\n      // Detect Blink layout engine.\n      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {\n        layout = ['Blink'];\n      }\n      // Detect JavaScriptCore.\n      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi\n      if (!useFeatures || (!likeChrome && !data[1])) {\n        layout && (layout[1] = 'like Safari');\n        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : data < 602 ? 9 : data < 604 ? 10 : data < 606 ? 11 : data < 608 ? 12 : '12');\n      } else {\n        layout && (layout[1] = 'like Chrome');\n        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');\n      }\n      // Add the postfix of \".x\" or \"+\" for approximate versions.\n      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));\n      // Obscure version for some Safari 1-2 releases.\n      if (name == 'Safari' && (!version || parseInt(version) > 45)) {\n        version = data;\n      } else if (name == 'Chrome' && /\\bHeadlessChrome/i.test(ua)) {\n        description.unshift('headless');\n      }\n    }\n    // Detect Opera desktop modes.\n    if (name == 'Opera' &&  (data = /\\bzbov|zvav$/.exec(os))) {\n      name += ' ';\n      description.unshift('desktop mode');\n      if (data == 'zvav') {\n        name += 'Mini';\n        version = null;\n      } else {\n        name += 'Mobile';\n      }\n      os = os.replace(RegExp(' *' + data + '$'), '');\n    }\n    // Detect Chrome desktop mode.\n    else if (name == 'Safari' && /\\bChrome\\b/.exec(layout && layout[1])) {\n      description.unshift('desktop mode');\n      name = 'Chrome Mobile';\n      version = null;\n\n      if (/\\bOS X\\b/.test(os)) {\n        manufacturer = 'Apple';\n        os = 'iOS 4.3+';\n      } else {\n        os = null;\n      }\n    }\n    // Newer versions of SRWare Iron uses the Chrome tag to indicate its version number.\n    else if (/\\bSRWare Iron\\b/.test(name) && !version) {\n      version = getVersion('Chrome');\n    }\n    // Strip incorrect OS versions.\n    if (version && version.indexOf((data = /[\\d.]+$/.exec(os))) == 0 &&\n        ua.indexOf('/' + data + '-') > -1) {\n      os = trim(os.replace(data, ''));\n    }\n    // Ensure OS does not include the browser name.\n    if (os && os.indexOf(name) != -1 && !RegExp(name + ' OS').test(os)) {\n      os = os.replace(RegExp(' *' + qualify(name) + ' *'), '');\n    }\n    // Add layout engine.\n    if (layout && !/\\b(?:Avant|Nook)\\b/.test(name) && (\n        /Browser|Lunascape|Maxthon/.test(name) ||\n        name != 'Safari' && /^iOS/.test(os) && /\\bSafari\\b/.test(layout[1]) ||\n        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(name) && layout[1])) {\n      // Don't add layout details to description if they are falsey.\n      (data = layout[layout.length - 1]) && description.push(data);\n    }\n    // Combine contextual information.\n    if (description.length) {\n      description = ['(' + description.join('; ') + ')'];\n    }\n    // Append manufacturer to description.\n    if (manufacturer && product && product.indexOf(manufacturer) < 0) {\n      description.push('on ' + manufacturer);\n    }\n    // Append product to description.\n    if (product) {\n      description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);\n    }\n    // Parse the OS into an object.\n    if (os) {\n      data = / ([\\d.+]+)$/.exec(os);\n      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';\n      os = {\n        'architecture': 32,\n        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,\n        'version': data ? data[1] : null,\n        'toString': function() {\n          var version = this.version;\n          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');\n        }\n      };\n    }\n    // Add browser/OS architecture.\n    if ((data = /\\b(?:AMD|IA|Win|WOW|x86_|x)64\\b/i.exec(arch)) && !/\\bi686\\b/i.test(arch)) {\n      if (os) {\n        os.architecture = 64;\n        os.family = os.family.replace(RegExp(' *' + data), '');\n      }\n      if (\n          name && (/\\bWOW64\\b/i.test(ua) ||\n          (useFeatures && /\\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\\bWin64; x64\\b/i.test(ua)))\n      ) {\n        description.unshift('32-bit');\n      }\n    }\n    // Chrome 39 and above on OS X is always 64-bit.\n    else if (\n        os && /^OS X/.test(os.family) &&\n        name == 'Chrome' && parseFloat(version) >= 39\n    ) {\n      os.architecture = 64;\n    }\n\n    ua || (ua = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The platform object.\n     *\n     * @name platform\n     * @type Object\n     */\n    var platform = {};\n\n    /**\n     * The platform description.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.description = ua;\n\n    /**\n     * The name of the browser's layout engine.\n     *\n     * The list of common layout engines include:\n     * \"Blink\", \"EdgeHTML\", \"Gecko\", \"Trident\" and \"WebKit\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.layout = layout && layout[0];\n\n    /**\n     * The name of the product's manufacturer.\n     *\n     * The list of manufacturers include:\n     * \"Apple\", \"Archos\", \"Amazon\", \"Asus\", \"Barnes & Noble\", \"BlackBerry\",\n     * \"Google\", \"HP\", \"HTC\", \"LG\", \"Microsoft\", \"Motorola\", \"Nintendo\",\n     * \"Nokia\", \"Samsung\" and \"Sony\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.manufacturer = manufacturer;\n\n    /**\n     * The name of the browser/environment.\n     *\n     * The list of common browser names include:\n     * \"Chrome\", \"Electron\", \"Firefox\", \"Firefox for iOS\", \"IE\",\n     * \"Microsoft Edge\", \"PhantomJS\", \"Safari\", \"SeaMonkey\", \"Silk\",\n     * \"Opera Mini\" and \"Opera\"\n     *\n     * Mobile versions of some browsers have \"Mobile\" appended to their name:\n     * eg. \"Chrome Mobile\", \"Firefox Mobile\", \"IE Mobile\" and \"Opera Mobile\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.name = name;\n\n    /**\n     * The alpha/beta release indicator.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.prerelease = prerelease;\n\n    /**\n     * The name of the product hosting the browser.\n     *\n     * The list of common products include:\n     *\n     * \"BlackBerry\", \"Galaxy S4\", \"Lumia\", \"iPad\", \"iPod\", \"iPhone\", \"Kindle\",\n     * \"Kindle Fire\", \"Nexus\", \"Nook\", \"PlayBook\", \"TouchPad\" and \"Transformer\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.product = product;\n\n    /**\n     * The browser's user agent string.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.ua = ua;\n\n    /**\n     * The browser/environment version.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.version = name && version;\n\n    /**\n     * The name of the operating system.\n     *\n     * @memberOf platform\n     * @type Object\n     */\n    platform.os = os || {\n\n      /**\n       * The CPU architecture the OS is built for.\n       *\n       * @memberOf platform.os\n       * @type number|null\n       */\n      'architecture': null,\n\n      /**\n       * The family of the OS.\n       *\n       * Common values include:\n       * \"Windows\", \"Windows Server 2008 R2 / 7\", \"Windows Server 2008 / Vista\",\n       * \"Windows XP\", \"OS X\", \"Linux\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Red Hat\",\n       * \"SuSE\", \"Android\", \"iOS\" and \"Windows Phone\"\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'family': null,\n\n      /**\n       * The version of the OS.\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'version': null,\n\n      /**\n       * Returns the OS string.\n       *\n       * @memberOf platform.os\n       * @returns {string} The OS string.\n       */\n      'toString': function() { return 'null'; }\n    };\n\n    platform.parse = parse;\n    platform.toString = toStringPlatform;\n\n    if (platform.version) {\n      description.unshift(version);\n    }\n    if (platform.name) {\n      description.unshift(name);\n    }\n    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {\n      description.push(product ? '(' + os + ')' : 'on ' + os);\n    }\n    if (description.length) {\n      platform.description = description.join(' ');\n    }\n    return platform;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export platform.\n  var platform = parse();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose platform on the global object to prevent errors when platform is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    root.platform = platform;\n\n    // Define as an anonymous module so platform can be aliased through path mapping.\n    define(function() {\n      return platform;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && freeModule) {\n    // Export for CommonJS support.\n    forOwn(platform, function(value, key) {\n      freeExports[key] = value;\n    });\n  }\n  else {\n    // Export to the global object.\n    root.platform = platform;\n  }\n}.call(this));\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Clip implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.min = attributes.getFloat('min', -3.4028234663852886e+38);\n    this.max = attributes.getFloat('max', 3.4028234663852886e+38);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected min: number;\n  protected max: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: ReadonlyArray<number>): ReadonlyArray<number> {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:use-named-parameter\n\nimport {Tensor as InternalTensor} from '../tensor';\nimport {Tensor as TensorInterface} from './tensor';\n\nimport * as Utils from './tensor-impl-utils';\n\ntype DataType = TensorInterface.DataType;\ntype Type = TensorInterface.Type;\ntype ElementType = TensorInterface.ElementType;\n\nexport class Tensor implements TensorInterface {\n  internalTensor: InternalTensor;\n  constructor(data: DataType|number[]|boolean[], type: Type, dims?: ReadonlyArray<number>) {\n    const inferredDims = dims ? dims : [data.length];\n    // convert regular arrays to typeArrays\n    if (Array.isArray(data) && type !== 'string') {\n      if (type === 'float32') {\n        // convert number[] to Float32Array\n        this.data = Float32Array.from(data as number[]);\n      } else if (type === 'bool') {\n        // convert boolean[] to Uint8Array\n        // NOTE: there is a bug of Uint8Array.from() in Safari when using core-js. Use 'new Uint8Array' as workaround.\n        // See also: https://github.com/zloirock/core-js/issues/285\n        this.data = new Uint8Array(data as number[]);\n      } else if (type === 'int32') {\n        // convert number[] to Int32Array\n        this.data = Int32Array.from(data as number[]);\n      }\n    } else {\n      this.data = data as DataType;\n    }\n\n    this.dims = inferredDims;\n    this.type = type;\n    this.internalTensor = new InternalTensor(this.dims, this.type, undefined, undefined, this.data);\n    this.size = this.internalTensor.size;\n  }\n\n  dims: ReadonlyArray<number>;\n  type: Type;\n  size: number;\n  data: DataType;\n  get(...indices: number[]): ElementType;\n  get(indices: ReadonlyArray<number>): ElementType;\n  get(indices?: ReadonlyArray<number>|number, ...rest: number[]): ElementType {\n    let indexArray: ReadonlyArray<number> = [];\n    if (typeof indices === 'number') {\n      indexArray = [indices, ...rest];\n    } else if (indices) {\n      indexArray = indices;\n    } else {\n      throw new Error(`Input index array is undefined. `);\n    }\n    // check dims\n    Utils.validateIndices(indexArray);\n    if (indexArray.length !== this.dims.length) {\n      throw new RangeError(`Input index array dims don't match the tensor dims.`);\n    }\n    // compute the flattened index\n    indexArray.forEach((dim: number, idx: number) => {\n      if (dim >= this.dims[idx]) {\n        throw new RangeError(`Input index array dims don't match the tensor dims.`);\n      }\n    });\n    const value = this.internalTensor.get(indexArray);\n    if (this.type === 'bool') {\n      return value === 1 ? true : false;\n    }\n    return value;\n  }\n  set(value: ElementType, ...indices: number[]): void;\n  set(value: ElementType, indices: ReadonlyArray<number>): void;\n  set(value: ElementType, indices?: ReadonlyArray<number>|number, ...rest: number[]) {\n    Utils.matchElementType(this.type, value);\n    let indexArray: ReadonlyArray<number> = [];\n    if (typeof indices === 'number') {\n      indexArray = [indices, ...rest];\n    } else if (indices) {\n      indexArray = indices;\n    } else {\n      throw new Error(`Input index array is undefined.`);\n    }\n    // check dims\n    Utils.validateIndices(indexArray);\n    if (indexArray.length !== this.dims.length) {\n      throw new RangeError(`Input index array dims don't match the tensor dims.`);\n    }\n    // compute the flattened index\n    indexArray.forEach((dim: number, idx: number) => {\n      if (dim >= this.dims[idx]) {\n        throw new RangeError(`Input index array dims don't match the tensor dims.`);\n      }\n    });\n\n    if (typeof value === 'boolean') {\n      this.internalTensor.set(indexArray, value ? 1 : 0);\n    } else {\n      this.internalTensor.set(indexArray, value);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Tensor as InternalTensor} from '../tensor';\nimport {Tensor as TensorInterface} from './tensor';\nimport {Tensor as ApiTensor} from './tensor-impl';\n\nexport function fromInternalTensor(internalTensor: InternalTensor): ApiTensor {\n  switch (internalTensor.type) {\n    case 'bool':\n      return new ApiTensor(new Uint8Array(internalTensor.integerData), 'bool', internalTensor.dims);\n    case 'float32':\n      return new ApiTensor(internalTensor.floatData as Float32Array, 'float32', internalTensor.dims);\n    case 'float64':\n      return new ApiTensor(new Float32Array(internalTensor.floatData), 'float32', internalTensor.dims);\n    case 'string':\n      return new ApiTensor(internalTensor.stringData, 'string', internalTensor.dims);\n    case 'int8' || 'uint8' || 'int16' || 'uint16' || 'uint32':\n      return new ApiTensor(new Int32Array(internalTensor.integerData), 'int32', internalTensor.dims);\n    case 'int32':\n      return new ApiTensor(internalTensor.integerData as Int32Array, 'int32', internalTensor.dims);\n    default:\n      throw new TypeError('Tensor type is not supported. ');\n  }\n}\n\nexport function toInternalTensor(tensor: ApiTensor): InternalTensor {\n  return new InternalTensor(tensor.dims, tensor.type, undefined, undefined, tensor.data);\n}\n\nexport function matchElementType(type: TensorInterface.Type, element: TensorInterface.ElementType) {\n  switch (typeof element) {\n    case 'string':\n      if (type !== 'string') {\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\n      }\n      break;\n    case 'number':\n      if (type !== 'float32' && type !== 'int32') {\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\n      }\n      if (type === 'float32' && Number.isInteger(element)) {\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\n      }\n      if (type === 'int32' && !Number.isInteger(element)) {\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\n      }\n      break;\n    case 'boolean':\n      if (type !== 'bool') {\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\n      }\n      break;\n    default:\n      throw new TypeError(`The new element type is not supported.`);\n  }\n}\n\nexport function validateIndices(indices: ReadonlyArray<number>) {\n  if (indices.length < 0 || indices.length > 6) {\n    throw new RangeError(`Only rank 0 to 6 is supported for tensor shape.`);\n  }\n  for (const n of indices) {\n    if (!Number.isInteger(n)) {\n      throw new TypeError(`Invalid index: ${n} is not an integer`);\n    }\n    if (n < 0 || n > 2147483647) {\n      throw new TypeError(`Invalid index: length ${n} is not allowed`);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {CpuBackend} from '../backends/backend-cpu';\nimport {WasmBackend} from '../backends/backend-wasm';\nimport {WebGLBackend} from '../backends/backend-webgl';\n\nimport {Environment} from './env';\nimport {envImpl} from './env-impl';\nimport {Backend} from './onnx';\n\nexport * from './env';\nexport * from './onnx';\nexport * from './tensor';\nexport * from './inference-session';\n\nexport const backend: Backend = {\n  cpu: new CpuBackend(),\n  wasm: new WasmBackend(),\n  webgl: new WebGLBackend()\n};\n\nexport const ENV: Environment = envImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Backend as BackendInterface} from '../api/onnx';\nimport {Backend, SessionHandler} from '../backend';\nimport {Session} from '../session';\n\nimport {CpuSessionHandler} from './cpu/session-handler';\n\ntype CpuOptions = BackendInterface.CpuOptions;\n\nexport class CpuBackend implements Backend, CpuOptions {\n  disabled?: boolean;\n\n  initialize(): boolean {\n    return true;\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new CpuSessionHandler(this, context);\n  }\n  dispose(): void {}\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Backend, InferenceHandler, SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\n\nimport {CpuInferenceHandler} from './inference-handler';\nimport {CPU_OP_RESOLVE_RULES} from './op-resolve-rules';\n\nexport class CpuSessionHandler implements SessionHandler {\n  constructor(readonly backend: Backend, readonly context: Session.Context) {}\n\n  createInferenceHandler(): InferenceHandler {\n    return new CpuInferenceHandler(this, this.context.profiler);\n  }\n\n  dispose(): void {}\n\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>, graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, CPU_OP_RESOLVE_RULES);\n    op.initialize(node.attributes, node, graph);\n    return op;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {InferenceHandler} from '../../backend';\nimport {Profiler} from '../../instrument';\n\nimport {CpuSessionHandler} from './session-handler';\n\nexport class CpuInferenceHandler implements InferenceHandler {\n  constructor(public readonly session: CpuSessionHandler, public readonly profiler?: Readonly<Profiler>) {}\n\n  dispose(): void {}\n}\n","import {ArgMax} from '../../../ops/argMax';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ReduceUtil, ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuArgMax extends ArgMax {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = argMax(inputs[0], this.axis, this.keepDims);\n    return [output];\n  }\n}\n\nexport function argMax(x: Tensor, axis: number, keepdims: boolean): Tensor {\n  const rank = x.dims ? x.dims.length : 1;\n  axis = ShapeUtil.normalizeAxis(axis, rank);\n  const outputDims = ReduceUtil.calcReduceShape(x.dims, [axis], true);\n  const X = x.data;\n  const Y = new Int32Array(ShapeUtil.size(outputDims));\n  const blockSize = ShapeUtil.sizeFromDimension(x.dims, axis + 1);\n  const strides = ShapeUtil.computeStrides(outputDims);\n  const inputStrides = ShapeUtil.computeStrides(x.dims);\n  const indicesY = new Array(x.dims.length);\n  for (let i = 0; i < Y.length; i++) {\n    const indices = ShapeUtil.offsetToIndices(i, strides);\n    // map index\n    BroadcastUtil.fillIndex(indices, x.dims, indicesY);\n    const offset = ShapeUtil.indicesToOffset(indicesY, inputStrides);\n    let max = x.data[offset];\n    let index = 0;\n    for (let j = 0; j < x.dims[axis]; ++j) {\n      const value = X[offset + j * blockSize];\n      if (value > max) {\n        max = value;\n        index = j;\n      }\n    }\n    Y[i] = index;\n  }\n\n  return new Tensor(\n      keepdims ? outputDims : ReduceUtil.calcReduceShape(x.dims, [axis], keepdims), 'int32', undefined, undefined, Y);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class ArgMax implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 0);\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected axis: number;\n  protected keepDims: boolean;\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BatchNormalization} from '../../../ops/batch-normalization';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuBatchNormalization extends BatchNormalization {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = batchNormalization(\n        inputs[0], inputs[1], inputs[2], inputs[3], inputs[4], this.epsilon, this.momentum, this.spatial);\n    return [output];\n  }\n}\n\nexport function batchNormalization(\n    x: Tensor, scale: Tensor, b: Tensor, mean: Tensor, variance: Tensor, epsilon: number, momentum: number,\n    spatial: number) {\n  const inputDimensions = x.dims;\n  const N = inputDimensions[0];\n  const C = inputDimensions[1];\n\n  // calculate channel size (i.e.) data points per channel\n  let channelSize = 1;\n  for (let i = 2; i < inputDimensions.length; i++) {\n    channelSize *= inputDimensions[i];\n  }\n\n  const output = new Tensor(x.dims, x.type);\n\n  const X = x.floatData;\n  const Y = output.floatData;\n  const scaleData = scale.numberData;\n  const bData = b.numberData;\n  const meanData = mean.numberData;\n  const varianceData = variance.numberData;\n\n  for (let nc = 0; nc < N * C; nc++) {\n    const offset = nc * channelSize;\n    for (let i = 0; i < channelSize; i++) {\n      Y[offset + i] =\n          scaleData[nc % C] * ((X[offset + i] - meanData[nc % C]) / Math.sqrt(varianceData[nc % C] + epsilon)) +\n          bData[nc % C];\n    }\n  }\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../../../attribute';\nimport {BinaryOp} from '../../../ops/binary-op';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuBinaryOp extends BinaryOp {\n  constructor(\n      typeConstraint: ReadonlyArray<Tensor.DataType>, private opLambda?: (e1: number, e2: number) => number,\n      opType?: string, resultType?: Tensor.DataType) {\n    super(typeConstraint, opType, resultType);\n  }\n\n  // overriding the initialize() in the base class\n  initialize(attributes: Attribute): void {\n    if (!this.opType && !this.opLambda) {\n      throw new Error(`Both opType and opLambda cannot be missing for a binary op`);\n    }\n    // Expose functionality to construct opLambdas on the fly\n    // This is not costly as initialize() should be invoked only once after the model is resolved to a graph object\n    if (!this.opLambda) {\n      switch (this.opType) {\n        default:\n          throw new Error(`Binary op could not be initialized. Missing op lambda.`);\n      }\n    }\n  }\n\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = binaryOp(inputs[0], inputs[1], this.opLambda!, false, this.resultType);\n    return [output];\n  }\n}\n\nfunction binaryOp(\n    x: Tensor, y: Tensor, opLambda: (e1: number, e2: number) => number, inplace: boolean,\n    resultType?: Tensor.DataType): Tensor {\n  const result = BroadcastUtil.calc(x, y, opLambda, inplace, resultType);\n  if (!result) {\n    throw new Error('not broadcastable');\n  }\n  return result;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Cast} from '../../../ops/cast';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\n// import { getLogger } from 'log4js';\n\nexport class CpuCast extends Cast {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return [cast(inputs[0], this.to)];\n  }\n}\n\nexport function cast(x: Tensor, to: Tensor.DataType): Tensor {\n  const output = new Tensor([...x.dims], to);\n  const inputData = x.data;\n  const outputData = output.data;\n\n  for (let i = 0; i < outputData.length; ++i) {\n    outputData[i] = inputData[i];\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\nimport {ProtoUtil} from '../util';\n\nexport abstract class Cast implements Operator {\n  protected to: Tensor.DataType;\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.to = ProtoUtil.tensorDataTypeFromProto(attributes.getInt('to'));\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Concat} from '../../../ops/concat';\nimport {Tensor} from '../../../tensor';\nimport * as Util from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuConcat extends Concat {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = concat(inputs, this.axis);\n    return [output];\n  }\n}\n\nexport function concat(x: Tensor[], axis: number) {\n  const input0 = x[0];\n  const inputShape = input0.dims;\n\n  if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n    throw new Error(`axis specified for concat doesn't match input dimensionality`);\n  }\n\n  if (axis < 0) {\n    axis = inputShape.length + axis;\n  }\n\n  // ensure all of the non-concatenated axes match each other\n  // along the way, calculate the shape of the output tensor\n  let concatAxisSize = inputShape[axis];\n  const outputShape = new Array<number>(inputShape.length);\n\n  for (let i = 1; i < x.length; i++) {\n    const dataN = x[i];\n    const dataNShape = dataN.dims;\n\n    for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n      // add to the placeholder for computing output shape\n      if (axisIndex === axis) {\n        concatAxisSize += dataNShape[axisIndex];\n      }\n\n      // ensure all non-cancatenated axes match each other\n      else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n        throw new Error(`non concat dimensions must match`);\n      }\n\n      // fill the 'outputShape' array\n      outputShape[axisIndex] = dataNShape[axisIndex];\n    }\n  }\n\n  // complete the 'outputShape' array\n  outputShape[axis] = concatAxisSize;\n\n  // main logic\n  const output = new Tensor(outputShape, input0.type);\n  const Y = output.numberData;\n\n  // the axisPitch is the number of elements to add to move\n  // to the next split axis in the output\n  let axisPitch = 1;\n  for (let i = outputShape.length - 1; i >= axis; i--) {\n    axisPitch *= outputShape[i];\n  }\n\n  let outputBase = 0;\n  for (let inputIndex = 0; inputIndex < x.length; inputIndex++) {\n    const dataN = x[inputIndex];\n\n    // the inputAxisPitch is the number of elements to add\n    // to move to the next split axis in the input\n    let inputAxisPitch = 1;\n    for (let i = dataN.dims.length - 1; i >= axis; i--) {\n      inputAxisPitch *= dataN.dims[i];\n    }\n\n    const inputData = dataN.numberData;\n    const inputSize = Util.ShapeUtil.size(dataN.dims);\n\n    // copy the data across.\n    // for every 'inputAxisPitch' values copied, we move over by\n    // the 'axisPitch'\n\n    let outputOffset = outputBase;\n\n    for (let i = 0, j = 0; i < inputSize; i++) {\n      Y[outputOffset + i] = inputData[i];\n      if (++j === inputAxisPitch) {\n        // subtract inputAxisPitch because output is being indexed by 'i'\n        outputOffset += (axisPitch - inputAxisPitch);\n        j = 0;\n      }\n    }\n    outputBase += inputAxisPitch;\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Conv} from '../../../ops/conv';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nimport {matMul2d} from './matmul';\n\nexport class CpuConv extends Conv {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const x = inputs[0];\n    const w = inputs[1];\n    const b = inputs.length === 3 ? inputs[2] : undefined;\n\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      const wDims = inputs[1].dims;\n      for (let i = 2; i < wDims.length; ++i) {\n        this.kernelShape.push(wDims[i]);\n      }\n    }\n\n    // create output Tensor after determining output size (after adjusting pads based on 'autoPad' attribute)\n    const outputDims = PoolConvUtil.computeConvOutputShape(\n        x.dims, w.dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\n    const y = new Tensor(outputDims, x.type);\n\n    conv2d(y, x, w, b, this.dilations, this.group, this.pads, this.strides);\n    return [y];\n  }\n}\n\n// tslint:disable: variable-name\nexport function conv2d(\n    Y: Tensor, X: Tensor, W: Tensor, B: Tensor|undefined, dilations: ReadonlyArray<number>, group: number,\n    pads: ReadonlyArray<number>, strides: ReadonlyArray<number>): void {\n  const input_num = X.dims[0];\n  const input_channels = X.dims[1];\n  const input_height = X.dims[2];\n  const input_width = X.dims[3];\n\n  const filter_num = W.dims[0];\n  const filter_channels = W.dims[1];\n  const filter_height = W.dims[2];\n  const filter_width = W.dims[3];\n  const filter_size = filter_num * filter_channels * filter_height * filter_width;\n  const kernel_shape = [filter_height, filter_width];\n\n  const output_num = Y.dims[0];\n  const output_channels = Y.dims[1];\n  const output_height = Y.dims[2];\n  const output_width = Y.dims[3];\n  const output_size = output_num * output_channels * output_height * output_width;\n\n  const input_image_size = input_height * input_width;\n  const output_image_size = output_height * output_width;\n  const kernel_size = kernel_shape[0] * kernel_shape[1];\n  const X_offset = input_channels / group * input_image_size;\n  const Y_offset = output_size / output_num / group;\n  const W_offset = filter_size / group;\n  const kernel_dim = input_channels / group * kernel_size;\n  const col_buffer_size = kernel_dim * output_image_size;\n\n  const col_buffer_data = new Float32Array(col_buffer_size);\n\n  for (let image_id = 0; image_id < input_num; ++image_id) {\n    let X_image_offset = 0;\n    let Y_image_offset = 0;\n    for (let group_id = 0; group_id < group; ++group_id) {\n      im2col(\n          X.floatData.subarray(X_image_offset + group_id * X_offset), col_buffer_data, input_channels / group,\n          input_height, input_width, kernel_shape[0], kernel_shape[1], dilations[0], dilations[1], pads[0], pads[1],\n          pads[2], pads[3], strides[0], strides[1]);\n\n      matMul2d(\n          W.floatData.subarray(group_id * W_offset), col_buffer_data,\n          Y.floatData.subarray(Y_image_offset + group_id * Y_offset), false, false, 1, 0, filter_num / group,\n          output_image_size, kernel_dim);\n    }\n\n    X_image_offset += X_offset * group;\n    Y_image_offset += Y_offset * group;\n  }\n\n  // Add bias if applicable\n  if (B) {\n    const biasData = B.floatData;\n    const outputData = Y.floatData;\n    const batchSize = Y.dims[0];\n    const outputChannels = Y.dims[1];\n    const channelSize = Y.dims[2] * Y.dims[3];\n    const dataSize = outputChannels * channelSize;\n    for (let batch = 0; batch < batchSize; ++batch) {\n      for (let channel = 0; channel < outputChannels; ++channel) {\n        const offset = batch * dataSize + channel * channelSize;\n        for (let index = 0; index < channelSize; ++index) {\n          outputData[offset + index] += biasData[channel];\n        }\n      }\n    }\n  }\n}\n\nfunction im2col(\n    data_im: Float32Array|Float64Array, data_col: Float32Array|Float64Array, channels: number, height: number,\n    width: number, kernel_h: number, kernel_w: number, dilation_h: number, dilation_w: number, pad_t: number,\n    pad_l: number, pad_b: number, pad_r: number, stride_h: number, stride_w: number) {\n  const output_h = ~~((height + pad_b + pad_t - (dilation_h * (kernel_h - 1) + 1)) / stride_h) + 1;\n  const output_w = ~~((width + pad_l + pad_r - (dilation_w * (kernel_w - 1) + 1)) / stride_w) + 1;\n\n  // Fast path for zero padding and no dilation\n  // From Torch, THNN_(unfolded_copy)\n  if (dilation_h === 1 && dilation_w === 1 && pad_l === 0 && pad_r === 0 && pad_t === 0 && pad_b === 0) {\n    for (let k = 0; k < channels * kernel_h * kernel_w; k++) {\n      const nip = ~~(k / (kernel_h * kernel_w));\n      const rest = k % (kernel_h * kernel_w);\n      const kh = ~~(rest / kernel_w);\n      const kw = rest % kernel_w;\n      const dst_offset = nip * (kernel_h * kernel_w * output_h * output_w) + kh * (kernel_w * output_h * output_w) +\n          kw * (output_h * output_w);\n      const src_offset = nip * (height * width);\n      for (let y = 0; y < output_h; y++) {\n        const iy = y * stride_h + kh;\n        const ix = kw;\n        if (stride_w === 1) {\n          data_col.set(\n              data_im.subarray(src_offset + iy * width + ix, src_offset + iy * width + ix + output_w),\n              dst_offset + y * output_w);\n        } else {\n          for (let x = 0; x < output_w; x++) {\n            data_col[dst_offset + (y * output_w + x)] = data_im[src_offset + (iy * width + ix + x * stride_w)];\n          }\n        }\n      }\n    }\n    return;\n  }\n\n  // Baseline\n  const dkernel_h = dilation_h * (kernel_h - 1) + 1;\n  const dkernel_w = dilation_w * (kernel_w - 1) + 1;\n\n  const height_col = ~~((height + pad_t + pad_b - dkernel_h) / stride_h) + 1;\n  const width_col = ~~((width + pad_l + pad_r - dkernel_w) / stride_w) + 1;\n\n  const channels_col = channels * kernel_h * kernel_w;\n  for (let c = 0; c < channels_col; ++c) {\n    const w_offset = c % kernel_w;\n    const h_offset = ~~(c / kernel_w) % kernel_h;\n    const c_im = ~~(c / (kernel_h * kernel_w));\n    for (let h = 0; h < height_col; ++h) {\n      for (let w = 0; w < width_col; ++w) {\n        const h_pad = h * stride_h - pad_t + h_offset * dilation_h;\n        const w_pad = w * stride_w - pad_l + w_offset * dilation_w;\n        if (h_pad >= 0 && h_pad < height && w_pad >= 0 && w_pad < width) {\n          data_col[(c * height_col + h) * width_col + w] = data_im[(c_im * height + h_pad) * width + w_pad];\n        } else {\n          data_col[(c * height_col + h) * width_col + w] = 0;\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Dropout} from '../../../ops/dropout';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuDropout extends Dropout {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = dropout(inputs[0], this.ratio, this.testMode);\n    return [output];\n  }\n}\n\nexport function dropout(x: Tensor, ratio: number, isTestMode: boolean) {\n  if (!isTestMode) {\n    throw new Error('only test mode is supported');\n  }\n\n  const output = new Tensor(x.dims, x.type);\n  const X = x.floatData;\n  const Y = output.numberData;\n  Y.set(X);\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Expand} from '../../../ops/expand';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\n// import { getLogger } from 'log4js';\n\nexport class CpuExpand extends Expand {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return [expand(inputs[0], inputs[1])];\n  }\n}\n\nexport function expand(x: Tensor, shape: Tensor): Tensor {\n  const shapeData = shape.integerData as Int32Array;\n  const dimensions = [...shapeData];\n  const originalDimensions = x.dims;\n\n  for (let i = dimensions.length - 1; i >= dimensions.length - originalDimensions.length; --i) {\n    // Replace -1 with the original dimension\n    if (dimensions[i] === -1) {\n      dimensions[i] = originalDimensions[i + dimensions.length - originalDimensions.length];\n    }\n  }\n\n  const output = new Tensor(dimensions, x.type);\n\n  const result = BroadcastUtil.calc(x, output, (a, b) => a, false);\n  if (!result) {\n    throw new Error('not broadcastable');\n  }\n\n  return result;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {NUMBER_TYPES, Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Expand implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 2) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n      return false;\n    }\n\n    if (inputs[1].type !== 'int32') {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Flatten} from '../../../ops/flatten';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuFlatten extends Flatten {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = flatten(inputs[0], this.axis);\n    return [output];\n  }\n}\n\nexport function flatten(x: Tensor, axis: number): Tensor {\n  const outputDims = ShapeUtil.flattenShape(x.dims, axis);\n  const output = new Tensor(outputDims, x.type);\n\n  const X = x.numberData;\n  const Y = output.numberData;\n\n  Y.set(X);\n\n  return output;\n}\n","import {Gather} from '../../../ops/gather';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuGather extends Gather {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = gather(inputs[0], inputs[1], this.axis);\n    return [output];\n  }\n}\n\nexport function gather(x: Tensor, indices: Tensor, axis: number): Tensor {\n  axis = ShapeUtil.normalizeAxis(axis, x.dims.length);\n  const dims = x.dims.slice();\n  const newDims = dims.slice();\n  const indicesData = indices.data;\n  newDims[axis] = indicesData.length;\n  const dimsStrides = ShapeUtil.computeStrides(dims);\n  const newDimsStrides = ShapeUtil.computeStrides(newDims);\n  const output = new Tensor(newDims, x.type);\n  const Y = output.numberData;\n  const X = x.data;\n  for (let i = 0; i < Y.length; ++i) {\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStrides);\n    const oldLogicalIndex = newLogicalIndex.slice();\n    const idx = indicesData[newLogicalIndex[axis]] as number;\n    oldLogicalIndex[axis] = idx < 0 ? idx + dims[axis] : idx;\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, dimsStrides);\n    Y[i] = X[oldOffset] as number;\n  }\n  // calculate the output dims\n  const outputDims = dims.slice(0, axis).concat(indices.dims).concat(dims.slice(axis + 1));\n  return new Tensor(outputDims, x.type, undefined, undefined, Y);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Gemm} from '../../../ops/gemm';\nimport {Tensor} from '../../../tensor';\nimport * as util from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nimport {matMul2d} from './matmul';\n\nexport class CpuGemm extends Gemm {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = gemm(\n        inputs[0], inputs[1], this.alpha, this.beta, this.transA, this.transB,\n        inputs.length === 3 ? inputs[2] : undefined);\n    return [output];\n  }\n}\n\nexport function gemm(a: Tensor, b: Tensor, alpha: number, beta: number, transA: boolean, transB: boolean, c?: Tensor) {\n  const [M, N, K] = util.GemmUtil.getShapeOfGemmResult(a.dims, transA, b.dims, transB, c?.dims);\n\n  // The result will always be of the shape [M,N]\n  const output = new Tensor([M, N], a.type);\n  // broadcast and assign value from C to output\n  if (c && util.BroadcastUtil.calc(output, c, (a, b) => b, true) !== output) {\n    throw new Error(`tensor C is not broadcastable to [M,N]`);\n  }\n\n  matMul2d(a.floatData, b.floatData, output.floatData, transA, transB, alpha, beta, M, N, K);\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {ImageScaler} from '../../../ops/image-scaler';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuImageScaler extends ImageScaler {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = imageScaler(inputs[0], this.bias, this.scale);\n    return [output];\n  }\n}\n\nexport function imageScaler(x: Tensor, bias: number[], scale: number): Tensor {\n  const [N, C, H, W] = x.dims;\n  const output = new Tensor([N, C, H, W], x.type);\n  const X = x.floatData;\n  const Y = output.floatData;\n  for (let nc = 0; nc < N * C; nc++) {\n    for (let hw = 0; hw < H * W; hw++) {\n      const index = nc * H * W + hw;\n      Y[index] = X[index] * scale + bias[nc % C];\n    }\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuInstanceNormalization extends InstanceNormalization {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = instanceNormalization(inputs[0], inputs[1], inputs[2], this.epsilon);\n    return [output];\n  }\n}\n\nexport function instanceNormalization(x: Tensor, scale: Tensor, b: Tensor, epsilon: number) {\n  const inputDimensions = x.dims;\n  const N = inputDimensions[0];\n  const C = inputDimensions[1];\n\n  // calculate channel size (i.e.) data points per channel\n  let channelSize = 1;\n  for (let i = 2; i < inputDimensions.length; i++) {\n    channelSize *= inputDimensions[i];\n  }\n  const output = new Tensor(x.dims, x.type);\n\n  const X = x.floatData;\n  const Y = output.floatData;\n  const scaleData = scale.numberData;\n  const bData = b.numberData;\n\n  let temp: number;\n  let mean: number;\n  let variance: number;\n  let physicalOffset: number;\n  let iterEnd: number;\n  let currentChannel: number;\n\n  for (let nc = 0; nc < N * C; nc++) {\n    physicalOffset = nc * channelSize;\n    iterEnd = physicalOffset + channelSize;\n    currentChannel = nc % C;\n\n    // compute mean for this channel\n    temp = 0;\n    for (let i = physicalOffset; i < iterEnd; ++i) {\n      temp += X[i];\n    }\n    mean = temp / channelSize;\n\n    // compute variance for this channel\n    temp = 0;\n    for (let i = physicalOffset; i < iterEnd; ++i) {\n      temp += Math.pow(X[i] - mean, 2);\n    }\n    variance = temp / channelSize;\n\n    // compute normalized value for data in this channel\n    for (let i = physicalOffset; i < iterEnd; ++i) {\n      Y[i] = scaleData[currentChannel] * ((X[i] - mean) / Math.sqrt(variance + epsilon)) + bData[currentChannel];\n    }\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Lrn} from '../../../ops/lrn';\nimport {Tensor} from '../../../tensor';\nimport * as util from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuLrn extends Lrn {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = lrn(inputs[0], this.alpha, this.beta, this.bias, this.size);\n    return [output];\n  }\n}\n\nexport function lrn(x: Tensor, alpha: number, beta: number, bias: number, size: number): Tensor {\n  const N = x.dims[0];\n  const C = x.dims[1];\n  const X = x.floatData;\n  let channelSize = 1;\n\n  for (let i = 2; i < x.dims.length; ++i) {\n    channelSize *= x.dims[i];\n  }\n\n  const tensorDataSize = channelSize * C;\n\n  // create new tensor to hold the result\n  const output = new Tensor(x.dims, x.type);\n  const Y: number[] = new Array(util.ShapeUtil.size(x.dims));\n\n  // update the output with just the bias to begin with\n  for (let i = 0; i < Y.length; ++i) {\n    Y[i] = bias;\n  }\n\n  // placeholder to store padded square (i.e.) intermediate data\n  const paddedSquareSize = (C + size - 1) * channelSize;\n  const paddedSquareData = new Float64Array(paddedSquareSize);\n\n  const alphaOverSize = alpha / size;\n  const prePad = (size - 1) / 2;\n\n  // go through the images\n  for (let n = 0; n < N; ++n) {\n    // compute the padded square\n    util.MathUtil.sqr(paddedSquareData, X, prePad * channelSize, tensorDataSize * n, tensorDataSize);\n\n    // create the first channel\n    for (let c = 0; c < size; ++c) {\n      util.MathUtil.axpy(Y, paddedSquareData, tensorDataSize * n, c * channelSize, channelSize, alphaOverSize);\n    }\n\n    for (let c = 1; c < C; ++c) {\n      const scaleSliceStart = n * tensorDataSize + c * channelSize;\n\n      // copy previous scale\n      util.arrayCopyHelper(Y, Y, scaleSliceStart, scaleSliceStart - channelSize, channelSize);\n\n      // add head\n      util.MathUtil.axpy(\n          Y, paddedSquareData, scaleSliceStart, (c + size - 1) * channelSize, channelSize, alphaOverSize);\n\n      // subtract tail\n      util.MathUtil.axpy(Y, paddedSquareData, scaleSliceStart, (c - 1) * channelSize, channelSize, -alphaOverSize);\n    }\n  }\n\n  util.MathUtil.powx(Y, Y, 0, 0, util.ShapeUtil.size(x.dims), -beta);\n\n  util.MathUtil.mul(Y, X, 0, 0, util.ShapeUtil.size(x.dims));\n\n  output.floatData.set(Y);\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Lrn implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.alpha = attributes.getFloat('alpha', 1E-4);\n    this.beta = attributes.getFloat('beta', 0.75);\n    this.bias = attributes.getFloat('bias', 1.0);\n    this.size = attributes.getInt('size');\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    // input tensor must have atleast 3 dimensions\n    if (inputs[0].dims.length < 3) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected alpha: number;\n  protected beta: number;\n  protected bias: number;\n  protected size: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Pad} from '../../../ops/pad';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n// import { getLogger } from 'log4js';\n\nexport class CpuPad extends Pad {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = pad(inputs[0], this.mode, this.value, this.pads);\n    return [output];\n  }\n}\n\nexport function pad(x: Tensor, mode: string, value: number, pads: number[]) {\n  const inputDimensions = x.dims;\n  const outputDimensions = getPadDimension(inputDimensions, pads);\n\n  const output = new Tensor(outputDimensions, x.type);\n\n  switch (mode) {\n    case 'constant':\n      for (let ind = 0; ind < outputDimensions.reduce((acc, cur) => acc * cur, 1); ind++) {\n        const inx = mapToArrayIndex(ind, outputDimensions);\n        output.set(inx, value);\n      }\n      for (let ind = 0; ind < inputDimensions.reduce((acc, cur) => acc * cur, 1); ind++) {\n        const inx = mapToArrayIndex(ind, inputDimensions);\n        output.set(inx.map((v, i) => v + pads[i]), x.get(inx));\n      }\n      break;\n    case 'reflect':\n      for (let ind = 0; ind < outputDimensions.reduce((acc, cur) => acc * cur, 1); ind++) {\n        const inx = mapToArrayIndex(ind, outputDimensions);\n        output.set(inx, x.get(inx.map((v, i) => getReflectionIndex(v, pads[i], inputDimensions[i]))));\n      }\n      break;\n    case 'edge':\n      for (let ind = 0; ind < outputDimensions.reduce((acc, cur) => acc * cur, 1); ind++) {\n        const inx = mapToArrayIndex(ind, outputDimensions);\n        output.set(inx, x.get(inx.map((v, i) => getEdgeIndex(v, pads[i], inputDimensions[i]))));\n      }\n      break;\n    default:\n      throw Error('Illegal pad mode.');\n  }\n\n  return output;\n}\n\nfunction getReflectionIndex(index: number, offset: number, size: number) {\n  if (index < offset) {\n    const position = (offset - index - 1) % (size - 1);\n    const direction = Math.floor((offset - index - 1) / (size - 1)) % 2;\n    if (direction === 1) {\n      return size - position - 2;\n    } else {\n      return position + 1;\n    }\n  } else if (index < offset + size) {\n    return index - offset;\n  } else {\n    const position = (index - (offset + size)) % (size - 1);\n    const direction = Math.floor((index - (offset + size)) / (size - 1)) % 2;\n    if (direction === 0) {\n      return size - position - 2;\n    } else {\n      return position + 1;\n    }\n  }\n}\n\nfunction getEdgeIndex(index: number, offset: number, size: number) {\n  if (index < offset) {\n    return 0;\n  } else if (index < offset + size) {\n    return index - offset;\n  } else {\n    return size - 1;\n  }\n}\n\nfunction mapToArrayIndex(numberIndex: number, dimension: readonly number[]) {\n  if (numberIndex < 0 || (dimension.some(val => val < 0))) {\n    throw Error('Array index out of range');\n  }\n  const arrayIndex = [...dimension];\n  arrayIndex.reverse();\n  function product(array: readonly number[]) {\n    return array.reduce((acc, cur) => acc * cur, 1);\n  }\n  return arrayIndex.map((value, index, array) => Math.floor(numberIndex / product(array.slice(0, index))) % value)\n      .reverse();\n}\n\nfunction getPadDimension(inputDimensions: readonly number[], pads: number[]) {\n  const outputDimensions = Array(inputDimensions.length);\n  Object.assign(outputDimensions, inputDimensions);\n  for (let i = 0; i < inputDimensions.length; i++) {\n    outputDimensions[i] += pads[i] + pads[i + outputDimensions.length];\n  }\n  return outputDimensions;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuAveragePool extends AveragePool {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output =\n        averagePool(inputs[0], this.autoPad, this.countIncludePad, this.kernelShape, this.pads, this.strides);\n    return [output];\n  }\n}\n\nexport class CpuGlobalAveragePool extends GlobalAveragePool {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = globalAveragePool(inputs[0]);\n    return [output];\n  }\n}\n\nexport class CpuMaxPool extends MaxPool {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = maxPool(inputs[0], this.autoPad, this.kernelShape, this.pads, this.strides);\n    return [output];\n  }\n}\n\nexport class CpuGlobalMaxPool extends GlobalMaxPool {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = globalMaxPool(inputs[0]);\n    return [output];\n  }\n}\n\n// Functions implementing specific pooling operations\nexport function averagePool(\n    input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[], pads: number[],\n    strides: number[]): Tensor {\n  return pool(\n      false, input, autoPad, countIncludePad, kernelShape, pads, strides, 0, (a, b) => (a + b), (a, b) => (a / b));\n}\n\nexport function globalAveragePool(input: Tensor): Tensor {\n  return pool(true, input, 'NOTSET', false, [], [], [], 0, (a, b) => (a + b), (a, b) => (a / b));\n}\n\nexport function maxPool(\n    input: Tensor, autoPad: string, kernelShape: number[], pads: number[], strides: number[]): Tensor {\n  return pool(\n      false, input, autoPad, false, kernelShape, pads, strides, Number.MIN_SAFE_INTEGER, (a, b) => (Math.max(a, b)),\n      (a, b) => a);\n}\n\nexport function globalMaxPool(input: Tensor): Tensor {\n  return pool(\n      true, input, 'NOTSET', false, [], [], [], Number.MIN_SAFE_INTEGER, (a, b) => (Math.max(a, b)), (a, b) => a);\n}\n\n/**\n * Perform pooling operations based on input\n * @param isGlobalOperator If true, perform global pooling.\n * @param input The input tensor.\n * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID\n * @param countIncludePad Whether include pad pixels when calculating values for the edges.\n * @param kernelShape The size of the kernel along each axis.\n * @param pads Padding for the beginning and ending along each axis. `pads` format should be as follow [x1_begin,\n *       x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and\n *       xi_end, the number of pixels added at the end of axis `i`.\n * @param strides Stride along each axis.\n * @param startVal The initial value to do pooling operations\n * @param processOp The operation to be performed on each element inside kernel\n * @param finalOp The operation to be performed over all elements inside kernel\n */\nexport function pool(\n    isGlobalOperator: boolean, input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[],\n    pads: number[], strides: number[], startVal: number, processOp: (a: number, b: number) => number,\n    finalOp: (a: number, b: number) => number): Tensor {\n  // adjust the shapes of input attributes\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, input.dims, kernelShape, strides, pads);\n\n  // calculate output shape based on input attributes.\n  const outputShape =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, input.dims, strides, kernelShape, pads, autoPad);\n\n  const kernelSize = ShapeUtil.size(kernelShape);\n  const kernelStrides = ShapeUtil.computeStrides(kernelShape);\n  const stridesRank = kernelStrides.length;\n  const rank = outputShape.length;\n\n  const outputSize = ShapeUtil.size(outputShape);\n  const output = new Tensor(outputShape, input.type);\n  const outputStride = ShapeUtil.computeStrides(outputShape);\n\n  for (let ind = 0; ind < outputSize; ind++) {\n    const curInd = ShapeUtil.offsetToIndices(ind, outputStride);\n    const startInd = curInd.slice(0);\n    const x = curInd.slice(0);\n    // calculate the start indices of kernel corresponding to current output indices\n    for (let i = 0; i < stridesRank; i++) {\n      startInd[rank - stridesRank + i] = curInd[rank - stridesRank + i] * strides[i];\n    }\n    let value = startVal;\n    let pad = 0;\n    let isPad = false;\n    // loop through elements within kernel\n    for (let i = 0; i < kernelSize; i++) {\n      const offset = ShapeUtil.offsetToIndices(i, kernelStrides);\n      isPad = false;\n      // \"Shift\" the kernel by the kernel start indices to loop through the kernel mapped to current output indices\n      for (let j = rank - stridesRank; j < rank; j++) {\n        x[j] = startInd[j] + offset[j - rank + stridesRank] - pads[j - 2];\n        // check if current indices fall in the padding area\n        if (x[j] >= input.dims[j] || x[j] < 0) {\n          pad++;\n          isPad = true;\n          break;\n        }\n      }\n      value = isPad ? value : processOp(value, input.get(x) as number);\n    }\n    value = countIncludePad ? finalOp(value, kernelSize) : finalOp(value, kernelSize - pad);\n    output.set(curInd, value);\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {ReduceBase} from '../../../ops/reduce-op';\nimport {Tensor} from '../../../tensor';\nimport {ReduceUtil, ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuReduceSum extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = reduceSum(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceSumSquare extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceSumSquare(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceLogSum extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceLogSum(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceMax extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceMax(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceMin extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceMin(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceMean extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceMean(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\n    return [output];\n  }\n}\n\nexport class CpuReduceProd extends ReduceBase {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reduceProd(inputs[0], ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length), this.keepDims);\n    return [output];\n  }\n}\n\n// Functions implementing specific reduce operations\nexport function reduceSum(input: Tensor, axes: number[], keepDims: boolean): Tensor {\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\n}\n\nexport function reduceSumSquare(input: Tensor, axes: number[], keepDims: boolean): Tensor {\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b * b, (a, b) => a + b);\n}\n\nexport function reduceLogSum(input: Tensor, axes: number[], keepDims: boolean): Tensor {\n  const output = ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\n  const length = output.floatData.length;\n  for (let i = 0; i < length; i++) {\n    output.floatData[i] = Math.log(output.floatData[i]);\n  }\n  return output;\n}\n\nexport function reduceMax(input: Tensor, axes: number[], keepDims: boolean): Tensor {\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => Math.max(a, b));\n}\n\nexport function reduceMin(input: Tensor, axes: number[], keepDims: boolean): Tensor {\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => Math.min(a, b));\n}\n\nexport function reduceMean(input: Tensor, axes: number[], keepDims: boolean): Tensor {\n  const output = ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\n  const outputDims = ReduceUtil.calcReduceShape(input.dims as number[], axes, keepDims);\n  const inputSize = ShapeUtil.size(input.dims);\n  const outputSize = ShapeUtil.size(outputDims);\n  const numItems = inputSize / outputSize;\n  const length = output.floatData.length;\n  for (let i = 0; i < length; i++) {\n    output.floatData[i] = output.floatData[i] / numItems;\n  }\n  return output;\n}\n\nexport function reduceProd(input: Tensor, axes: number[], keepDims: boolean): Tensor {\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a * b);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Reshape} from '../../../ops/reshape';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuReshape extends Reshape {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = reshape(inputs[0], inputs[1]);\n    return [output];\n  }\n}\n\nexport function reshape(x: Tensor, shape: Tensor): Tensor {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(x.dims, shape.integerData);\n  const output = new Tensor(reshapedDims, x.type);\n  const Y = output.floatData;\n  Y.set(x.floatData);\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Shape} from '../../../ops/shape';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\n// import { getLogger } from 'log4js';\n\nexport class CpuShape extends Shape {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return [shape(inputs[0])];\n  }\n}\n\nexport function shape(x: Tensor): Tensor {\n  const output = new Tensor([x.dims.length], 'int32');\n  const data = output.data;\n  for (let i = 0; i < data.length; ++i) {\n    data[i] = x.dims[i];\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Shape implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {}\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Slice, SliceV10} from '../../../ops/slice';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuSlice extends Slice {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = slice(inputs[0], this.starts, this.ends, this.axes);\n    return [output];\n  }\n}\n\nexport class CpuSliceV10 extends SliceV10 {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n      throw new Error(`currently non-1 steps is not supported for Slice`);\n    }\n    const starts = Array.from(inputs[1].integerData);\n    const ends = Array.from(inputs[2].integerData);\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n    const output = slice(inputs[0], starts, ends, axes);\n    return [output];\n  }\n}\n\nexport function slice(\n    x: Tensor, starts: ReadonlyArray<number>, ends: ReadonlyArray<number>, axes: ReadonlyArray<number>): Tensor {\n  if (axes.length === 0) {\n    axes = x.dims.map((val, ind) => ind);\n  }\n  axes = ShapeUtil.normalizeAxes(axes, x.dims.length);\n  starts = starts.map((start, ind) => {\n    if (start > x.dims[axes[ind]] - 1) {\n      return x.dims[axes[ind]];\n    }\n    return ShapeUtil.normalizeAxis(start, x.dims[axes[ind]]);\n  });\n  ends = ends.map((end, ind) => {\n    if (end > x.dims[axes[ind]] - 1) {\n      return x.dims[axes[ind]];\n    }\n    return ShapeUtil.normalizeAxis(end, x.dims[axes[ind]]);\n  });\n  const size: number[] = [];\n  const adjustedStarts: number[] = [];\n  axes.forEach((val, ind) => {\n    size[val] = ends[ind] - starts[ind];\n    adjustedStarts[val] = starts[ind];\n  });\n  for (let i = 0; i < x.dims.length; i++) {\n    size[i] = size[i] || x.dims[i];\n    adjustedStarts[i] = adjustedStarts[i] || 0;\n  }\n\n  const newDimsStride = ShapeUtil.computeStrides(size);\n  const oldDimsStride = ShapeUtil.computeStrides(x.dims ? x.dims : [x.data.length]);\n  const X = x.data;\n  const output = new Tensor(size, x.type);\n  const Y = output.data;\n  for (let i = 0; i < Y.length; ++i) {\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStride);\n    const oldLogicalIndex = newLogicalIndex.map((idx, j) => idx + adjustedStarts[j]);\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, oldDimsStride);\n    Y[i] = X[oldOffset];\n  }\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Softmax} from '../../../ops/softmax';\nimport {Tensor} from '../../../tensor';\nimport * as util from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuSoftmax extends Softmax {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = softmax(inputs[0], this.axis);\n    return [output];\n  }\n}\n\nexport function softmax(x: Tensor, axis: number): Tensor {\n  const inputDimensions = x.dims;\n  const inputRank = inputDimensions.length;\n\n  axis = util.ShapeUtil.normalizeAxis(axis, inputRank);\n  const N = util.ShapeUtil.sizeToDimension(inputDimensions, axis);\n  const D = util.ShapeUtil.sizeFromDimension(inputDimensions, axis);\n\n  const X = x.numberData;\n\n  const output = new Tensor(x.dims, x.type);\n  const Y = output.numberData;\n\n  for (let i = 0; i < N; i++) {\n    // find row offset\n    const offset = i * D;\n\n    // find max of each logical row\n    let max = Number.MIN_VALUE;\n    for (let j = 0; j < D; j++) {\n      if (X[offset + j] > max) {\n        max = X[offset + j];\n      }\n    }\n\n    // find normalization scale per row\n    let scale = 0;\n    for (let j = 0; j < D; j++) {\n      const value = X[offset + j] - max;\n      Y[offset + j] = Math.exp(value);\n      scale += Math.exp(value);\n    }\n\n    // perform the softmax normalization\n    for (let j = 0; j < D; j++) {\n      if (scale === 0) {\n        Y[offset + j] = 0;\n      } else {\n        Y[offset + j] /= scale;\n      }\n    }\n  }\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Squeeze} from '../../../ops/squeeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuSqueeze extends Squeeze {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = squeeze(inputs[0], this.axes);\n    return [output];\n  }\n}\n\nexport function squeeze(x: Tensor, axes: number[]): Tensor {\n  const outputDims = ShapeUtil.squeezeShape(x.dims, axes);\n  const output = new Tensor(outputDims, x.type);\n\n  const X = x.numberData;\n  const Y = output.numberData;\n\n  Y.set(X);\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Sum} from '../../../ops/sum';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuSum extends Sum {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = sum(inputs);\n    return [output];\n  }\n}\n\nexport function sum(x: Tensor[]): Tensor {\n  const output = new Tensor(x[0].dims, x[0].type);\n  const size = x[0].floatData.length;\n  const Y = output.floatData;\n  for (let i = 0; i < x.length; i++) {\n    const arr = x[i].floatData;\n    for (let j = 0; j < size; ++j) {\n      Y[j] += arr[j];\n    }\n  }\n\n  return output;\n}\n","import {Tile} from '../../../ops/tile';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuTile extends Tile {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\n    const output = tile(inputs[0], inputs[1]);\n    return [output];\n  }\n}\n\nexport function tile(x: Tensor, repeats: Tensor): Tensor {\n  const dims = x.dims ? x.dims : [x.data.length];\n  const rank = dims.length;\n  const newDims = new Array(rank);\n  for (let i = 0; i < rank; i++) {\n    newDims[i] = dims[i] * repeats.numberData[i];\n  }\n  const dimsStrides = ShapeUtil.computeStrides(dims);\n  const newDimsStrides = ShapeUtil.computeStrides(newDims);\n  const output = new Tensor(newDims, x.type);\n  const Y = output.numberData;\n  // TensorTransformUtils.createTypedArray(x.type, ShapeUtil.size(newDims));\n  const X = x.data;\n  for (let i = 0; i < Y.length; ++i) {\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStrides);\n    const oldLogicalIndex = new Array(rank);\n    for (let j = 0; j < rank; ++j) {\n      oldLogicalIndex[j] = newLogicalIndex[j] % x.dims[j];\n    }\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, dimsStrides);\n    Y[i] = X[oldOffset] as number;\n  }\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Transpose} from '../../../ops/transpose';\nimport {Tensor} from '../../../tensor';\nimport {arrayCopyHelper, ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuTranspose extends Transpose {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = transpose(inputs[0], this.perm);\n    return [output];\n  }\n}\n\nexport function transpose(x: Tensor, perm: number[]): Tensor {\n  const inputDims = x.dims;\n  const rank = inputDims.length;\n\n  // determine permutation to use\n  // if no permutation was specified in the attributes,\n  // the default is [rank-1, ..., 0]\n  let finalPerm = new Array<number>(rank);\n  if (perm.length === rank) {\n    finalPerm = perm;\n  } else {\n    for (let i = 0; i < rank; i++) {\n      finalPerm[i] = rank - i - 1;\n    }\n  }\n\n  const outputDims = new Array<number>(rank);\n  const stride = new Array<number>(rank);\n\n  // determine shape of output, as well as stride to be used\n  // stride[i] indicates the stride for the input-tensor dimension\n  // corresponding to the i-th dimension of the output\n  for (let i = 0; i < rank; i++) {\n    const inpDim = finalPerm[i];\n    outputDims[i] = inputDims[inpDim];\n    if (inpDim + 1 < rank) {\n      stride[i] = ShapeUtil.sizeFromDimension(inputDims, inpDim + 1);\n    } else {\n      stride[i] = 1;\n    }\n  }\n\n  const output = new Tensor(outputDims, x.type);\n\n  const X = x.floatData;\n  const Y = output.floatData;\n\n  // partition the permutation into a prefix and the largest suffix such that\n  // every axis i in the suffix is mapped to i.\n  let numAxesInPrefix = 0;  // number of axes in prefix\n  let suffixBlocksize = 1;  // product of dimensions in the suffix\n  let prefixBlocksize = 1;  // product of dimensions in the prefix\n  let isSuffix = true;\n  for (let i = rank - 1; i >= 0; --i) {\n    const inpAxis = finalPerm[i];\n    if (isSuffix && (inpAxis === i)) {\n      suffixBlocksize *= inputDims[inpAxis];\n    } else {\n      isSuffix = false;\n      prefixBlocksize *= inputDims[inpAxis];\n      ++numAxesInPrefix;\n    }\n  }\n\n  if (prefixBlocksize === 1) {\n    doTransposeSingleBlock(suffixBlocksize, Y, X);\n  } else if (suffixBlocksize === 1) {\n    doTransposeEltWise(numAxesInPrefix, outputDims, prefixBlocksize, stride, Y, X);\n  } else {\n    doTranspose(numAxesInPrefix, outputDims, prefixBlocksize, suffixBlocksize, stride, Y, X);\n  }\n\n  return output;\n}\n\n// doTranspose: copies source tensor to target, transposing elements.\n// the stride vector indicates the transposition.\nfunction doTranspose(\n    numAxes: number, targetDims: number[], numBlocks: number, numElementsInBlock: number, stride: number[],\n    target: Tensor.FloatType, source: Tensor.FloatType) {\n  const targetIndex = new Array<number>(numAxes).fill(0);\n\n  const startSourceIndex = 0;\n  let startTargetIndex = 0;\n\n  for (let i = 0; i < numBlocks; ++i) {\n    const sizeOffset = ShapeUtil.indicesToOffset(targetIndex, stride, numAxes);\n    arrayCopyHelper(target, source, startTargetIndex, startSourceIndex + sizeOffset, numElementsInBlock);\n\n    ShapeUtil.incrementIndex(targetIndex, targetDims, numAxes);\n    startTargetIndex += numElementsInBlock;\n  }\n}\n\n// doTransposeEltWise: specialization of DoTranspose for the\n// num_elts_in_block=1 case. copies source tensor to target, transposing\n// elements. The stride vector indicates the transposition.\nfunction doTransposeEltWise(\n    numAxes: number, targetDims: number[], numBlocks: number, stride: number[], target: Tensor.FloatType,\n    source: Tensor.FloatType) {\n  const targetIndex = new Array<number>(numAxes).fill(0);\n\n  let startTargetIndex = 0;\n\n  for (let i = 0; i < numBlocks; ++i) {\n    const sourceOffset = ShapeUtil.indicesToOffset(targetIndex, stride, numAxes);\n    target[startTargetIndex++] = source[sourceOffset];\n    ShapeUtil.incrementIndex(targetIndex, targetDims, numAxes);\n  }\n}\n\n// doTransposeSingleBlock: specialization of DoTranspose for the num_blocks=1\n// case. copies source tensor to target, transposing elements. The stride\n// vector indicates the transposition.\nfunction doTransposeSingleBlock(numElementsInBlock: number, target: Tensor.FloatType, source: Tensor.FloatType) {\n  arrayCopyHelper(target, source, 0, 0, numElementsInBlock);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Unsqueeze} from '../../../ops/unsqueeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuUnsqueeze extends Unsqueeze {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const output = unsqueeze(inputs[0], this.axes);\n    return [output];\n  }\n}\n\nexport function unsqueeze(x: Tensor, axes: number[]): Tensor {\n  const outputDims = ShapeUtil.unsqueezeShape(x.dims, axes);\n  const output = new Tensor(outputDims, x.type);\n\n  const X = x.numberData;\n  const Y = output.numberData;\n\n  Y.set(X);\n\n  return output;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Upsample} from '../../../ops/upsample';\nimport {Tensor} from '../../../tensor';\nimport {CpuInferenceHandler} from '../inference-handler';\n\nexport class CpuUpsample extends Upsample {\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const [roi, scales, yDims] = this.prepare(inputs);\n    const y = new Tensor(yDims, inputs[0].type);\n    this.compute(inputs[0], y, roi, scales);\n    return [y];\n  }\n\n  compute(x: Tensor, y: Tensor, roi: ReadonlyArray<number>, scales: ReadonlyArray<number>): void {\n    const xDims = x.dims;\n    const yDims = y.dims;\n    if (yDims.length !== xDims.length) {\n      throw new Error('Rank of input and output tensor should be same.');\n    }\n\n    if (y.size === 0) {\n      return;\n    }\n\n    if (xDims.length !== scales.length) {\n      throw new Error('input tensor\\'s dimension does not match the scales.');\n    }\n\n    if (roi.length !== 2 * xDims.length) {\n      throw new Error('size of roi array should be 2 * N where N is the rank of input tensor X.');\n    }\n\n    const noScale = xDims.every((d, i) => yDims[i] === d);\n    if (noScale) {\n      y.numberData.set(x.numberData);\n      return;\n    }\n\n    if (this.mode === 'nearest') {\n      upsampleNearest(\n          x.data, y.data, xDims, yDims, scales, roi, this.isResize, this.useExtrapolation, this.extrapolationValue,\n          this.useNearest2xOptimization, this.getOriginalCoordinate, this.getNearestPixel);\n    } else {\n      if (xDims.length !== 2 && xDims.length !== 4) {\n        throw new Error('\\'Linear\\' mode only support 2-D inputs or 4-D inputs');\n      }\n      const is2D = xDims.length === 2;\n      const batchSize = is2D ? 1 : xDims[0];\n      const numChannels = is2D ? 1 : xDims[1];\n      const inputHeight = is2D ? xDims[0] : xDims[2];\n      const inputWidth = is2D ? xDims[1] : xDims[3];\n      const outputHeight = is2D ? yDims[0] : yDims[2];\n      const outputWidth = is2D ? yDims[1] : yDims[3];\n\n      if (this.mode === 'linear') {\n        upsampleBilinear(\n            batchSize, numChannels, inputHeight, inputWidth, outputHeight, outputWidth, is2D ? scales[0] : scales[2],\n            is2D ? scales[1] : scales[3], roi, this.useExtrapolation, this.extrapolationValue, x.numberData,\n            y.numberData, this.getOriginalCoordinate);\n      } else {\n        upsampleBiCubic(\n            batchSize, numChannels, inputHeight, inputWidth, outputHeight, outputWidth, is2D ? scales[0] : scales[2],\n            is2D ? scales[1] : scales[3], this.cubicCoefficientA, this.useExtrapolation, this.extrapolationValue,\n            this.excludeOutside, roi, x.numberData, y.numberData, this.getOriginalCoordinate);\n      }\n    }\n  }\n}\n\nfunction upsampleNearest(\n    xData: Tensor.DataTypeMap[Tensor.DataType], yData: Tensor.DataTypeMap[Tensor.DataType],\n    xDims: ReadonlyArray<number>, yDims: ReadonlyArray<number>, scales: ReadonlyArray<number>,\n    roi: ReadonlyArray<number>, isResize: boolean, extrapolationEnabled: boolean, extrapolationValue: number,\n    useNearest2xOptimization: boolean, getOriginalCoordinate: Upsample.GetOriginalCoordinateFunc,\n    getNearestPixel: Upsample.GetNearestPixelFunc) {\n  const dim = xDims.length;\n\n  if (useNearest2xOptimization && dim === 4 && scales[0] === 1 && scales[1] === 1 && scales[2] === 2 &&\n      scales[3] === 2) {\n    // TODO: 2x optimization\n  }\n\n  const inputDimCounter = new Array<number>(dim).fill(0);\n  const inputDimFactor = new Array<number>(dim);\n  const useExtrapolationValue = new Array<boolean>(dim);\n  inputDimFactor[dim - 1] = 1;  // initialize dimension factor\n  for (let i = dim - 2; i >= 0; i--) {\n    inputDimFactor[i] = inputDimFactor[i + 1] * xDims[i + 1];\n  }\n\n  let yIdx = 0;\n  let xIdx = 0;\n\n  const oneDimensionProcessor = (dimIdx: number, yDim: number) => {\n    useExtrapolationValue[dimIdx] = false;\n    const originalIdx =\n        getOriginalCoordinate(yDim, scales[dimIdx], yDims[dimIdx], xDims[dimIdx], roi[dimIdx], roi[dim + dimIdx]);\n    if (extrapolationEnabled && (originalIdx < 0 || originalIdx > xDims[dimIdx] - 1)) {\n      useExtrapolationValue[dimIdx] = true;\n    }\n    let currentInputDimCounter = getNearestPixel(originalIdx, scales[dimIdx] < 1);\n    currentInputDimCounter = Math.max(0, Math.min(currentInputDimCounter, (xDims[dimIdx] - 1)));\n    if (currentInputDimCounter !== inputDimCounter[dimIdx]) {\n      xIdx += (currentInputDimCounter - inputDimCounter[dimIdx]) * inputDimFactor[dimIdx];\n      inputDimCounter[dimIdx] = currentInputDimCounter;\n    }\n  };\n\n  if (dim === 1) {\n    for (let yDim0 = 0; yDim0 < yDims[0]; yDim0++) {\n      oneDimensionProcessor(0, yDim0);\n      yData[yIdx++] = useExtrapolationValue[0] ? extrapolationValue : xData[xIdx];\n    }\n\n  } else if (dim === 2) {\n    for (let yDim0 = 0; yDim0 < yDims[0]; yDim0++) {\n      oneDimensionProcessor(0, yDim0);\n      for (let yDim1 = 0; yDim1 < yDims[1]; yDim1++) {\n        oneDimensionProcessor(1, yDim1);\n        yData[yIdx++] = useExtrapolationValue.some(i => i) ? extrapolationValue : xData[xIdx];\n      }\n    }\n\n  } else if (dim === 3) {\n    for (let yDim0 = 0; yDim0 < yDims[0]; yDim0++) {\n      oneDimensionProcessor(0, yDim0);\n      for (let yDim1 = 0; yDim1 < yDims[1]; yDim1++) {\n        oneDimensionProcessor(1, yDim1);\n        for (let yDim2 = 0; yDim2 < yDims[2]; yDim2++) {\n          oneDimensionProcessor(2, yDim2);\n          yData[yIdx++] = useExtrapolationValue.some(i => i) ? extrapolationValue : xData[xIdx];\n        }\n      }\n    }\n\n  } else if (dim === 4) {\n    for (let yDim0 = 0; yDim0 < yDims[0]; yDim0++) {\n      oneDimensionProcessor(0, yDim0);\n      for (let yDim1 = 0; yDim1 < yDims[1]; yDim1++) {\n        oneDimensionProcessor(1, yDim1);\n        for (let yDim2 = 0; yDim2 < yDims[2]; yDim2++) {\n          oneDimensionProcessor(2, yDim2);\n          for (let yDim3 = 0; yDim3 < yDims[3]; yDim3++) {\n            oneDimensionProcessor(3, yDim3);\n            yData[yIdx++] = useExtrapolationValue.some(i => i) ? extrapolationValue : xData[xIdx];\n          }\n        }\n      }\n    }\n  } else {\n    const outputDimCounter = new Array<number>(dim).fill(0);\n    outputDimCounter[dim - 1] = -1;\n\n    for (; yIdx < yData.length; yIdx++) {\n      for (let dimIdx = dim - 1; dimIdx >= 0; dimIdx--) {\n        if (++outputDimCounter[dimIdx] < yDims[dimIdx]) {\n          let currentInputDimCounter = 0;\n          const originalIdx = getOriginalCoordinate(\n              outputDimCounter[dimIdx], scales[dimIdx], yDims[dimIdx], xDims[dimIdx], roi[dimIdx], roi[dim + dimIdx]);\n          currentInputDimCounter = getNearestPixel(originalIdx, scales[dimIdx] < 1);\n          currentInputDimCounter = Math.max(0, Math.min(currentInputDimCounter, (xDims[dimIdx] - 1)));\n\n          if (currentInputDimCounter !== inputDimCounter[dimIdx]) {\n            xIdx += (currentInputDimCounter - inputDimCounter[dimIdx]) * inputDimFactor[dimIdx];\n            inputDimCounter[dimIdx] = currentInputDimCounter;\n          }\n          break;\n        } else {\n          outputDimCounter[dimIdx] = 0;\n          xIdx += (0 - inputDimCounter[dimIdx]) * inputDimFactor[dimIdx];\n          inputDimCounter[dimIdx] = 0;\n        }\n      }\n      yData[yIdx] = xData[xIdx];\n    }\n  }\n}\n\nfunction upsampleBilinear(\n    batchSize: number, numChannels: number, inputHeight: number, inputWidth: number, outputHeight: number,\n    outputWidth: number, heightScale: number, widthScale: number, roi: ReadonlyArray<number>, useExtrapolation: boolean,\n    extrapolationValue: number, xData: Tensor.NumberType, yData: Tensor.NumberType,\n    getOriginalCoordinate: Upsample.GetOriginalCoordinateFunc) {\n  const yOriginal: number[] = [];\n  const xOriginal: number[] = [];\n\n  const inputWidthMulY1 = new Array<number>(outputHeight);\n  const inputWidthMulY2 = new Array<number>(outputHeight);\n  const inX1 = new Array<number>(outputWidth);\n  const inX2 = new Array<number>(outputWidth);\n  const dy1 = new Array<number>(outputHeight);\n  const dy2 = new Array<number>(outputHeight);\n  const dx1 = new Array<number>(outputWidth);\n  const dx2 = new Array<number>(outputWidth);\n\n  const roiYStart = roi.length / 2 - 2;\n  const roiYEnd = roi.length - 2;\n  for (let y = 0; y < outputHeight; ++y) {\n    let inY = getOriginalCoordinate(y, heightScale, outputHeight, inputHeight, roi[roiYStart], roi[roiYEnd]);\n    yOriginal.push(inY);\n    inY = Math.max(0, Math.min(inY, inputHeight - 1));\n\n    const inY1 = Math.min(Math.floor(inY), inputHeight - 1);\n    const inY2 = Math.min(inY1 + 1, inputHeight - 1);\n\n    if (inY1 === inY2) {\n      dy1[y] = 0.5;\n      dy2[y] = 0.5;\n    } else {\n      dy1[y] = Math.abs(inY - inY1);\n      dy2[y] = Math.abs(inY - inY2);\n    }\n\n    inputWidthMulY1[y] = inputWidth * inY1;\n    inputWidthMulY2[y] = inputWidth * inY2;\n  }\n\n  const roiXStart = roi.length / 2 - 1;\n  const roiXEnd = roi.length - 1;\n  for (let x = 0; x < outputWidth; ++x) {\n    let inX = getOriginalCoordinate(x, widthScale, outputWidth, inputWidth, roi[roiXStart], roi[roiXEnd]);\n    xOriginal.push(inX);\n    inX = Math.max(0, Math.min(inX, inputWidth - 1));\n\n    inX1[x] = Math.min(Math.floor(inX), inputWidth - 1);\n    inX2[x] = Math.min(inX1[x] + 1, inputWidth - 1);\n\n    if (inX1[x] === inX2[x]) {\n      dx1[x] = 0.5;\n      dx2[x] = 0.5;\n    } else {\n      dx1[x] = Math.abs(inX - inX1[x]);\n      dx2[x] = Math.abs(inX - inX2[x]);\n    }\n  }\n\n  let xOffset = 0;\n  let yOffset = 0;\n  for (let n = 0; n < batchSize; ++n) {\n    for (let c = 0; c < numChannels; ++c) {\n      for (let y = 0; y < outputHeight; ++y) {\n        for (let x = 0; x < outputWidth; ++x) {\n          if (useExtrapolation &&\n              ((yOriginal[y] < 0 || yOriginal[y] > inputHeight - 1) ||\n               (xOriginal[x] < 0 || xOriginal[x] > inputWidth - 1))) {\n            yData[outputWidth * y + x] = extrapolationValue;\n            continue;\n          }\n\n          const x11 = xData[xOffset + inputWidthMulY1[y] + inX1[x]];\n          const x21 = xData[xOffset + inputWidthMulY1[y] + inX2[x]];\n          const x12 = xData[xOffset + inputWidthMulY2[y] + inX1[x]];\n          const x22 = xData[xOffset + inputWidthMulY2[y] + inX2[x]];\n\n          yData[yOffset + outputWidth * y + x] =\n              (dx2[x] * dy2[y] * x11 + dx1[x] * dy2[y] * x21 + dx2[x] * dy1[y] * x12 + dx1[x] * dy1[y] * x22);\n        }\n      }\n      xOffset += inputHeight * inputWidth;\n      yOffset += outputWidth * outputHeight;\n    }\n  }\n}\n\nconst CUBIC_MODE_GRID_LENGTH = 4;\n\nfunction getCubicCoeffs(s: number, cubicCoeffA = -0.75): number[] {\n  s = Math.abs(s);\n  return [\n    (((cubicCoeffA * (s + 1) - 5 * cubicCoeffA) * (s + 1) + 8 * cubicCoeffA) * (s + 1) - 4 * cubicCoeffA),\n    (((cubicCoeffA + 2) * s - (cubicCoeffA + 3)) * s * s + 1),\n    (((cubicCoeffA + 2) * (1 - s) - (cubicCoeffA + 3)) * (1 - s) * (1 - s) + 1),\n    (((cubicCoeffA * (2 - s) - 5 * cubicCoeffA) * (2 - s) + 8 * cubicCoeffA) * (2 - s) - 4 * cubicCoeffA)\n  ];\n}\n\nfunction getDataForCoordinate(\n    xData: Tensor.NumberType, x: number, y: number, inputHeight: number, inputWidth: number): number {\n  x = Math.max(0, Math.min(x, inputWidth - 1));\n  y = Math.max(0, Math.min(y, inputHeight - 1));\n  return xData[y * inputWidth + x];\n}\n\nfunction cubicInterpolation1D(\n    xData: Tensor.NumberType, x: number, y: number, inputHeight: number, inputWidth: number, coeffArray: number[],\n    coeffSum: number, cache: Map<number, number>): number {\n  // When calculating cubic interpolation we move the 4*4 grid across the original data and therefore there is\n  // opportunity to cache the results for previously seen combinations.\n  // Check if the result is already available in the cache\n  const gridStartPosition = (y) * inputWidth + (x - 1);\n  let result = cache.get(gridStartPosition);\n  if (result !== undefined) {\n    return result;\n  }\n\n  // get the neighbors in 1D and find interpolation for this dimension\n  // for 1D cubic interpolation 4 samples are used. 2 on the left and 2 on the right of x\n  result = 0;\n  for (let i = 0, j = -1; i < CUBIC_MODE_GRID_LENGTH; i++, j++) {\n    const originalData = getDataForCoordinate(xData, x + j, y, inputHeight, inputWidth);\n    result += coeffArray[i] / coeffSum * originalData;\n  }\n  cache.set(gridStartPosition, result);\n\n  return result;\n}\n\nfunction upsampleBiCubic(\n    batchSize: number, numChannels: number, inputHeight: number, inputWidth: number, outputHeight: number,\n    outputWidth: number, heightScale: number, widthScale: number, cubicCoefficientA: number, useExtrapolation: boolean,\n    extrapolationValue: number, excludeOutside: boolean, roi: ReadonlyArray<number>, xData: Tensor.NumberType,\n    yData: Tensor.NumberType, getOriginalCoordinate: Upsample.GetOriginalCoordinateFunc) {\n  const yOriginal: number[] = [];\n  const xOriginal: number[] = [];\n  const cubicCoeffs = new Map<number, number[]>();\n  const coeffTo1DinterpolationMap = new Map<number, Map<number, number>>();\n  const roiYStart = roi.length / 2 - 2;\n  const roiYEnd = roi.length - 2;\n  const roiXStart = roi.length / 2 - 1;\n  const roiXEnd = roi.length - 1;\n\n  // generate coefficients in y direction\n  for (let y = 0; y < outputHeight; ++y) {\n    const inY = getOriginalCoordinate(y, heightScale, outputHeight, inputHeight, roi[roiYStart], roi[roiYEnd]);\n    yOriginal.push(inY);\n    const s = yOriginal[y] - Math.floor(yOriginal[y]);\n    if (!cubicCoeffs.has(s)) {\n      cubicCoeffs.set(s, getCubicCoeffs(s, cubicCoefficientA));\n      coeffTo1DinterpolationMap.set(s, new Map());\n    }\n  }\n\n  // generate coefficients in x direction\n  for (let x = 0; x < outputWidth; ++x) {\n    const inX = getOriginalCoordinate(x, widthScale, outputWidth, inputWidth, roi[roiXStart], roi[roiXEnd]);\n    xOriginal.push(inX);\n    const s = xOriginal[x] - Math.floor(xOriginal[x]);\n    if (!cubicCoeffs.has(s)) {\n      cubicCoeffs.set(s, getCubicCoeffs(s, cubicCoefficientA));\n      coeffTo1DinterpolationMap.set(s, new Map());\n    }\n  }\n\n  // setup up temp arrays to hold coefficients when exclude_outside is set to true\n  const yCoeffHolder = new Array<number>(CUBIC_MODE_GRID_LENGTH);\n  const xCoeffHolder = new Array<number>(CUBIC_MODE_GRID_LENGTH);\n  let yCoeffSum = 1;\n  let xCoeffSum = 1;\n\n  for (let n = 0; n < batchSize; n++) {\n    for (let c = 0; c < numChannels; c++) {\n      for (let y = 0; y < outputHeight; y++) {\n        const inY = yOriginal[y];\n\n        // when use_extrapolation is set and original index is out of the dim range\n        // then use extrapolation_value as the output value.\n        if (useExtrapolation && (inY < 0 || inY > inputHeight - 1)) {\n          for (let x = 0; x < outputWidth; x++) {\n            yData[y * outputWidth + x] = extrapolationValue;\n          }\n          continue;\n        }\n\n        const yInt = Math.floor(inY);\n        const sY = inY - yInt;\n        const coeffY = excludeOutside ? yCoeffHolder : cubicCoeffs.get(sY)!;\n        yCoeffSum = 1;\n\n        if (excludeOutside) {\n          // When true, the weight of sampling locations outside the grid will be set to 0\n          // and the weight will be renormalized so that their sum is 1.0\n          yCoeffSum = 0;\n          const origYCoeffs = cubicCoeffs.get(sY)!;\n          for (let i = 0, yVal = yInt - 1; yVal <= yInt + 2; yVal++, i++) {\n            yCoeffHolder[i] = (yVal < 0 || yVal >= inputHeight) ? 0.0 : origYCoeffs[i];\n            yCoeffSum += yCoeffHolder[i];\n          }\n        }\n\n        for (let x = 0; x < outputWidth; x++) {\n          const inX = xOriginal[x];\n\n          // when use_extrapolation is set and original index is out of the dim range\n          // then use extrapolation_value as the output value.\n          if (useExtrapolation && (inX < 0 || inX > inputWidth - 1)) {\n            yData[y * outputWidth + x] = extrapolationValue;\n            continue;\n          }\n\n          const xInt = Math.floor(inX);\n          const sX = inX - xInt;\n          const coeffX = excludeOutside ? xCoeffHolder : cubicCoeffs.get(sX)!;\n          xCoeffSum = 1;\n\n          if (excludeOutside) {\n            // When true, the weight of sampling locations outside the grid will be set to 0\n            // and the weight will be renormalized so that their sum is 1.0\n            xCoeffSum = 0;\n            const origXCoeffs = cubicCoeffs.get(sX)!;\n            for (let i = 0, xVal = xInt - 1; xVal <= xInt + 2; xVal++, i++) {\n              xCoeffHolder[i] = (xVal < 0 || xVal >= inputWidth) ? 0.0 : origXCoeffs[i];\n              xCoeffSum += xCoeffHolder[i];\n            }\n          }\n\n          // Compute cubic interpolation in x dimension using the x coefficients.\n          // From the result of cubic interpolation in x dim, compute cubic interpolation in y dimension\n          const interpolationResultCache = coeffTo1DinterpolationMap.get(sX)!;\n          let result = 0;\n          for (let yVal = yInt - 1, i = 0; yVal <= yInt + 2; yVal++, i++) {\n            const xResult = cubicInterpolation1D(\n                xData, xInt, yVal, inputHeight, inputWidth, coeffX, xCoeffSum, interpolationResultCache);\n            result += xResult * coeffY[i] / yCoeffSum;\n          }\n\n          yData[y * outputWidth + x] = result;\n        }\n      }\n\n      xData = xData.subarray(inputHeight * inputWidth);\n      yData = yData.subarray(outputHeight * outputWidth);\n\n      // clear the cache when moving to the next channel\n      coeffTo1DinterpolationMap.clear();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport * as platform from 'platform';\n\nimport {Backend as BackendInterface} from '../api/onnx';\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\nimport * as wasmBinding from '../wasm-binding';\n\nimport {WasmSessionHandler} from './wasm/session-handler';\n\nexport let bindingInitPromise: Promise<void>|undefined;\n\ntype WasmOptions = BackendInterface.WasmOptions;\n\nexport class WasmBackend implements Backend, WasmOptions {\n  disabled?: boolean;\n  worker: number;\n  cpuFallback: boolean;\n  initTimeout: number;\n  constructor() {\n    // default parameters that users can override using the onnx global object\n\n    // by default fallback to pure JS cpu ops if not resolved in wasm backend\n    this.cpuFallback = true;\n\n    this.worker = defaultNumWorkers();\n\n    this.initTimeout = 5000;\n  }\n  async initialize(): Promise<boolean> {\n    checkIfNumWorkersIsValid(this.worker);\n    const init = await this.isWasmSupported();\n    if (!init) {\n      return false;\n    }\n    return true;\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WasmSessionHandler(this, context, this.cpuFallback);\n  }\n  dispose(): void {}\n\n  async isWasmSupported(): Promise<boolean> {\n    try {\n      await wasmBinding.init(this.worker, this.initTimeout);\n      return true;\n    } catch (e) {\n      Logger.warning('WebAssembly', `Unable to initialize WebAssembly backend. ${e}`);\n      return false;\n    }\n  }\n}\n\nfunction defaultNumWorkers(): number {\n  if (typeof navigator !== 'undefined' && navigator) {\n    // by default use ([navigator.hardwareConcurrency / 2] - 1) workers\n    if (typeof navigator.hardwareConcurrency === 'number') {\n      return Math.max(Math.ceil(navigator.hardwareConcurrency / 2) - 1, 0);\n    }\n\n    // if object 'navigator' exists, but 'navigator.hardwareConcurrency' does not. This may mean:\n    // - The environment is Safari (macOS/iOS), or\n    // - it's not any mainstream browser.\n    if (platform.name === 'Safari') {\n      if (platform.os && (platform.os.family === 'iOS' || platform.os.family === 'OS X')) {\n        return 1;\n      }\n    }\n  }\n\n  return 0;\n}\n\nfunction checkIfNumWorkersIsValid(worker: number) {\n  if (!Number.isFinite(worker) || Number.isNaN(worker)) {\n    throw new Error(`${worker} is not valid number of workers`);\n  }\n  if (!Number.isInteger(worker)) {\n    throw new Error(`${worker} is not an integer and hence not valid number of workers`);\n  }\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\ndeclare interface OnnxWasmBindingJs {\n  (self: OnnxWasmBindingJs): Promise<void>;\n\n  _malloc: (ptr: number) => number;\n  _free: (ptr: number) => void;\n\n  buffer: ArrayBuffer;\n\n  HEAP8: Int8Array;\n  HEAP16: Int16Array;\n  HEAP32: Int32Array;\n  HEAPU8: Uint8Array;\n  HEAPU16: Uint16Array;\n  HEAPU32: Uint32Array;\n  HEAPF32: Float32Array;\n  HEAPF64: Float64Array;\n}\n\n// an interface to define argument handling\nexport interface WasmCallArgumentTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  float64: number;\n  boolptr: ReadonlyArray<boolean>|Uint8Array;\n  int32ptr: ReadonlyArray<number>|Uint32Array|Int32Array|null;\n  float32ptr: ReadonlyArray<number>|Int32Array|Uint32Array|Float32Array|null;\n  float64ptr: ReadonlyArray<number>|Float64Array|null;\n}\n\n// some types related to arguments\nexport type WasmCallArgumentType = keyof WasmCallArgumentTypeMap;\nexport type WasmCallArgumentDataType = WasmCallArgumentTypeMap[WasmCallArgumentType];\n\nexport type WasmCallArgumentPass = 'in'|'out'|'inout';\n\nexport type WasmCallArgument = [WasmCallArgumentDataType, WasmCallArgumentType, WasmCallArgumentPass?];\n\n// an interface to deal with performance data related to Wasm function calls\nexport interface PerformanceData {\n  startTime?: number;\n  endTime?: number;\n\n  startTimeFunc?: number;\n  endTimeFunc?: number;\n}\n\n// some global parameters to deal with wasm binding initialization\nlet binding: OnnxWasmBindingJs|undefined;\nlet initialized = false;\nlet initializing = false;\n\n/**\n * initialize the WASM instance.\n *\n * this function should be called before any other calls to the WASM binding.\n */\nexport function init(): Promise<void> {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error(`multiple calls to 'init()' detected.`);\n  }\n\n  initializing = true;\n\n  return new Promise<void>((resolve, reject) => {\n    // tslint:disable-next-line:no-require-imports\n    binding = require('../dist/onnx-wasm') as OnnxWasmBindingJs;\n    binding(binding).then(\n        () => {\n          // resolve init() promise\n          resolve();\n          initializing = false;\n          initialized = true;\n        },\n        err => {\n          initializing = false;\n          reject(err);\n        });\n  });\n}\n\n// class that deals with Wasm data interop and method calling\nexport class WasmBinding {\n  protected ptr8: number;\n  protected numBytesAllocated: number;\n  protected constructor() {\n    this.ptr8 = 0;\n    this.numBytesAllocated = 0;\n  }\n\n  /**\n   * ccall in current thread\n   * @param functionName\n   * @param params\n   */\n  ccall(functionName: string, ...params: WasmCallArgument[]): PerformanceData {\n    if (!initialized) {\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\n    }\n    const startTime = now();\n\n    const offset: number[] = [];\n    const size = WasmBinding.calculateOffsets(offset, params);\n    if (size > this.numBytesAllocated) {\n      this.expandMemory(size);\n    }\n    WasmBinding.ccallSerialize(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size), offset, params);\n\n    const startTimeFunc = now();\n    this.func(functionName, this.ptr8);\n    const endTimeFunc = now();\n\n    WasmBinding.ccallDeserialize(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size), offset, params);\n    const endTime = now();\n\n    return {startTime, endTime, startTimeFunc, endTimeFunc};\n  }\n\n  // raw ccall method  without invoking ccallSerialize() and ccallDeserialize()\n  // user by ccallRemote() in the web-worker\n  ccallRaw(functionName: string, data: Uint8Array): PerformanceData {\n    if (!initialized) {\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\n    }\n    const startTime = now();\n\n    const size = data.byteLength;\n    if (size > this.numBytesAllocated) {\n      this.expandMemory(size);\n    }\n\n    // copy input memory (data) to WASM heap\n    binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size).set(data);\n\n    const startTimeFunc = now();\n    this.func(functionName, this.ptr8);\n    const endTimeFunc = now();\n\n    // copy Wasm heap to output memory (data)\n    data.set(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size));\n    const endTime = now();\n\n    return {startTime, endTime, startTimeFunc, endTimeFunc};\n  }\n\n  protected func(functionName: string, ptr8: number): void {\n    // tslint:disable-next-line:no-any\n    const func = (binding as any)[functionName] as (data: number) => void;\n    func(ptr8);\n  }\n\n  static calculateOffsets(offset: number[], params: WasmCallArgument[]): number {\n    // calculate size and offset\n    let size = 4 + 4 * params.length;\n    for (let i = 0; i < params.length; i++) {\n      const param = params[i];\n      const paramData = param[0];\n      const paramType = param[1];\n      const paramPass = param[2];\n\n      let len = 0;\n      switch (paramType) {\n        case 'bool':\n        case 'int32':\n        case 'float32':\n          len = 4;\n          break;\n        case 'float64':\n          len = 8;\n          break;\n        case 'boolptr':\n          if (!paramData) {\n            // deal with nullptr\n            offset.push(0);\n            continue;\n          } else if (Array.isArray(paramData) || ArrayBuffer.isView(paramData)) {\n            len = 4 * Math.ceil(paramData.length / 4);\n          } else {\n            throw new Error(`boolptr requires boolean array or Uint8Array`);\n          }\n          break;\n        case 'int32ptr':\n        case 'float32ptr':\n          if (!paramData) {\n            // deal with nullptr\n            offset.push(0);\n            continue;\n          } else if (Array.isArray(paramData)) {\n            if (paramPass === 'inout' || paramPass === 'out') {\n              throw new TypeError(`inout/out parameters must be ArrayBufferView for ptr types.`);\n            }\n            len = paramData.length * 4;\n          } else if (ArrayBuffer.isView(paramData)) {\n            len = paramData.byteLength;\n          } else {\n            throw new TypeError(`unsupported data type in 'ccall()'`);\n          }\n          break;\n        default:\n          throw new Error(`not supported parameter type: ${paramType}`);\n      }\n\n      offset.push(size);\n      size += len;\n    }\n\n    return size;\n  }\n\n  // tranfer data parameters (in/inout) to emscripten heap for ccall()\n  static ccallSerialize(heapU8: Uint8Array, offset: number[], params: WasmCallArgument[]) {\n    const heap32 = new Int32Array(heapU8.buffer, heapU8.byteOffset);\n    const heapU32 = new Uint32Array(heapU8.buffer, heapU8.byteOffset);\n    const heapF32 = new Float32Array(heapU8.buffer, heapU8.byteOffset);\n\n    heapU32[0] = params.length;\n\n    for (let i = 0; i < params.length; i++) {\n      const param = params[i];\n      const paramData = param[0];\n      const paramType = param[1];\n      const paramPass = param[2];\n      const offset8 = offset[i];\n      const offset32 = offset8 >> 2;\n\n      heapU32[i + 1] = offset8;\n\n      if (paramPass === 'out' || offset8 === 0) {\n        continue;\n      }\n\n      switch (paramType) {\n        case 'bool':\n          heapU8[offset8] = (paramData as WasmCallArgumentTypeMap['bool']) === true ? 1 : 0;\n          break;\n        case 'int32':\n          heap32[offset32] = paramData as number;\n          break;\n        case 'float32':\n          heapF32[offset32] = paramData as number;\n          break;\n        case 'boolptr':\n          const boolArray = paramData as WasmCallArgumentTypeMap['boolptr'];\n          // This will work for both Uint8Array as well as ReadonlyArray<boolean>\n          heapU8.subarray(offset8, offset8 + boolArray.length).set(paramData as Uint8Array);\n          break;\n        case 'int32ptr':\n          const int32Array = (paramData as WasmCallArgumentTypeMap['int32ptr'])!;\n          heap32.subarray(offset32, offset32 + int32Array.length).set(int32Array);\n          break;\n        case 'float32ptr':\n          const float32Array = (paramData as WasmCallArgumentTypeMap['float32ptr'])!;\n          heapF32.subarray(offset32, offset32 + float32Array.length).set(float32Array);\n          break;\n        default:\n          throw new Error(`not supported parameter type: ${paramType}`);\n      }\n    }\n  }\n\n  // retrieve data parameters (in/inout) from emscripten heap after ccall()\n  static ccallDeserialize(buffer: Uint8Array, offset: number[], params: WasmCallArgument[]) {\n    const heapF32 = new Float32Array(buffer.buffer, buffer.byteOffset);\n    const heapU8 = new Uint8Array(buffer.buffer, buffer.byteOffset);\n\n    for (let i = 0; i < params.length; i++) {\n      const param = params[i];\n      const paramData = param[0];\n      const paramType = param[1];\n      const paramPass = param[2];\n      const offset8 = offset[i];\n      // const offset16 = offset8 >> 1;\n      const offset32 = offset8 >> 2;\n      // const offset64 = offset8 >> 3;\n\n      if (paramPass !== 'out' && paramPass !== 'inout') {\n        continue;\n      }\n\n      switch (paramType) {\n        case 'float32ptr':\n          const float32Array = (paramData as Float32Array);\n          float32Array.set(heapF32.subarray(offset32, offset32 + float32Array.length));\n          break;\n        case 'boolptr':\n          const boolArray = (paramData as Uint8Array);\n          boolArray.set(heapU8.subarray(offset8, offset8 + boolArray.length));\n          break;\n        default:\n          throw new Error(`not supported parameter type: ${paramType}`);\n      }\n    }\n  }\n\n  // function for defining memory allocation strategy\n  private expandMemory(minBytesRequired: number) {\n    // free already held memory if applicable\n    if (this.ptr8 !== 0) {\n      binding!._free(this.ptr8);\n    }\n    // current simplistic strategy is to allocate 2 times the minimum bytes requested\n    this.numBytesAllocated = 2 * minBytesRequired;\n    this.ptr8 = binding!._malloc(this.numBytesAllocated);\n    if (this.ptr8 === 0) {\n      throw new Error('Unable to allocate requested amount of memory. Failing.');\n    }\n  }\n\n  dispose(): void {\n    if (!initialized) {\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\n    }\n    if (this.ptr8 !== 0) {\n      binding!._free(this.ptr8);\n    }\n  }\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","\nvar Module = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(Module) {\n  Module = Module || {};\n\nvar Module=typeof Module!==\"undefined\"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);quit_=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){read_=function shell_read(f){return read(f)}}readBinary=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){arguments_=scriptArgs}else if(typeof arguments!=\"undefined\"){arguments_=arguments}if(typeof quit===\"function\"){quit_=function(status){quit(status)}}if(typeof print!==\"undefined\"){if(typeof console===\"undefined\")console={};console.log=print;console.warn=console.error=typeof printErr!==\"undefined\"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var STACK_ALIGN=16;function dynamicAlloc(size){var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;if(end>_emscripten_get_heap_size()){abort()}HEAP32[DYNAMICTOP_PTR>>2]=end;return ret}function getNativeTypeSize(type){switch(type){case\"i1\":case\"i8\":return 1;case\"i16\":return 2;case\"i32\":return 4;case\"i64\":return 8;case\"float\":return 4;case\"double\":return 8;default:{if(type[type.length-1]===\"*\"){return 4}else if(type[0]===\"i\"){var bits=Number(type.substr(1));assert(bits%8===0,\"getNativeTypeSize invalid bits \"+bits+\", type \"+type);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}}function convertJsFunctionToWasm(func,sig){if(typeof WebAssembly.Function===\"function\"){var typeNames={\"i\":\"i32\",\"j\":\"i64\",\"f\":\"f32\",\"d\":\"f64\"};var type={parameters:[],results:sig[0]==\"v\"?[]:[typeNames[sig[0]]]};for(var i=1;i<sig.length;++i){type.parameters.push(typeNames[sig[i]])}return new WebAssembly.Function(type,func)}var typeSection=[1,0,1,96];var sigRet=sig.slice(0,1);var sigParam=sig.slice(1);var typeCodes={\"i\":127,\"j\":126,\"f\":125,\"d\":124};typeSection.push(sigParam.length);for(var i=0;i<sigParam.length;++i){typeSection.push(typeCodes[sigParam[i]])}if(sigRet==\"v\"){typeSection.push(0)}else{typeSection=typeSection.concat([1,typeCodes[sigRet]])}typeSection[1]=typeSection.length-2;var bytes=new Uint8Array([0,97,115,109,1,0,0,0].concat(typeSection,[2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0]));var module=new WebAssembly.Module(bytes);var instance=new WebAssembly.Instance(module,{\"e\":{\"f\":func}});var wrappedFunc=instance.exports[\"f\"];return wrappedFunc}var freeTableIndexes=[];function addFunctionWasm(func,sig){var table=wasmTable;var ret;if(freeTableIndexes.length){ret=freeTableIndexes.pop()}else{ret=table.length;try{table.grow(1)}catch(err){if(!(err instanceof RangeError)){throw err}throw\"Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.\"}}try{table.set(ret,func)}catch(err){if(!(err instanceof TypeError)){throw err}assert(typeof sig!==\"undefined\",\"Missing signature argument to addFunction\");var wrapped=convertJsFunctionToWasm(func,sig);table.set(ret,wrapped)}return ret}function removeFunctionWasm(index){freeTableIndexes.push(index)}var funcWrappers={};function dynCall(sig,ptr,args){if(args&&args.length){return Module[\"dynCall_\"+sig].apply(null,[ptr].concat(args))}else{return Module[\"dynCall_\"+sig].call(null,ptr)}}var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}function setValue(ptr,value,type,noSafe){type=type||\"i8\";if(type.charAt(type.length-1)===\"*\")type=\"i32\";switch(type){case\"i1\":HEAP8[ptr>>0]=value;break;case\"i8\":HEAP8[ptr>>0]=value;break;case\"i16\":HEAP16[ptr>>1]=value;break;case\"i32\":HEAP32[ptr>>2]=value;break;case\"i64\":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case\"float\":HEAPF32[ptr>>2]=value;break;case\"double\":HEAPF64[ptr>>3]=value;break;default:abort(\"invalid type for setValue: \"+type)}}var wasmMemory;var wasmTable=new WebAssembly.Table({\"initial\":31,\"maximum\":31+0,\"element\":\"anyfunc\"});var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}function getCFunc(ident){var func=Module[\"_\"+ident];assert(func,\"Cannot call unknown function \"+ident+\", make sure it is exported\");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={\"string\":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},\"array\":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType===\"string\")return UTF8ToString(ret);if(returnType===\"boolean\")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}var ALLOC_NONE=3;var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(u8Array,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(u8Array[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=u8Array[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|u8Array[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var STACK_BASE=5249120,DYNAMIC_BASE=5249120,DYNAMICTOP_PTR=6080;var INITIAL_INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;if(Module[\"wasmMemory\"]){wasmMemory=Module[\"wasmMemory\"]}else{wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback();continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";out(what);err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";throw new WebAssembly.RuntimeError(what)}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}var wasmBinaryFile=\"onnx-wasm.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={\"env\":asmLibraryArg,\"wasi_snapshot_preview1\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}var tempDouble;var tempI64;__ATINIT__.push({func:function(){___wasm_call_ctors()}});function demangle(func){return func}function demangleAll(text){var regex=/\\b_Z[\\w\\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+\" [\"+x+\"]\"})}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error}catch(e){err=e}if(!err.stack){return\"(no stack trace available)\"}}return err.stack.toString()}function ___assert_fail(condition,filename,line,func){abort(\"Assertion failed: \"+UTF8ToString(condition)+\", at: \"+[filename?UTF8ToString(filename):\"unknown filename\",line,func?UTF8ToString(func):\"unknown function\"])}function ___cxa_allocate_exception(size){return _malloc(size)}var ___exception_infos={};var ___exception_last=0;function __ZSt18uncaught_exceptionv(){return __ZSt18uncaught_exceptionv.uncaught_exceptions>0}function ___cxa_throw(ptr,type,destructor){___exception_infos[ptr]={ptr:ptr,adjusted:[ptr],type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};___exception_last=ptr;if(!(\"uncaught_exception\"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exceptions=1}else{__ZSt18uncaught_exceptionv.uncaught_exceptions++}throw ptr}function _abort(){abort()}function _emscripten_get_heap_size(){return HEAPU8.length}function _emscripten_get_sbrk_ptr(){return 6080}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648-PAGE_MULTIPLE;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var PATH={splitPath:function(filename){var splitPathRe=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last===\".\"){parts.splice(i,1)}else if(last===\"..\"){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift(\"..\")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)===\"/\",trailingSlash=path.substr(-1)===\"/\";path=PATH.normalizeArray(path.split(\"/\").filter(function(p){return!!p}),!isAbsolute).join(\"/\");if(!path&&!isAbsolute){path=\".\"}if(path&&trailingSlash){path+=\"/\"}return(isAbsolute?\"/\":\"\")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return\".\"}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path===\"/\")return\"/\";var lastSlash=path.lastIndexOf(\"/\");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join(\"/\"))},join2:function(l,r){return PATH.normalize(l+\"/\"+r)}};var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},get64:function(low,high){return low}};function _fd_close(fd){return 0}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){}function flush_NO_FILESYSTEM(){if(typeof _fflush!==\"undefined\")_fflush(0);var buffers=SYSCALLS.buffers;if(buffers[1].length)SYSCALLS.printChar(1,10);if(buffers[2].length)SYSCALLS.printChar(2,10)}function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j])}num+=len}HEAP32[pnum>>2]=num;return 0}function _setTempRet0($i){setTempRet0($i|0)}__ATEXIT__.push(flush_NO_FILESYSTEM);var ASSERTIONS=false;var asmLibraryArg={\"__assert_fail\":___assert_fail,\"__cxa_allocate_exception\":___cxa_allocate_exception,\"__cxa_throw\":___cxa_throw,\"abort\":_abort,\"emscripten_get_sbrk_ptr\":_emscripten_get_sbrk_ptr,\"emscripten_memcpy_big\":_emscripten_memcpy_big,\"emscripten_resize_heap\":_emscripten_resize_heap,\"fd_close\":_fd_close,\"fd_seek\":_fd_seek,\"fd_write\":_fd_write,\"memory\":wasmMemory,\"setTempRet0\":_setTempRet0,\"table\":wasmTable};var asm=createWasm();Module[\"asm\"]=asm;var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"__wasm_call_ctors\"]).apply(null,arguments)};var _batch_normalization_f32=Module[\"_batch_normalization_f32\"]=function(){return(_batch_normalization_f32=Module[\"_batch_normalization_f32\"]=Module[\"asm\"][\"batch_normalization_f32\"]).apply(null,arguments)};var _add_f32=Module[\"_add_f32\"]=function(){return(_add_f32=Module[\"_add_f32\"]=Module[\"asm\"][\"add_f32\"]).apply(null,arguments)};var _sub_f32=Module[\"_sub_f32\"]=function(){return(_sub_f32=Module[\"_sub_f32\"]=Module[\"asm\"][\"sub_f32\"]).apply(null,arguments)};var _mul_f32=Module[\"_mul_f32\"]=function(){return(_mul_f32=Module[\"_mul_f32\"]=Module[\"asm\"][\"mul_f32\"]).apply(null,arguments)};var _div_f32=Module[\"_div_f32\"]=function(){return(_div_f32=Module[\"_div_f32\"]=Module[\"asm\"][\"div_f32\"]).apply(null,arguments)};var _prelu_f32=Module[\"_prelu_f32\"]=function(){return(_prelu_f32=Module[\"_prelu_f32\"]=Module[\"asm\"][\"prelu_f32\"]).apply(null,arguments)};var _xor_u8=Module[\"_xor_u8\"]=function(){return(_xor_u8=Module[\"_xor_u8\"]=Module[\"asm\"][\"xor_u8\"]).apply(null,arguments)};var _or_u8=Module[\"_or_u8\"]=function(){return(_or_u8=Module[\"_or_u8\"]=Module[\"asm\"][\"or_u8\"]).apply(null,arguments)};var _and_u8=Module[\"_and_u8\"]=function(){return(_and_u8=Module[\"_and_u8\"]=Module[\"asm\"][\"and_u8\"]).apply(null,arguments)};var _clip_f32=Module[\"_clip_f32\"]=function(){return(_clip_f32=Module[\"_clip_f32\"]=Module[\"asm\"][\"clip_f32\"]).apply(null,arguments)};var _conv_f32=Module[\"_conv_f32\"]=function(){return(_conv_f32=Module[\"_conv_f32\"]=Module[\"asm\"][\"conv_f32\"]).apply(null,arguments)};var _gemm_f32=Module[\"_gemm_f32\"]=function(){return(_gemm_f32=Module[\"_gemm_f32\"]=Module[\"asm\"][\"gemm_f32\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"free\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"malloc\"]).apply(null,arguments)};var _instance_normalization_f32=Module[\"_instance_normalization_f32\"]=function(){return(_instance_normalization_f32=Module[\"_instance_normalization_f32\"]=Module[\"asm\"][\"instance_normalization_f32\"]).apply(null,arguments)};var _matmul_f32=Module[\"_matmul_f32\"]=function(){return(_matmul_f32=Module[\"_matmul_f32\"]=Module[\"asm\"][\"matmul_f32\"]).apply(null,arguments)};var _average_pool_f32=Module[\"_average_pool_f32\"]=function(){return(_average_pool_f32=Module[\"_average_pool_f32\"]=Module[\"asm\"][\"average_pool_f32\"]).apply(null,arguments)};var _max_pool_f32=Module[\"_max_pool_f32\"]=function(){return(_max_pool_f32=Module[\"_max_pool_f32\"]=Module[\"asm\"][\"max_pool_f32\"]).apply(null,arguments)};var _softmax_f32=Module[\"_softmax_f32\"]=function(){return(_softmax_f32=Module[\"_softmax_f32\"]=Module[\"asm\"][\"softmax_f32\"]).apply(null,arguments)};var _sum_f32=Module[\"_sum_f32\"]=function(){return(_sum_f32=Module[\"_sum_f32\"]=Module[\"asm\"][\"sum_f32\"]).apply(null,arguments)};var ___errno_location=Module[\"___errno_location\"]=function(){return(___errno_location=Module[\"___errno_location\"]=Module[\"asm\"][\"__errno_location\"]).apply(null,arguments)};var _fflush=Module[\"_fflush\"]=function(){return(_fflush=Module[\"_fflush\"]=Module[\"asm\"][\"fflush\"]).apply(null,arguments)};var _setThrew=Module[\"_setThrew\"]=function(){return(_setThrew=Module[\"_setThrew\"]=Module[\"asm\"][\"setThrew\"]).apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){return(stackSave=Module[\"stackSave\"]=Module[\"asm\"][\"stackSave\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"stackAlloc\"]).apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){return(stackRestore=Module[\"stackRestore\"]=Module[\"asm\"][\"stackRestore\"]).apply(null,arguments)};var __growWasmMemory=Module[\"__growWasmMemory\"]=function(){return(__growWasmMemory=Module[\"__growWasmMemory\"]=Module[\"asm\"][\"__growWasmMemory\"]).apply(null,arguments)};var dynCall_ii=Module[\"dynCall_ii\"]=function(){return(dynCall_ii=Module[\"dynCall_ii\"]=Module[\"asm\"][\"dynCall_ii\"]).apply(null,arguments)};var dynCall_iiii=Module[\"dynCall_iiii\"]=function(){return(dynCall_iiii=Module[\"dynCall_iiii\"]=Module[\"asm\"][\"dynCall_iiii\"]).apply(null,arguments)};var dynCall_jiji=Module[\"dynCall_jiji\"]=function(){return(dynCall_jiji=Module[\"dynCall_jiji\"]=Module[\"asm\"][\"dynCall_jiji\"]).apply(null,arguments)};var dynCall_iidiiii=Module[\"dynCall_iidiiii\"]=function(){return(dynCall_iidiiii=Module[\"dynCall_iidiiii\"]=Module[\"asm\"][\"dynCall_iidiiii\"]).apply(null,arguments)};var dynCall_vii=Module[\"dynCall_vii\"]=function(){return(dynCall_vii=Module[\"dynCall_vii\"]=Module[\"asm\"][\"dynCall_vii\"]).apply(null,arguments)};var dynCall_vi=Module[\"dynCall_vi\"]=function(){return(dynCall_vi=Module[\"dynCall_vi\"]=Module[\"asm\"][\"dynCall_vi\"]).apply(null,arguments)};var dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=function(){return(dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=Module[\"asm\"][\"dynCall_viiiiii\"]).apply(null,arguments)};var dynCall_viiiii=Module[\"dynCall_viiiii\"]=function(){return(dynCall_viiiii=Module[\"dynCall_viiiii\"]=Module[\"asm\"][\"dynCall_viiiii\"]).apply(null,arguments)};var dynCall_viiii=Module[\"dynCall_viiii\"]=function(){return(dynCall_viiii=Module[\"dynCall_viiii\"]=Module[\"asm\"][\"dynCall_viiii\"]).apply(null,arguments)};Module[\"asm\"]=asm;var calledRun;Module[\"then\"]=function(func){if(calledRun){func(Module)}else{var old=Module[\"onRuntimeInitialized\"];Module[\"onRuntimeInitialized\"]=function(){if(old)old();func(Module)}}return Module};function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\n\n\n  return Module\n}\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n      module.exports = Module;\n    else if (typeof define === 'function' && define['amd'])\n      define([], function() { return Module; });\n    else if (typeof exports === 'object')\n      exports[\"Module\"] = Module;\n    ","export default function() {\n  return new Worker(__webpack_public_path__ + \"onnx-worker.js\");\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Backend, InferenceHandler, SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {CPU_OP_RESOLVE_RULES} from '../cpu/op-resolve-rules';\n\nimport {WasmInferenceHandler} from './inference-handler';\nimport {WASM_OP_RESOLVE_RULES} from './op-resolve-rules';\n\nexport class WasmSessionHandler implements SessionHandler {\n  private opResolveRules: ReadonlyArray<OpSet.ResolveRule>;\n  constructor(readonly backend: Backend, readonly context: Session.Context, fallbackToCpuOps: boolean) {\n    this.opResolveRules = fallbackToCpuOps ? WASM_OP_RESOLVE_RULES.concat(CPU_OP_RESOLVE_RULES) : WASM_OP_RESOLVE_RULES;\n  }\n\n  createInferenceHandler(): InferenceHandler {\n    return new WasmInferenceHandler(this, this.context.profiler);\n  }\n\n  dispose(): void {}\n\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>, graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, this.opResolveRules);\n    op.initialize(node.attributes, node, graph);\n    return op;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {InferenceHandler} from '../../backend';\nimport {Profiler} from '../../instrument';\n\nimport {WasmSessionHandler} from './session-handler';\n\nexport class WasmInferenceHandler implements InferenceHandler {\n  constructor(public readonly session: WasmSessionHandler, public readonly profiler?: Readonly<Profiler>) {}\n\n  dispose(): void {}\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {OpSet} from '../../opset';\n\nimport {WasmBatchNormalization} from './ops/batch-normalization';\nimport {WasmBinaryOp} from './ops/binary-op';\nimport {WasmClip} from './ops/clip';\nimport {WasmConv} from './ops/conv';\nimport {WasmGemm} from './ops/gemm';\nimport {WasmInstanceNormalization} from './ops/instance-normalization';\nimport {WasmMatMul} from './ops/matmul';\nimport {WasmAveragePool, WasmGlobalAveragePool, WasmGlobalMaxPool, WasmMaxPool} from './ops/pool';\nimport {WasmSoftmax} from './ops/softmax';\nimport {WasmSum} from './ops/sum';\n\nexport const WASM_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\n  ['Add', '', '7+', () => new WasmBinaryOp(['float32'], 'Add')],\n  ['And', '', '7+', () => new WasmBinaryOp(['bool'], 'And')],\n  ['AveragePool', '', '7-10', () => new WasmAveragePool()],  // TODO: support new attributes for AveragePool-10\n  ['BatchNormalization', '', '7+', () => new WasmBatchNormalization()],\n  ['Clip', '', '6-10', () => new WasmClip()],\n  ['Conv', '', '1+', () => new WasmConv()],\n  ['Div', '', '7+', () => new WasmBinaryOp(['float32'], 'Div')],\n  ['Gemm', '', '7-10', () => new WasmGemm(false)],\n  ['Gemm', '', '11+', () => new WasmGemm(true)],\n  ['GlobalAveragePool', '', '1+', () => new WasmGlobalAveragePool()],\n  ['GlobalMaxPool', '', '1+', () => new WasmGlobalMaxPool()],\n  ['InstanceNormalization', '', '6+', () => new WasmInstanceNormalization()],\n  ['MatMul', '', '1+', () => new WasmMatMul()],\n  ['MaxPool', '', '1-9', () => new WasmMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['Mul', '', '7+', () => new WasmBinaryOp(['float32'], 'Mul')],\n  ['Or', '', '7+', () => new WasmBinaryOp(['bool'], 'Or')],\n  ['PRelu', '', '7+', () => new WasmBinaryOp(['float32'], 'PRelu')],\n  ['Softmax', '', '1+', () => new WasmSoftmax()],\n  ['Sub', '', '7+', () => new WasmBinaryOp(['float32'], 'Sub')],\n  ['Sum', '', '6+', () => new WasmSum()],  // TODO: support multidirectional broadcast for Sum-8\n  ['Xor', '', '7+', () => new WasmBinaryOp(['bool'], 'Xor')],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BatchNormalization} from '../../../ops/batch-normalization';\nimport {Tensor} from '../../../tensor';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmBatchNormalization extends BatchNormalization {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const x = inputs[0];\n    const scale = inputs[1];\n    const b = inputs[2];\n    const mean = inputs[3];\n    const variance = inputs[4];\n\n    // calculate channel size (i.e.) data points per channel\n    let channelSize = 1;\n    for (let i = 2; i < x.dims.length; i++) {\n      channelSize *= x.dims[i];\n    }\n\n    // create output Tensor after determining output size\n    const y = new Tensor(x.dims, x.type);\n    WasmBinding.getInstance().ccall(\n        '_batch_normalization_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'],\n        [x.dims[0], 'int32'], [x.dims[1], 'int32'], [channelSize, 'int32'], [scale.floatData, 'float32ptr'],\n        [b.floatData, 'float32ptr'], [mean.floatData, 'float32ptr'], [variance.floatData, 'float32ptr'],\n        [this.epsilon, 'float32']);\n\n    return [y];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n    const mean = inputs[3];\n    const var_ = inputs[4];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs need to be one dimensional\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n        var_.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n        var_.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    // currently Wasm backend only supports 'float32' input type\n    if (X.type !== 'float32' || scale.type !== 'float32' || B.type !== 'float32' || mean.type !== 'float32' ||\n        var_.type !== 'float32') {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BinaryOp} from '../../../ops/binary-op';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmBinaryOp extends BinaryOp {\n  constructor(typeConstraint: ReadonlyArray<Tensor.DataType>, opType: string, resultType?: Tensor.DataType) {\n    super(typeConstraint, opType, resultType);\n  }\n\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n    if (!outputShape) {\n      throw new Error('not broadcastable');\n    }\n    let fun = '';\n    // TODO: Explore better ways to deal with types than current `binaryOpType` approach\n    let binaryOpType = '';\n    switch (this.opType) {\n      case 'Add':\n        if (inputs[0].type === 'float32') {\n          fun = '_add_f32';\n          binaryOpType = 'float32InFloat32Out';\n        }\n        break;\n      case 'Sub':\n        if (inputs[0].type === 'float32') {\n          fun = '_sub_f32';\n          binaryOpType = 'float32InFloat32Out';\n        }\n        break;\n      case 'Mul':\n        if (inputs[0].type === 'float32') {\n          fun = '_mul_f32';\n          binaryOpType = 'float32InFloat32Out';\n        }\n        break;\n      case 'Div':\n        if (inputs[0].type === 'float32') {\n          fun = '_div_f32';\n          binaryOpType = 'float32InFloat32Out';\n        }\n        break;\n      case 'PRelu':\n        if (inputs[0].type === 'float32') {\n          fun = '_prelu_f32';\n          binaryOpType = 'float32InFloat32Out';\n        }\n        break;\n      case 'Xor':\n        fun = '_xor_u8';\n        binaryOpType = 'boolInBoolOut';\n        break;\n      case 'Or':\n        fun = '_or_u8';\n        binaryOpType = 'boolInBoolOut';\n        break;\n      case 'And':\n        fun = '_and_u8';\n        binaryOpType = 'boolInBoolOut';\n        break;\n      default:\n        throw Error(`unsupported binary op by the Wasm backend`);\n    }\n    let result: Tensor;\n    if (binaryOpType === 'float32InFloat32Out') {\n      result = new Tensor(outputShape, 'float32');\n      WasmBinding.getInstance().ccall(\n          fun, [inputs[0].floatData, 'float32ptr'], [inputs[0].dims.length, 'int32'], [inputs[0].dims, 'int32ptr'],\n          [inputs[1].floatData, 'float32ptr'], [inputs[1].dims.length, 'int32'], [inputs[1].dims, 'int32ptr'],\n          [result.floatData, 'float32ptr', 'out'], [result.floatData.length, 'int32'], [outputShape.length, 'int32'],\n          [outputShape, 'int32ptr']);\n    } else if (binaryOpType === 'boolInBoolOut') {\n      result = new Tensor(outputShape, 'bool');\n      WasmBinding.getInstance().ccall(\n          fun, [inputs[0].integerData as Uint8Array, 'boolptr'], [inputs[0].dims.length, 'int32'],\n          [inputs[0].dims, 'int32ptr'], [inputs[1].integerData as Uint8Array, 'boolptr'],\n          [inputs[1].dims.length, 'int32'], [inputs[1].dims, 'int32ptr'],\n          [result.integerData as Uint8Array, 'boolptr', 'out'], [result.integerData.length, 'int32'],\n          [outputShape.length, 'int32'], [outputShape, 'int32ptr']);\n    } else {\n      throw new Error(`Unsupported binary op format. Probably unsupported data types.`);\n    }\n    return [result];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Clip} from '../../../ops/clip';\nimport {Tensor} from '../../../tensor';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmClip extends Clip {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const result = new Tensor(inputs[0].dims, inputs[0].type);\n    const size = result.floatData.length;\n    if (inputs[0].type === 'float32') {\n      WasmBinding.getInstance().ccall(\n          '_clip_f32', [inputs[0].floatData, 'float32ptr'], [result.floatData, 'float32ptr', 'out'], [size, 'int32'],\n          [this.min, 'float32'], [this.max, 'float32']);\n    }\n    // Expand for differnt types supported for this specific kernel of Clip\n    else {\n      throw new Error(`Unsupported input type for Clip operator.`);\n    }\n    return [result];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32') {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Conv} from '../../../ops/conv';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {PerformanceData} from '../../../wasm-binding-core';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmConv extends Conv {\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\n    const x = inputs[0];\n    const w = inputs[1];\n    const b = inputs.length === 3 ? inputs[2] : undefined;\n\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      const wDims = inputs[1].dims;\n      for (let i = 2; i < wDims.length; ++i) {\n        this.kernelShape.push(wDims[i]);\n      }\n    }\n\n    // create output Tensor after determining output size (after adjusting pads based on 'autoPad' attribute)\n    const outputDims = PoolConvUtil.computeConvOutputShape(\n        x.dims, w.dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\n    const y = new Tensor(outputDims, x.type);\n\n    // determine number of threads needed to process\n    const numThreads = determineNumThreads(x.dims[0], this.group, w.dims[0], WasmBinding.workerNumber);\n\n    // no multi-threading\n    if (numThreads === 1) {\n      WasmBinding.getInstance().ccall(\n          '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [w.floatData, 'float32ptr'],\n          [w.dims, 'int32ptr'], [y.floatData, 'float32ptr', 'out'], [y.dims, 'int32ptr'],\n          [b ? b.floatData : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\n          [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\n      return [y];\n    }\n\n    // multi-threaded using web-workers\n    else {\n      // data pre-processing\n      const wDimsSp = w.dims.slice(0);\n      wDimsSp[0] = Math.floor(w.dims[0] / numThreads);\n      const wSizeSp = wDimsSp[0] * wDimsSp[1] * wDimsSp[2] * wDimsSp[3];\n\n      const wDimsFinal = w.dims.slice(0);\n      wDimsFinal[0] = w.dims[0] - (numThreads - 1) * wDimsSp[0];\n\n      const yDimsSp = [1, wDimsSp[0], outputDims[2], outputDims[3]];\n      const ySizeSp = wDimsSp[0] * outputDims[2] * outputDims[3];\n\n      const yDimsFinal = [1, wDimsFinal[0], outputDims[2], outputDims[3]];\n\n      const wArray = new Array<Float32Array>(numThreads);\n      const yArray = new Array<Float32Array>(numThreads);\n      const bArray = new Array<Float32Array>(numThreads);\n      const workerTasks = new Array<Promise<PerformanceData>>(numThreads - 1);\n\n      // function calls\n      for (let i = 0; i < numThreads; ++i) {\n        if (i !== numThreads - 1) {\n          wArray[i] = w.floatData.subarray(i * wSizeSp, (i + 1) * wSizeSp) as Float32Array;\n          yArray[i] = y.floatData.subarray(i * ySizeSp, (i + 1) * ySizeSp) as Float32Array;\n          if (b) {\n            bArray[i] = b.floatData.subarray(i * wDimsSp[0], (i + 1) * wDimsSp[0]) as Float32Array;\n          }\n          workerTasks[i] = WasmBinding.getInstance().ccallRemote(\n              i, '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [wArray[i], 'float32ptr'],\n              [wDimsSp, 'int32ptr'], [yArray[i], 'float32ptr', 'out'], [yDimsSp, 'int32ptr'],\n              [bArray.length > 0 ? bArray[i] : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\n              [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\n        } else {\n          wArray[i] = w.floatData.subarray(i * wSizeSp) as Float32Array;\n          yArray[i] = y.floatData.subarray(i * ySizeSp) as Float32Array;\n          if (b) {\n            bArray[i] = b.floatData.subarray(i * wDimsSp[0]) as Float32Array;\n          }\n          WasmBinding.getInstance().ccall(\n              '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [wArray[i], 'float32ptr'],\n              [wDimsFinal, 'int32ptr'], [yArray[i], 'float32ptr', 'out'], [yDimsFinal, 'int32ptr'],\n              [bArray.length > 0 ? bArray[i] : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\n              [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\n        }\n      }\n\n      await Promise.all(workerTasks);\n      return [y];\n    }\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n      return false;\n    }\n\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n// This function will determine the number of threads\n// The strategy to parallelize is to parallelize on number of filter maps in the kernel\n// (i.e.) number of output channels\nfunction determineNumThreads(batchSize: number, group: number, numFilterMaps: number, numWebWorkers: number): number {\n  // single threaded if:\n  // 1) batch size is not 1 (data splitting logic across threads is specific to batch size being 1)\n  // 2) multi-threading not supported yet for mulitple groups\n  // 3) if number of filter maps is 1\n  // 4) number of web workers is 0\n  if (batchSize !== 1 || group !== 1 || numFilterMaps === 1 || numWebWorkers <= 0) {\n    return 1;\n  }\n\n  // multi-threaded:\n  // determine number of threads\n  return Math.min(numFilterMaps, numWebWorkers + 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Gemm} from '../../../ops/gemm';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, GemmUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmGemm extends Gemm {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const a = inputs[0];\n    const b = inputs[1];\n    const c = inputs[2];\n\n    const [M, N] = GemmUtil.getShapeOfGemmResult(a.dims, this.transA, b.dims, this.transB, c?.dims);\n    const y = new Tensor([M, N], a.type);\n    if (c && !BroadcastUtil.calc(y, c, (a, b) => (b), true)) {\n      throw new Error(`c is not broadcastable to the shape of the result of the Gemm operator`);\n    }\n    WasmBinding.getInstance().ccall(\n        '_gemm_f32', [this.transA, 'bool'], [this.transB, 'bool'], [this.transA ? a.dims[1] : a.dims[0], 'int32'],\n        [this.transB ? b.dims[0] : b.dims[1], 'int32'], [this.transA ? a.dims[0] : a.dims[1], 'int32'],\n        [this.alpha, 'float32'], [a.floatData, 'float32ptr'], [b.floatData, 'float32ptr'], [this.beta, 'float32'],\n        [y.floatData, 'float32ptr', 'inout']);\n\n    return [y];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32' || inputs[2].type !== 'float32') {\n      return false;\n    }\n\n    if ((inputs[0].type !== inputs[1].type) || (inputs[0].type !== inputs[2].type)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\nimport {Tensor} from '../../../tensor';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmInstanceNormalization extends InstanceNormalization {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const x = inputs[0];\n    const scale = inputs[1];\n    const b = inputs[2];\n\n    // calculate channel size (i.e.) data points per channel\n    let channelSize = 1;\n    for (let i = 2; i < x.dims.length; i++) {\n      channelSize *= x.dims[i];\n    }\n\n    // create output Tensor after determining output size\n    const y = new Tensor(x.dims, x.type);\n    WasmBinding.getInstance().ccall(\n        '_instance_normalization_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'],\n        [x.dims[0], 'int32'], [x.dims[1], 'int32'], [channelSize, 'int32'], [scale.floatData, 'float32ptr'],\n        [b.floatData, 'float32ptr'], [this.epsilon, 'float32']);\n\n    return [y];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    const X = inputs[0];\n    const scale = inputs[1];\n    const B = inputs[2];\n\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\n    // other inputs need to be one dimensional\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n      return false;\n    }\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n      return false;\n    }\n    // currently Wasm backend only supports 'float32' input type\n    if (X.type !== 'float32' || scale.type !== 'float32' || B.type !== 'float32') {\n      return false;\n    }\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {MatMul} from '../../../ops/matmul';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, MatMulUtil, ShapeUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmMatMul extends MatMul {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const [dimsA, dimsB] = MatMulUtil.preprocessInputShapes(inputs[0].dims, inputs[1].dims);\n    const outputShape = BroadcastUtil.calcShape(dimsA, dimsB, true);\n    if (!outputShape) {\n      // the inputs cannot broadcast or cannot multiply\n      throw new Error(`input dimensions do not match the requirement`);\n    }\n\n    const outputSize = ShapeUtil.size(outputShape);\n    const resultData = new Float32Array(outputSize);\n    WasmBinding.getInstance().ccall(\n        '_matmul_f32', [inputs[0].floatData, 'float32ptr'], [inputs[0].dims, 'int32ptr'],\n        [inputs[0].dims.length, 'int32'], [inputs[1].floatData, 'float32ptr'], [inputs[1].dims, 'int32ptr'],\n        [inputs[1].dims.length, 'int32'], [resultData, 'float32ptr', 'out'], [resultData.length, 'int32'],\n        [outputShape, 'int32ptr'], [outputShape.length, 'int32']);\n    MatMulUtil.postprocessOutputShape(outputShape as number[], inputs[0].dims.length, inputs[1].dims.length);\n    const result = new Tensor(outputShape, inputs[0].type);\n    result.floatData.set(resultData);\n    return [result];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n      return false;\n    }\n\n    if (inputs[0].type !== inputs[1].type) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {PerformanceData} from '../../../wasm-binding-core';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmAveragePool extends AveragePool {\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    return checkInputTypes(inputs);\n  }\n\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\n    return averagePool(inputs[0], this.autoPad, this.countIncludePad, this.kernelShape, this.pads, this.strides);\n  }\n}\n\nexport class WasmGlobalAveragePool extends GlobalAveragePool {\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    return checkInputTypes(inputs);\n  }\n\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\n    return globalAveragePool(inputs[0]);\n  }\n}\n\nexport class WasmMaxPool extends MaxPool {\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    return checkInputTypes(inputs);\n  }\n\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\n    return maxPool(inputs[0], this.autoPad, this.kernelShape, this.pads, this.strides);\n  }\n}\n\nexport class WasmGlobalMaxPool extends GlobalMaxPool {\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    return checkInputTypes(inputs);\n  }\n\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\n    return globalMaxPool(inputs[0]);\n  }\n}\n\n// type check function\nfunction checkInputTypes(inputs: Tensor[]): boolean {\n  // currently Wasm backend only supports 'float32' input type\n  if (inputs[0].type !== 'float32') {\n    return false;\n  }\n\n  return true;\n}\n\n// functions implementing specific pooling operations\nasync function averagePool(\n    input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[], pads: number[],\n    strides: number[]): Promise<Tensor[]> {\n  return pool(false, 1, input, autoPad, countIncludePad, kernelShape, pads, strides);\n}\n\nasync function globalAveragePool(input: Tensor): Promise<Tensor[]> {\n  return pool(true, 1, input, 'NOTSET', false, [], [], []);\n}\n\nasync function maxPool(\n    input: Tensor, autoPad: string, kernelShape: number[], pads: number[], strides: number[]): Promise<Tensor[]> {\n  return pool(false, 2, input, autoPad, false, kernelShape, pads, strides);\n}\n\nasync function globalMaxPool(input: Tensor): Promise<Tensor[]> {\n  return pool(true, 2, input, 'NOTSET', false, [], [], []);\n}\n\n/**\n * Perform pooling operations based on input\n * @param isGlobalOperator If true, perform global pooling.\n * @param poolType 1 if averagepool, 2 for maxpool.\n * @param input The input tensor.\n * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID\n * @param countIncludePad Whether include pad pixels when calculating values for the edges.\n * @param kernelShape The size of the kernel along each axis.\n * @param pads Padding for the beginning and ending along each axis. `pads` format should be as follow [x1_begin,\n *       x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and\n *       xi_end, the number of pixels added at the end of axis `i`.\n * @param strides Stride along each axis.\n */\nasync function pool(\n    isGlobalOperator: boolean, poolType: number, input: Tensor, autoPad: string, countIncludePad: boolean,\n    kernelShape: number[], pads: number[], strides: number[]): Promise<Tensor[]> {\n  // determine pool function name in wasm\n  let poolFunc = '';\n  switch (poolType) {\n    case 1:\n      poolFunc = '_average_pool_f32';\n      break;\n    case 2:\n      poolFunc = '_max_pool_f32';\n      break;\n    default:\n      throw new Error(`unknown pool type`);\n  }\n  // adjust the shapes of input attributes\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, input.dims, kernelShape, strides, pads);\n\n  // calculate output shape based on input attributes\n  const outputDims =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, input.dims, strides, kernelShape, pads, autoPad);\n\n  // create output\n  const y = new Tensor(outputDims, input.type);\n\n  // determine number of threads needed to process\n  const numThreads = determineNumThreads(input.dims[0], input.dims[1], WasmBinding.workerNumber);\n\n  // no multi-threading\n  if (numThreads === 1) {\n    WasmBinding.getInstance().ccall(\n        poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'], [input.floatData, 'float32ptr'],\n        [input.dims, 'int32ptr'], [y.floatData, 'float32ptr', 'out'], [y.dims, 'int32ptr'], [kernelShape, 'int32ptr'],\n        [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\n  }\n\n  // multi-threaded using web-workers\n  else {\n    // data pre-processing\n    const xDimsSp = input.dims.slice(0);\n    xDimsSp[1] = Math.floor(input.dims[1] / numThreads);\n    const xSizeSp = ShapeUtil.size(xDimsSp);\n\n    const xDimsFinal = input.dims.slice(0);\n    xDimsFinal[1] = input.dims[1] - (numThreads - 1) * xDimsSp[1];\n\n    const yDimsSp = outputDims.slice(0);\n    yDimsSp[1] = xDimsSp[1];\n    const ySizeSp = ShapeUtil.size(yDimsSp);\n\n    const yDimsFinal = outputDims.slice(0);\n    yDimsFinal[1] = xDimsFinal[1];\n\n    const workerTasks = new Array<Promise<PerformanceData>>(numThreads - 1);\n\n    const X = input.floatData;\n    const Y = y.floatData;\n\n    // function calls\n    for (let i = 0; i < numThreads; ++i) {\n      if (i !== numThreads - 1) {\n        workerTasks[i] = WasmBinding.getInstance().ccallRemote(\n            i, poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'],\n            [X.subarray(i * xSizeSp, (i + 1) * xSizeSp), 'float32ptr'], [xDimsSp, 'int32ptr'],\n            [Y.subarray(i * ySizeSp, (i + 1) * ySizeSp), 'float32ptr', 'out'], [yDimsSp, 'int32ptr'],\n            [kernelShape, 'int32ptr'], [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\n      } else {\n        WasmBinding.getInstance().ccall(\n            poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'],\n            [X.subarray((numThreads - 1) * xSizeSp), 'float32ptr'], [xDimsFinal, 'int32ptr'],\n            [Y.subarray((numThreads - 1) * ySizeSp), 'float32ptr', 'out'], [yDimsFinal, 'int32ptr'],\n            [kernelShape, 'int32ptr'], [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\n      }\n    }\n\n    await Promise.all(workerTasks);\n  }\n\n  return [y];\n}\n\n// this function will determine the number of threads\n// the strategy to parallelize is to parallelize on number of data channels\nfunction determineNumThreads(batchSize: number, numChannels: number, numWebWorkers: number): number {\n  // single threaded if:\n  // 1) batch size is not 1 (data splitting logic across threads is specific to batch size being 1)\n  // 2) if number of channels is 1\n  // 3) number of web workers is 0\n  if (batchSize !== 1 || numChannels === 1 || numWebWorkers <= 0) {\n    return 1;\n  }\n\n  // multi-threaded:\n  // determine number of threads\n  return Math.min(numChannels, numWebWorkers + 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Softmax} from '../../../ops/softmax';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WasmBinding} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmSoftmax extends Softmax {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const x = inputs[0];\n    const axis = ShapeUtil.normalizeAxis(this.axis, x.dims.length);\n    const N = ShapeUtil.sizeToDimension(x.dims, axis);\n    const D = ShapeUtil.sizeFromDimension(x.dims, axis);\n    const y = new Tensor(x.dims, x.type);\n    WasmBinding.getInstance().ccall(\n        '_softmax_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'], [N, 'int32'], [D, 'int32']);\n\n    return [y];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32') {\n      return false;\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Sum} from '../../../ops/sum';\nimport {Tensor} from '../../../tensor';\nimport {WasmBinding, WasmCallArgument} from '../../../wasm-binding';\nimport {WasmInferenceHandler} from '../inference-handler';\n\nexport class WasmSum extends Sum {\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const y = new Tensor(inputs[0].dims, inputs[0].type);\n    const size = inputs[0].floatData.length;\n    const input = new Array<WasmCallArgument>(inputs.length);\n    for (let i = 0; i < inputs.length; i++) {\n      input[i] = [inputs[i].floatData, 'float32ptr'];\n    }\n    WasmBinding.getInstance().ccall(\n        '_sum_f32', [inputs.length, 'int32'], [size, 'int32'], [y.floatData, 'float32ptr', 'inout'], ...input);\n\n    return [y];\n  }\n\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\n  checkInputTypes(inputs: Tensor[]): boolean {\n    // currently Wasm backend only supports 'float32' input type\n    if (inputs[0].type !== 'float32') {\n      return false;\n    }\n    for (let i = 1; i < inputs.length; i++) {\n      if (inputs[0].type !== inputs[i].type) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Backend as BackendInterface} from '../api/onnx';\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\ntype WebGLOptions = BackendInterface.WebGLOptions;\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend, WebGLOptions {\n  disabled?: boolean;\n  glContext: WebGLContext;\n  contextId?: 'webgl'|'webgl2';\n  matmulMaxBatchSize?: number;\n  textureCacheMode?: 'initializerOnly'|'full';\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      Logger.verbose('WebGLBackend', `Created WebGLContext: ${typeof this.glContext}`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {AlwaysKeepOriginalSizeStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  textureDataCache: Map<Tensor.Id, TextureData>;\n  initializers: Set<Tensor.Id>;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext);\n    this.layoutStrategy = new AlwaysKeepOriginalSizeStrategy(backend.glContext.maxTextureSize);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.textureDataCache = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  getTextureData(tensorId: Tensor.Id): TextureData|undefined {\n    return this.textureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    this.textureDataCache.set(tensorId, textureData);\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.textureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.textureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>, graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    op.initialize(node.attributes, node, graph);\n    return op;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {WebGLUint8Encode} from './ops/uint8-encode';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureData, TextureLayout, WebGLOperator} from './types';\nimport {getPackedShape} from './utils';\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private textureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.textureDataCache = new Map();\n  }\n\n  run(op: WebGLOperator, inputs: Tensor[]): Tensor[] {\n    let artifact = this.session.programManager.getArtifact(op);\n    if (!artifact) {\n      const programInfo = op.createProgramInfo(this, inputs);\n      artifact = this.session.programManager.build(programInfo);\n      this.session.programManager.setArtifact(op, artifact);\n    }\n    const runData = op.createRunData(this, artifact.programInfo, inputs);\n    this.session.programManager.run(artifact, runData);\n    return [runData.outputTextureData.tensor];\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  getOrCreateTextureData(tensor: Tensor, layout?: TextureLayout) {\n    let td = this.getTextureData(tensor.dataId);\n    if (!td) {\n      Logger.verbose('InferenceHandler', `Creating new TextureData for dims: [${tensor.dims}]`);\n      if (!layout) {\n        layout = this.createTextureLayoutFromShape(tensor.dims.slice());\n      }\n      // graph inputs or initializers\n      td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n    } else {\n      Logger.verbose('InferenceHandler', `Retrieving TextureData from cache: [${tensor.dims}]`);\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object from the given data type and texture layout.\n   * Usage = Encoder.Usage.Default.\n   * @param dataType the tensor data type\n   */\n  createTextureDataFromLayout(layout: TextureLayout, dataType: Tensor.DataType): TextureData {\n    return this.createTextureData(layout, dataType);\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  /**\n   * Create a TextureData object, using the given texture.\n   * This function does not create new texture. Usually used in scenarios using texture sharing. (eg. Reshape)\n   * @param dataType the tensor data type\n   * @param texture the WebGLTexture object to share\n   * @param tensorId the tensor ID of the shared tensor data\n   */\n  createSharedTextureData(layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensorId: Tensor.Id):\n      TextureData {\n    return this.createTextureDataFromTexture(layout, dataType, texture, undefined, tensorId);\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType,\n                  (id: Tensor.Id) => {\n                    return this.readTexture(textureData);\n                  },\n                  undefined, undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData);\n    return textureData;\n  }\n\n  getTextureData(tensorId: Tensor.Id): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId) :\n                                                  this.textureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td);\n    } else {\n      this.textureDataCache.set(tensorId, td);\n    }\n  }\n\n  /**\n   * Create a TextureLayout object from a tensor. If a related texture data is found, returns the cached texture layout.\n   */\n  getOrCreateTextureLayout(tensor: Tensor, channels: 1|2|3|4 = 1, unpackedShape?: ReadonlyArray<number>):\n      TextureLayout {\n    const td = this.getTextureData(tensor.dataId);\n    if (td) {\n      return td;\n    }\n    return this.createTextureLayoutFromShape(\n        channels === 1 ? tensor.dims.slice() : getPackedShape(tensor.dims.slice()), channels, unpackedShape);\n  }\n  /**\n   * Create a TextureLayout object from shape.\n   */\n  createTextureLayoutFromShape(\n      shape: ReadonlyArray<number>, channels: 1|2|3|4 = 1, unpackedShape?: ReadonlyArray<number>,\n      prefs?: WidthHeightPrefs): TextureLayout {\n    const [width, height] = this.session.layoutStrategy.computeTextureWH(shape, prefs);\n    let inferredDims = shape;\n    if (shape.length === 0) {\n      inferredDims = [1];\n    }\n    if (channels === 1) {\n      // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n      unpackedShape = shape;\n    } else if (!unpackedShape) {\n      throw new Error('Unpacked shape is needed when using channels > 1');\n    }\n    return {\n      width,\n      height,\n      channels: channels ? channels : 1,\n      shape: inferredDims,\n      strides: ShapeUtil.computeStrides(inferredDims),\n      unpackedShape\n    };\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.textureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.textureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      const op = new WebGLUint8Encode();\n      const uint8TD = op.runInternal(this, textureData);\n      return this.session.textureManager.readUint8TextureAsFloat(uint8TD);\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureLayout} from '../types';\n\nexport class WebGLUint8Encode {\n  runInternal(inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData {\n    const outputShape = input.shape;\n    const [width, height] = inferenceHandler.session.layoutStrategy.computeTextureWH(input.shape);\n    const outputLayout: TextureLayout = {\n      width,\n      height,\n      channels: 4,\n      shape: outputShape,\n      strides: ShapeUtil.computeStrides(outputShape),\n      unpackedShape: outputShape\n    };\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    // TODO: remove this special script. Use graph transformer instead.\n    /**\n     * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n     */\n    const shaderSource = `\n      const float FLOAT_MAX = 1.70141184e38;\n      const float FLOAT_MIN = 1.17549435e-38;\n\n      bool isNaN(float val) {\n        return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n      }\n\n      highp vec4 encodeAsUint8(highp float v) {\n        if (isNaN(v)) {\n          return vec4(255, 255, 255, 255);\n        }\n\n        highp float av = abs(v);\n\n        if(av < FLOAT_MIN) {\n          return vec4(0.0, 0.0, 0.0, 0.0);\n        } else if(v > FLOAT_MAX) {\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n        } else if(v < -FLOAT_MAX) {\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n        }\n\n        highp vec4 c = vec4(0,0,0,0);\n\n        highp float e = floor(log2(av));\n        highp float m = exp2(fract(log2(av))) - 1.0;\n\n        c[2] = floor(128.0 * m);\n        m -= c[2] / 128.0;\n        c[1] = floor(32768.0 * m);\n        m -= c[1] / 32768.0;\n        c[0] = floor(8388608.0 * m);\n\n        highp float ebias = e + 127.0;\n        c[3] = floor(ebias / 2.0);\n        ebias -= c[3] * 2.0;\n        c[2] += floor(ebias) * 128.0;\n\n        c[3] += 128.0 * step(0.0, -v);\n\n        return c / 255.0;\n      }\n\n      void main() {\n        float value = ${glsl.texture2D}(X,TexCoords).r;\n        ${glsl.output} = encodeAsUint8(value);\n      }`;\n    const programInfo = {inputLayouts: [input], outputLayout, samplers: ['X'], shaderSource, hasMain: true};\n    const artifact = inferenceHandler.session.programManager.build(programInfo);\n\n    const encoder = inferenceHandler.session.backend.glContext.getEncoder('byte', 4);\n    const texture =\n        inferenceHandler.session.backend.glContext.allocateTexture(outputLayout.width, outputLayout.height, encoder);\n    const outputTextureData = inferenceHandler.createSharedTextureData(outputLayout, 'uint8', texture, {});\n    const runData = {inputTextureDatas: [input], outputTextureData, uniformData: {}};\n\n    inferenceHandler.session.programManager.run(artifact, runData);\n    return runData.outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\nimport {OpSet} from '../../opset';\n\nimport {WebGLBatchNormalization} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {WebGLClip} from './ops/clip';\nimport {WebGLConcat} from './ops/concat';\nimport {WebGLConv} from './ops/conv';\nimport {WebGLDropout} from './ops/dropout';\nimport {WebGLElu} from './ops/elu';\nimport {WebGLFlatten} from './ops/flatten';\nimport {WebGLGather} from './ops/gather';\nimport {WebGLGemm} from './ops/gemm';\nimport {WebGLImageScaler} from './ops/image-scaler';\nimport {WebGLInstanceNormalization} from './ops/instance-normalization';\nimport {WebGLLeakyRelu} from './ops/leaky-relu';\nimport {WebGLMatMul} from './ops/matmul';\nimport {WebGLPad} from './ops/pad';\nimport {WebGLAveragePool, WebGLGlobalAveragePool, WebGLGlobalMaxPool, WebGLMaxPool} from './ops/pool';\nimport * as reduceOps from './ops/reduce';\nimport {WebGLReshape} from './ops/reshape';\nimport {WebGLSlice, WebGLSliceV10} from './ops/slice';\nimport {WebGLSoftmax} from './ops/softmax';\nimport {WebGLSplit} from './ops/split';\nimport {WebGLSqueeze} from './ops/squeeze';\nimport {WebGLSum} from './ops/sum';\nimport {WebGLTile} from './ops/tile';\nimport {WebGLTranspose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {WebGLUnsqueeze} from './ops/unsqueeze';\nimport {WebGLUpsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\n  ['Abs', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslAbs())],\n  ['Acos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAcos())],\n  ['Add', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslAdd())],\n  ['And', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslAnd())],\n  ['Asin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAsin())],\n  ['Atan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAtan())],\n  ['AveragePool', '', '7-10', () => new WebGLAveragePool()],  // TODO: support new attributes for AveragePool-10\n  ['BatchNormalization', '', '7+', () => new WebGLBatchNormalization()],\n  ['Ceil', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCeil())],\n  ['Clip', '', '6-10', () => new WebGLClip()],\n  ['Concat', '', '4+', () => new WebGLConcat()],\n  ['Conv', '', '1+', () => new WebGLConv()],\n  ['Cos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCos())],\n  ['Div', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslDiv())],\n  ['Dropout', '', '7+', () => new WebGLDropout()],\n  ['Equal', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslEqual(), undefined, 'bool')],\n  ['Elu', '', '6+', () => new WebGLElu()],\n  ['Exp', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslExp())],\n  ['Flatten', '', '1+', () => new WebGLFlatten()],\n  ['Floor', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslFloor())],\n  ['Gather', '', '1+', () => new WebGLGather()],\n  ['Gemm', '', '7-10', () => new WebGLGemm(false)],\n  ['Gemm', '', '11+', () => new WebGLGemm(true)],\n  ['GlobalAveragePool', '', '1+', () => new WebGLGlobalAveragePool()],\n  ['GlobalMaxPool', '', '1+', () => new WebGLGlobalMaxPool()],\n  ['Greater', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslGreater(), undefined, 'bool')],\n  ['Identity', '', '1+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslIdentity())],\n  ['ImageScaler', '', '1+', () => new WebGLImageScaler()],\n  ['InstanceNormalization', '', '6+', () => new WebGLInstanceNormalization()],\n  ['LeakyRelu', '', '6+', () => new WebGLLeakyRelu()],\n  ['Less', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslLess(), undefined, 'bool')],\n  ['Log', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslLog())],\n  ['MatMul', '', '1+', () => new WebGLMatMul()],\n  ['MaxPool', '', '1-9', () => new WebGLMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['Mul', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslMul())],\n  ['Neg', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslNeg())],\n  ['Not', '', '1+', () => new unaryOps.WebGLUnaryOp(['bool'], unaryOps.glslNot())],\n  ['Or', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslOr())],\n  ['Pad', '', '2-10', () => new WebGLPad()],\n  ['Pow', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPow())],\n  ['PRelu', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPRelu())],\n  ['ReduceLogSum', '', '1+', () => new reduceOps.WebGLReduceLogSum()],\n  ['ReduceMax', '', '1+', () => new reduceOps.WebGLReduceMax()],\n  ['ReduceMean', '', '1+', () => new reduceOps.WebGLReduceMean()],\n  ['ReduceMin', '', '1+', () => new reduceOps.WebGLReduceMin()],\n  ['ReduceProd', '', '1+', () => new reduceOps.WebGLReduceProd()],\n  ['ReduceSum', '', '1+', () => new reduceOps.WebGLReduceSum()],\n  ['ReduceSumSquare', '', '1+', () => new reduceOps.WebGLReduceSumSquare()],\n  ['Relu', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslRelu())],\n  ['Reshape', '', '5+', () => new WebGLReshape()],\n  ['Resize', '', '10', () => new WebGLUpsample(10)],\n  ['Resize', '', '11+', () => new WebGLUpsample(11)],\n  ['Sigmoid', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSigmoid())],\n  ['Sin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSin())],\n  ['Slice', '', '10+', () => new WebGLSliceV10()],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', () => new WebGLSlice()],\n  ['Softmax', '', '1+', () => new WebGLSoftmax()],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data\n  // is split. When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2+', (node) => new WebGLSplit(node.outputs.length)],\n  ['Sqrt', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSqrt())],\n  ['Squeeze', '', '1+', () => new WebGLSqueeze()],\n  ['Sub', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslSub())],\n  ['Sum', '', '6+', () => new WebGLSum()],  // TODO: support multidirectional broadcast for Sum-8\n  ['Tan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTan())],\n  ['Tanh', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTanh())],\n  ['Tile', '', '6+', () => new WebGLTile()],\n  ['Transpose', '', '1+', () => new WebGLTranspose()],\n  ['Upsample', '', '7-8', () => new WebGLUpsample(7)],\n  ['Upsample', '', '9', () => new WebGLUpsample(9)],\n  ['Unsqueeze', '', '1+', () => new WebGLUnsqueeze()],\n  ['Xor', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslXor())],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BatchNormalization} from '../../../ops/batch-normalization';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData} from '../types';\n\nexport class WebGLBatchNormalization extends BatchNormalization {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\n    const outputShape = inputs[0].dims.slice();\n    const rank = outputShape.length;\n    const scale = inputLayouts[1];\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      float process(int[${rank}] indices) {\n        vec2 position = offsetToCoords(indices[1], ${scale.width}, ${scale.height});\n        float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n        float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n        float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n        float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n        return scale * ( (_A(indices) - mean) / sqrt(variance + float(${this.epsilon})) ) + b;\n      }`;\n    return {\n      inputLayouts,\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n      shaderSource\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    inputs.slice(1).forEach(t => inputTDs.push(handler.getOrCreateTextureData(t)));\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type);\n    return {inputTextureDatas: inputTDs, outputTextureData: outputTD, uniformData: {}};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {BinaryOp} from '../../../ops/binary-op';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLBinaryOp extends BinaryOp implements WebGLOperator {\n  constructor(\n      typeConstraint: ReadonlyArray<Tensor.DataType>, protected glslFunc: GlslValueFunction, opType?: string,\n      resultType?: Tensor.DataType) {\n    super(typeConstraint, opType, resultType);\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\n    const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n    if (isBroadcast) {\n      const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n      if (!outputShape) {\n        throw new Error(`Can't perform binary op on the given tensors`);\n      }\n      const outputRank = outputShape.length;\n      const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n      const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n      const aBcast = inputs[0].dims.length !== 0 ? `bcastIndices_A(indices, aindices);` : `aindices[0] = 0;`;\n      const bBcast = inputs[1].dims.length !== 0 ? `bcastIndices_B(indices, bindices);` : `bindices[0] = 0;`;\n      const shaderSource = `\n      ${this.glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${this.glslFunc.name}(_A(aindices), _B(bindices));\n    }`;\n      return {\n        inputLayouts,\n        outputLayout: handler.createTextureLayoutFromShape(outputShape),\n        samplers: ['A', 'B'],\n        shaderSource,\n      };\n    }\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n    ${this.glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${this.glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n    return {\n      hasMain: true,\n      inputLayouts,\n      outputLayout: handler.createTextureLayoutFromShape(inputs[0].dims),\n      samplers: ['A', 'B'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(\n          programInfo.outputLayout, this.resultType ? this.resultType : inputs[0].type),\n      uniformData: {}\n    };\n  }\n}\n\nexport function glslAdd(): GlslValueFunction {\n  const name = `add_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = `div_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = `mul_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = `sub_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = `equal_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1 == v2 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = `greater_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = `less_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = `and_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = `or_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = `xor_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = `prelu_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Clip} from '../../../ops/clip';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLClip extends Clip implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      const float min = float(${this.min});\n      const float max = float(${this.max});\n      void main() {\n        float v = ${glsl.texture2D}(A, TexCoords).r;\n        ${glsl.output} = vec4(clamp(v, min, max));\n      }\n      `;\n    return {\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Concat} from '../../../ops/concat';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLConcat extends Concat implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\n      throw new Error(`axis specified for concat doesn't match input dimensionality`);\n    }\n    if (this.axis < 0) {\n      this.axis = inputShape.length + this.axis;\n    }\n    // ensure all of the non-concatenated axes match each other\n    // calculate the shape of the output tensor while we do that\n    const outputShape = inputShape.slice(0);\n    for (let i = 1; i < inputs.length; i++) {\n      const dataNShape = inputs[i].dims.slice();\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n        // add to the placeholder for computing output shape\n        if (axisIndex === this.axis) {\n          outputShape[this.axis] += dataNShape[axisIndex];\n        }\n        // ensure all non-cancatenated axes match each other\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n          throw new Error(`non concat dimensions must match`);\n        }\n      }\n    }\n\n    const rank = outputShape.length;\n\n    let getTextureIndexWhereDataResidesMethod = ``;\n    // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n    if (inputs.length < 5) {\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesLinearSearch(inputs.length);\n    } else {\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesBinarySearch(inputs.length);\n    }\n\n    const fetchDataFromCorrectTextureMethod = this.fetchDataFromCorrectTextureMethod(inputs.length, rank);\n    const getValueFromArrayIndexMethod = this.getValueFromArrayIndexMethod(inputs.length);\n    const samplers = inputs.map((v, i) => `X${i}`);\n    const shaderSource = `\n      ${fetchDataFromCorrectTextureMethod}\n      ${getValueFromArrayIndexMethod}\n      ${getTextureIndexWhereDataResidesMethod}\n      float process(int indices[${rank}]) {\n        int textureIndex = getTextureWhereDataResides (indices[${this.axis}]);\n\n        if(textureIndex != 0) {\n          indices[${this.axis}] = indices[${\n        this.axis}] - int(getValueFromArrayIndex(sizeInConcatAxis, textureIndex-int(1)));\n        }\n\n        return fetchDataFromCorrectTexture(textureIndex, indices);\n      }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers,\n      variables: [{name: 'sizeInConcatAxis', type: 'int', arrayLength: inputs.length}],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    const sizeInConcatAxis = new Array<number>(programInfo.inputLayouts.length);\n    let previousSum = 0;\n    for (let i = 0; i < programInfo.inputLayouts.length; ++i) {\n      previousSum += programInfo.inputLayouts[i].shape[this.axis];\n      sizeInConcatAxis[i] = previousSum;\n    }\n    const uniformData = {'sizeInConcatAxis': sizeInConcatAxis};\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData\n    };\n  }\n  private getTextureIndexWhereDataResidesLinearSearch(numberOfTensors: number): string {\n    return `int getTextureWhereDataResides(int index) {\n      for(int i=0; i<${numberOfTensors}; i++) {\n          if(index < int(sizeInConcatAxis[i])){\n              return i;\n          }\n        }\n      }`;\n  }\n\n  // TODO: Implement BinarySearch in GLSL\n  private getTextureIndexWhereDataResidesBinarySearch(numberOfTensors: number): string {\n    return this.getTextureIndexWhereDataResidesLinearSearch(numberOfTensors);\n  }\n\n  private fetchDataFromCorrectTextureMethod(numberOfTensors: number, tensorRank: number) {\n    const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n    for (let i = 0; i < numberOfTensors; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            `\\t` +\n            `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n      } else if (i === numberOfTensors - 1) {\n        codeLines.push(\n            `\\t` +\n            `else { return _X${i}(indices); }`);\n      } else {\n        codeLines.push(\n            `\\t` +\n            `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n      }\n    }\n    codeLines.push(\n        `\\t` +\n        `}`);\n    return codeLines.join('\\n');\n  }\n\n  private getValueFromArrayIndexMethod(arrayRank: number): string {\n    const codeLines: string[] = [`int getValueFromArrayIndex(int arr[${arrayRank}], int index) {`];\n    for (let i = 0; i < arrayRank; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            `\\t` +\n            `if (index == ${i}) { return arr[${i}]; }`);\n      } else if (i === arrayRank - 1) {\n        codeLines.push(\n            `\\t` +\n            `else { return arr[${i}]; }`);\n      } else {\n        codeLines.push(\n            `\\t` +\n            `else if (index == ${i}) { return arr[${i}]; }`);\n      }\n    }\n    codeLines.push(\n        `\\t` +\n        `}`);\n\n    return codeLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger} from '../../../instrument';\nimport {Conv} from '../../../ops/conv';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\nimport {WebGLContext} from '../webgl-context';\n\nexport class WebGLConv extends Conv {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const programManager = inferenceHandler.session.programManager;\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\n      for (let i = 0; i < programInfos.length; ++i) {\n        const artifact = inferenceHandler.session.programManager.build(programInfos[i]);\n        this.artifacts.push(artifact);\n      }\n    }\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\n    programManager.run(this.artifacts[0], runDatas[0]);\n    programManager.run(this.artifacts[1], runDatas[1]);\n    return [runDatas[1].outputTextureData.tensor];\n  }\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n    if (this.kernelShape.length === 0) {\n      const wDims = inputs[1].dims;\n      for (let i = 2; i < wDims.length; ++i) {\n        this.kernelShape.push(wDims[i]);\n      }\n    }\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\n    Logger.verbose(\n        'Conv',\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\n    const outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\n    const im2colProgramInfo = this.createIm2ColProgramInfo(inferenceHandler, inputs, outputShape);\n    const dotProductProgramInfo =\n        this.createDotProductProgramInfo(inferenceHandler, im2colProgramInfo.outputLayout, inputs, outputShape);\n    return [im2colProgramInfo, dotProductProgramInfo];\n  }\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\n    const k = inputs[1];\n    const b = inputs.length >= 3 ? inputs[2] : undefined;\n    let kTD = inferenceHandler.getTextureData(k.dataId);\n    if (!kTD) {\n      Logger.verbose('Conv', 'Did not find the adjustedKernel texture in the cache. Creating rew.');\n      const newKernelData =\n          WebGLConv.prepKernelForDotProduct(k.dims.slice(), this.group, 4, k.floatData as Float32Array);\n      // hack: should use graph transformer to rewrite initializer K\n      kTD = inferenceHandler.createTextureDataFromLayoutBindTensor(\n          programInfos[1].inputLayouts[1], k.type, newKernelData, k);\n    }\n    const runtDataIm2Col = {\n      inputTextureDatas: [inferenceHandler.getOrCreateTextureData(inputs[0])],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, inputs[0].type),\n      uniformData: {}\n    };\n    const inputTDs = [runtDataIm2Col.outputTextureData, kTD];\n    if (b) {\n      inputTDs.push(inferenceHandler.getOrCreateTextureData(b));\n    }\n    const outputTD = inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, inputs[0].type);\n    const runDataDotProduct = {\n      inputTextureDatas: inputTDs,\n      outputTextureData: outputTD,\n      uniformData: {},\n      draw: (glContext: WebGLContext, artifact: Artifact) => {\n        const gl = glContext.gl;\n        const sharedDim = artifact.programInfo.params!.sharedDim as number;\n        const sharedDimReadSize = artifact.programInfo.params!.sharedDimReadSize as number;\n        const sharedDimOffsetLocation = artifact.uniformLocations.find(l => l.name === 'sharedDimOffset')!.location;\n        let blend = false;\n        for (let k = 0; k < sharedDim; k += sharedDimReadSize) {\n          Logger.verbose('MatMul2D', `k = ${k}, sharedDim: ${sharedDim}, readSize = ${sharedDimReadSize}`);\n\n          if (k === sharedDimReadSize) {\n            blend = true;\n            gl.enable(gl.BLEND);\n            glContext.checkError();\n            gl.blendEquation(gl.FUNC_ADD);\n            glContext.checkError();\n            gl.blendFunc(gl.ONE, gl.ONE);\n            glContext.checkError();\n          }\n\n          gl.uniform1i(sharedDimOffsetLocation, k);\n          glContext.checkError();\n          glContext.draw();\n        }\n\n        if (blend) {\n          gl.disable(gl.BLEND);\n          glContext.checkError();\n        }\n      }\n    };\n    return [runtDataIm2Col, runDataDotProduct];\n  }\n  createIm2ColProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], outputShape: number[]):\n      ProgramInfo {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n\n    const rank = outputShape.length;\n    const im2colDims = WebGLConv.calcIm2ColDims(xshape, kshape, outputShape, 4);\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(\n        im2colDims, 4, [im2colDims[0], im2colDims[1], im2colDims[2], im2colDims[3] * 4], {breakAxis: 3});\n    const shaderSource = `\n      const int XC = ${xshape[1]};\n      const int XH = ${xshape[2]};\n      const int XW = ${xshape[3]};\n      const int KH = ${this.kernelShape[0]};\n      const int KW = ${this.kernelShape[1]};\n      const int dilationH = ${this.dilations[0]};\n      const int dilationW = ${this.dilations[1]};\n      const int strideH = ${this.strides[0]};\n      const int strideW = ${this.strides[1]};\n      const int padH = ${this.pads[0]};\n      const int padW = ${this.pads[1]};\n      const int KHKW = KH*KW;\n      const int XCKHKW = XC * KHKW;\n      const int outputChannels = 4;\n\n      vec4 process(int indices[${rank}]) {\n        int b  = indices[0]; // batch size\n        int oh = indices[1] * strideH - padH; //output height\n        int ow = indices[2] * strideW - padW; //output width\n        int p = indices[3] * outputChannels; //patch\n        vec4 v = vec4(0.0);\n        for(int i=0; i < outputChannels; ++i) {\n          if(p < XCKHKW) {\n            int patchC = p / KHKW;\n            int patchH = (p - patchC*KHKW) / KW;\n            int patchW = (p - patchC*KHKW) - patchH * KW;\n            int xh2 = oh + patchH * dilationH;\n            int xw2 = ow + patchW * dilationW;\n            int x[${xshape.length}];\n            x[0] = b;\n            x[1] = patchC;\n            x[2] = xh2;\n            x[3] = xw2;\n            if(xh2 >= 0 &&\n                xh2 < XH &&\n                xw2 >= 0 &&\n                xw2 < XW) {\n              v[i] = _X(x);\n            }\n          }\n          ++p;\n        }\n        return v;\n      }\n      `;\n    return {\n      inputLayouts: [inferenceHandler.createTextureLayoutFromShape(xshape)],\n      outputLayout,\n      samplers: ['X'],\n      shaderSource,\n    };\n  }\n  createDotProductProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, im2colLayout: TextureLayout, inputs: Tensor[],\n      outputShape: number[]): ProgramInfo {\n    const xshape = inputs[0].dims.slice();\n    const kshape = inputs[1].dims.slice();\n    const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n    const kLayout = inferenceHandler.createTextureLayoutFromShape(\n        adjustedKernelShape, 4, [adjustedKernelShape[0], adjustedKernelShape[1] * 4], {breakAxis: 1});\n\n    let bLayout: TextureLayout|undefined;\n    const rank = outputShape.length;\n\n    const inputLayouts = [im2colLayout, kLayout];\n    if (inputs.length === 3) {\n      bLayout = inferenceHandler.createTextureLayoutFromShape(inputs[2].dims.slice());\n      inputLayouts.push(bLayout);\n    }\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(outputShape);\n    const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n    const sharedDim = im2colLayout.shape[3];\n    const blendEnabled = inferenceHandler.session.backend.glContext.isBlendSupported;\n    const sharedDimReadSize = blendEnabled && inferenceHandler.session.backend.matmulMaxBatchSize ?\n        this.calcSharedDimReadSize(inferenceHandler.session.backend.matmulMaxBatchSize, sharedDim) :\n        sharedDim;\n    const samplers = ['Im2Col', 'K'];\n    if (inputs.length === 3) {\n      samplers.push('B');\n    }\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n    float process(int indices[${rank}]) {\n      int b[1];\n      b[0] = indices[1];\n      int im2col[${im2colLayout.shape.length}];\n      im2col[0] = indices[0];\n      im2col[1] = indices[2];\n      im2col[2] = indices[3];\n      int im2colOffset = im2col[0] * ${im2colLayout.strides[0]} + im2col[1] * ${\n        im2colLayout.strides[1]} + im2col[2] * ${im2colLayout.strides[2]} + sharedDimOffset;\n      int kernelOffset = indices[1] * ${kLayout.strides[0]} + sharedDimOffset;\n      float sum = sharedDimOffset == 0 ? ${initValue} : 0.0;\n      for (int i = 0; i < ${sharedDimReadSize}; ++i) {\n        vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colLayout.width}, ${im2colLayout.height});\n        vec2 kernelCoords = offsetToCoords(kernelOffset, ${kLayout.width}, ${kLayout.height});\n        sum += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n        ++im2colOffset;\n        ++kernelOffset;\n      }\n      return sum;\n    }`;\n    return {\n      inputLayouts: inputs.length === 3 ? [im2colLayout, kLayout, bLayout!] : [im2colLayout, kLayout],\n      outputLayout,\n      shaderSource,\n      samplers,\n      variables: [{name: 'sharedDimOffset', type: 'int'}],\n      params: {'sharedDim': sharedDim, 'sharedDimReadSize': sharedDimReadSize}\n    };\n  }\n  static prepKernelForDotProduct(shape: number[], group: number, channels: number, kernel: Float32Array): Float32Array {\n    if (group === 1 && (channels === 1 || (shape[2] * shape[3]) % channels === 0)) {\n      return kernel;\n    }\n    const numFeatureMaps = shape[0];\n    const oldRowSize = shape[1] * shape[2] * shape[3];\n    const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n    const newSize = numFeatureMaps * newRowSize;\n    const buffer = new Float32Array(newSize);\n    for (let f = 0; f < numFeatureMaps; ++f) {\n      const oldOffset = f * oldRowSize;\n      const newOffset = f * newRowSize + f % group * oldRowSize;\n      buffer.set(kernel.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n    }\n    return buffer;\n  }\n  static calcIm2ColDims(inputShape: number[], kernelShape: number[], outputShape: number[], channels = 1): number[] {\n    return [\n      outputShape[0], outputShape[2], outputShape[3],\n      Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)\n    ];\n  }\n  static calcOutputShape(\n      inputShape: number[], kernelShape: number[], dilations: number[], adjustPads: number[],\n      strides: number[]): number[] {\n    const batchSize = inputShape[0];\n    const inputSpatialShape = inputShape.slice(2);\n    const spatialRank = inputSpatialShape.length;\n    const outChannels = kernelShape[0];\n    const kernelSpatialShape = kernelShape.slice(2);\n    const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n    const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n    const outputSpatialShape =\n        inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n    const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n    return outputShape;\n  }\n  protected calcSharedDimReadSize(preferredBatchSize: number, sharedDim: number): number {\n    if (preferredBatchSize <= 0 || sharedDim < preferredBatchSize || sharedDim % preferredBatchSize !== 0) {\n      return sharedDim;\n    }\n    return preferredBatchSize;\n  }\n  protected calcBlockSize(outputLayout: TextureLayout): [number, number]|undefined {\n    const preferredRowCount = 64;\n    const preferredColCount = 64;\n    if (outputLayout.height < preferredRowCount) {\n      return undefined;\n    }\n    return [preferredColCount, preferredRowCount];\n  }\n  protected artifacts: Artifact[];\n  protected readSize = 8;\n  protected blockSize = 64;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Dropout} from '../../../ops/dropout';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLDropout extends Dropout implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (this.testMode) {\n      return [inputs[0]];\n    }\n    throw new Error(`Non test mode Dropout is not implemented yet`);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    throw new Error(`Non test mode Dropout is not implemented yet`);\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    throw new Error(`Non test mode Dropout is not implemented yet`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Elu} from '../../../ops/elu';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLElu extends Elu implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      void main() {\n        float v = ${glsl.texture2D}(A, TexCoords).r;\n        ${glsl.output} = vec4(v >= 0.0 ? v: (exp(v) - 1.0) * ${this.alpha.toExponential()}); /* float number format */\n      }\n      `;\n    return {\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n      hasMain: true,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Elu implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.alpha = attributes.getFloat('alpha', 1.0);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected alpha: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Flatten} from '../../../ops/flatten';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {reshape} from './reshape';\n\nexport class WebGLFlatten extends Flatten {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.flattenShape(inputs[0].dims, this.axis);\n\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Licensed under the MIT license.\n\nimport {Gather} from '../../../ops/gather';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLGather extends Gather implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    const indexDataShape = inputs[1].dims.slice();\n    const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n    if (outputShape.length === 0) {\n      throw Error('A scalar tensor output has not been supported');\n    }\n\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\n    const indexCopyOps: string[] = [];\n    for (let i = 0; i < outputShape.length; i++) {\n      // outputShape is divided into three parts: A, B, C\n      // |0        axis|  axis + indexDataShape.length |          end|\n      // |     A       |             B                 |      C      |\n      //\n      // inputIdx: [A, inputs[1][B], C]\n      if (i < axis) {  // A\n        outputShape[i] = inputShape[i];\n        indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n      } else {\n        if (i < axis + indexDataShape.length) {  // B\n          outputShape[i] = indexDataShape[i - axis];\n          indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n        } else {                                                       // C\n          outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n          indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n        }\n      }\n    }\n\n    const orank = outputShape.length;\n    const irank = inputShape.length;\n    const iDrank = indexDataShape.length;\n    const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'B'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Gemm} from '../../../ops/gemm';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLGemm extends Gemm implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const aShape = inputs[0].dims.slice();\n    const bShape = inputs[1].dims.slice();\n    const [M, N] = GemmUtil.getShapeOfGemmResult(\n        aShape, this.transA, bShape, this.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n    const oShape = [M, N];\n    if (!oShape) {\n      throw new Error('Can\\'t use gemm on the given tensors');\n    }\n    let sharedDim = aShape[aShape.length - 1];\n    let line = '';\n    if (this.transA) {\n      sharedDim = aShape[0];\n    }\n    if (this.transA && this.transB) {\n      line = `value += _A_T(a) * _B_T(b);`;\n    } else if (this.transA && !this.transB) {\n      line = `value += _A_T(a) * _B(b);`;\n    } else if (!this.transA && this.transB) {\n      line = `value += _A(a) * _B_T(b);`;\n    } else if (!this.transA && !this.transB) {\n      line = `value += _A(a) * _B(b);`;\n    }\n    const rank = oShape.length;\n    const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n    const broadcastC = inputs.length === 3 ? `bcastIndices_C(indices, c);` : '';\n    const calculateC = inputs.length === 3 ? `value += beta * _C(c);` : '';\n    const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n    const inputLayouts = inputs.map(t => inferenceHandler.getOrCreateTextureLayout(t));\n    return {\n      inputLayouts,\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(oShape),\n      samplers: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n      variables: [{name: 'alpha', type: 'float'}, {name: 'beta', type: 'float'}],\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => inferenceHandler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {'alpha': this.alpha, 'beta': this.beta}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {ImageScaler} from '../../../ops/image-scaler';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLImageScaler extends ImageScaler implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const rank = outputShape.length;\n    const getBiasMethod = this.createGetBiasMethod(this.bias.length);\n    const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n    return {\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['X'],\n      variables: [{name: 'bias', type: 'float', arrayLength: this.bias.length}, {name: 'scale', type: 'float'}],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {'bias': this.bias, 'scale': this.scale}\n    };\n  }\n  private createGetBiasMethod(numChannels: number): string {\n    const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n    for (let i = 0; i < numChannels; ++i) {\n      if (i === 0) {\n        codeLines.push(\n            `\\t` +\n            `if (channel == ${i}) { return bias[${i}]; }`);\n      } else if (i === numChannels - 1) {\n        codeLines.push(\n            `\\t` +\n            `else { return bias[${i}]; }`);\n      } else {\n        codeLines.push(\n            `\\t` +\n            `else if (channel == ${i}) { return bias[${i}]; }`);\n      }\n    }\n    codeLines.push(\n        `\\t` +\n        `}`);\n    return codeLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\n\nexport class WebGLInstanceNormalization extends InstanceNormalization {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\n      programInfos.forEach((pi, i) => {\n        const artifact = inferenceHandler.session.programManager.build(pi);\n        this.artifacts.push(artifact);\n      });\n    }\n\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\n    return [runDatas[1].outputTextureData.tensor];\n  }\n\n  checkInputTypes(inputs: Tensor[]): boolean {\n    if (!super.checkInputTypes(inputs)) {\n      return false;\n    }\n\n    if (inputs[0].dims.length !== 4) {\n      // currently webgl implementation only support 4-D input.\n      return false;\n    }\n\n    return true;\n  }\n\n  createMeanAndVarianceProgramInfo(inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout): ProgramInfo {\n    const xDims = xLayout.shape;\n    const channel = xDims[1];\n    const channelSize = xDims[2] * xDims[3];\n    const outputShape = [xDims[0], channel];\n    const outputUnpackedShape = [xDims[0], channel * 4];\n\n    const shaderSource = `\n    vec4 process(int[2] indices) {\n      vec4 v = vec4(0.0);\n      int a[4];\n      a[0] = indices[0];\n      a[1] = indices[1];\n      float temp = 0.0;\n      for(int a2=0; a2<${xDims[2]}; a2++) {\n        a[2] = a2;\n        for(int a3=0; a3<${xDims[3]}; a3++) {\n          a[3] = a3;\n          float x = _X(a);\n          temp += x;\n        }\n      }\n      float mean = temp / float(${channelSize});\n      temp = 0.0;\n      for(int a2=0; a2<${xDims[2]}; a2++) {\n        a[2] = a2;\n        for(int a3=0; a3<${xDims[3]}; a3++) {\n          a[3] = a3;\n          float x = _X(a);\n          temp += (x - mean) * (x - mean);\n        }\n      }\n      v.r = mean;\n      v.g = temp / float(${channelSize});\n\n      return v;\n    }`;\n    return {\n      inputLayouts: [xLayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape, 4, outputUnpackedShape),\n      samplers: ['X'],\n      shaderSource,\n    };\n  }\n\n  createComputOutputProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout, scaleLayout: TextureLayout,\n      bLayout: TextureLayout, meanAndVarianceLayout: TextureLayout): ProgramInfo {\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n    vec4 getMeanAndVariance(int[2] mv) {\n      int offset = indicesToOffset_MeanAndVariance(mv);\n      vec2 coords = offsetToCoords(offset, ${meanAndVarianceLayout.width}, ${meanAndVarianceLayout.height});\n      return ${glsl.texture2D}(MeanAndVariance, coords);\n    }\n\n    float process(int[4] indices) {\n\n          int mv[2];\n          mv[0] = indices[0];\n          mv[1] = indices[1];\n          vec4 mean_and_variance = getMeanAndVariance(mv);\n          float mean = mean_and_variance.r;\n          float variance = mean_and_variance.g;\n\n          int sb[1];\n          sb[0] = indices[1];\n          float scale = _Scale(sb);\n          float b = _B(sb);\n\n          return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n        }`;\n    return {\n      inputLayouts: [xLayout, meanAndVarianceLayout, scaleLayout, bLayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(xLayout.shape),\n      samplers: ['X', 'MeanAndVariance', 'Scale', 'B'],\n      variables: [{name: 'epsilon', type: 'float'}],\n      shaderSource,\n    };\n  }\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\n    const xLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\n    const scaleLayout = inferenceHandler.getOrCreateTextureLayout(inputs[1]);\n    const bLayout = inferenceHandler.getOrCreateTextureLayout(inputs[2]);\n    const meanAndVarianceProgramInfo = this.createMeanAndVarianceProgramInfo(inferenceHandler, xLayout);\n    const computeOutputProgramInfo = this.createComputOutputProgramInfo(\n        inferenceHandler, xLayout, scaleLayout, bLayout, meanAndVarianceProgramInfo.outputLayout);\n\n    const programInfos: ProgramInfo[] = [meanAndVarianceProgramInfo, computeOutputProgramInfo];\n    return programInfos;\n  }\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\n    const dataType = inputs[0].type;\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\n    const scaleTD = inferenceHandler.getOrCreateTextureData(inputs[1], programInfos[1].inputLayouts[2]);\n    const bTD = inferenceHandler.getOrCreateTextureData(inputs[2], programInfos[1].inputLayouts[3]);\n    const runDatas: RunData[] = [];\n    runDatas.push({\n      inputTextureDatas: [inputTD],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\n      uniformData: {}\n    });\n    runDatas.push({\n      inputTextureDatas: [inputTD, runDatas[0].outputTextureData, scaleTD, bTD],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, dataType),\n      uniformData: {'epsilon': this.epsilon}\n    });\n    return runDatas;\n  }\n  protected artifacts: Artifact[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {LeakyRelu} from '../../../ops/leaky-relu';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLLeakyRelu extends LeakyRelu implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      void main() {\n        float v = ${glsl.texture2D}(A, TexCoords).r;\n        ${glsl.output} = vec4(v < 0.0 ? v * float(${this.alpha}) : v);\n      }\n      `;\n    return {\n      hasMain: true,\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class LeakyRelu implements Operator {\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.alpha = attributes.getFloat('alpha', 0.01);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected alpha: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {MatMul} from '../../../ops/matmul';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLMatMul extends MatMul implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const aShape = inputs[0].dims;\n    const bShape = inputs[1].dims;\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n    if (!outputShape) {\n      throw new Error('Can\\'t use matmul on the given tensors');\n    }\n    const rank = outputShape.length;\n    const arank = aShape.length;\n    const brank = bShape.length;\n    const sharedDim = aShape[aShape.length - 1];\n    const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${arank}];\n          int b[${brank}];\n          bcastMatmulIndices_A(indices, a);\n          bcastMatmulIndices_B(indices, b);\n\n          float value;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${arank - 1}] = k;\n              b[${brank - 2}] = k;\n              value += _A(a) * _B(b);\n          }\n          return value;\n      }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'B'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Pad} from '../../../ops/pad';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\n\nexport class WebGLPad extends Pad implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), this.pads);\n    const rank = outputShape.length;\n    const alayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\n    const padFunction = getPadFunction(\n        getGlsl(inferenceHandler.session.backend.glContext.version), 'A', alayout, this.mode, this.pads, this.value);\n    const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n    return {\n      inputLayouts: [alayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\nexport function getPadFunction(\n    glsl: Glsl, name: string, inputLayout: TextureLayout, mode: string, pads: number[], value: number): string {\n  switch (mode) {\n    case 'constant':\n      return getPadConstant(\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads, value);\n    case 'reflect':\n      return getPadReflect(\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\n    case 'edge':\n      return getPadEdge(\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n}\nfunction getPadConstant(\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\n    height: number, pads: number[], value: number) {\n  const rank = shape.length;\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n          k = m[${i}] - ${pads[i]};\n          if (k < 0)  return constant;\n          if (k >= ${shape[i]}) return constant;\n          offset += k * ${strides[i]};\n          `;\n  }\n  return `\n        float pad${name}(int m[${rank}]) {\n          const float constant = float(${value});\n          int offset = 0;\n          int k = 0;\n          ${block}\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\n          return value;\n        }\n        `;\n}\nfunction getPadReflect(\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\n    height: number, pads: number[]) {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n  }\n  return `\n      float pad${name}(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\n        return value;\n      }\n      `;\n}\nfunction getPadEdge(\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\n    height: number, pads: number[]) {\n  const rank = shape.length;\n\n  let block = '';\n  for (let i = rank - 1; i >= 0; --i) {\n    block += `\n      k = m[${i}] - ${pads[i]};\n      if (k < 0)  k = 0;\n      if (k >= ${shape[i]}) k = ${shape[i] - 1};\n      offset += k * ${strides[i]};\n      `;\n  }\n  return `\n    float pad${name}(int m[${rank}]) {\n      int offset = 0;\n      int k = 0;\n      ${block}\n      vec2 coords = offsetToCoords(offset, ${width}, ${height});\n      float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\n      return value;\n    }\n    `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\n\nexport class WebGLGlobalAveragePool extends GlobalAveragePool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createAveragePoolProgramInfo(\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLAveragePool extends AveragePool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createAveragePoolProgramInfo(\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\nfunction createAveragePoolProgramInfo(\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\n    autoPad = '', strides: number[] = [], pads: number[] = [], countIncludePad: boolean): ProgramInfo {\n  const inputShape = inputs[0].dims.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\n  const outputShape =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\n  const kernelSize = ShapeUtil.size(kernelShape);\n  const op1 = `value += _X(x);`;\n  let op2 = ``;\n  if (countIncludePad) {\n    op2 += `value /= float(${kernelSize});`;\n  } else {\n    op2 += `value /= float(${kernelSize} - pad);`;\n  }\n  const inputLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\n  const poolingCode = GeneratePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '0.0');\n  const shaderSource = `\n      ${poolingCode}\n    `;\n  return {\n    inputLayouts: [inputLayout],\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n    samplers: ['X'],\n    shaderSource,\n  };\n}\n\nexport class WebGLGlobalMaxPool extends GlobalMaxPool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createMaxPoolProgramInfo(\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLMaxPool extends MaxPool implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createMaxPoolProgramInfo(\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads);\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\nfunction createMaxPoolProgramInfo(\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\n    autoPad = '', strides: number[] = [], pads: number[] = []): ProgramInfo {\n  const inputShape = inputs[0].dims.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\n  const outputShape =\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\n  const op1 = `\n              value = max(_X(x), value);\n      `;\n  const op2 = ``;\n  const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\n  const poolingCode = GeneratePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '-1e5');\n  const shaderSource = `\n    ${poolingCode}\n  `;\n  return {\n    inputLayouts: [inputLayout],\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n    samplers: ['X'],\n    shaderSource,\n  };\n}\n\nexport function GeneratePoolingCode(\n    x: TextureLayout, kernelShape: number[], pads: number[], strides: number[], op1: string, op2: string,\n    startVal: string): string {\n  const inputDims = x.shape;\n  const rank = x.shape.length;\n  if (kernelShape.length <= 2) {\n    const kw = kernelShape[kernelShape.length - 1];\n    const sw = strides[strides.length - 1];\n    const pwStart = pads[pads.length / 2 - 1];\n    const pwEnd = pads[pads.length - 1];\n    const dimW = inputDims[rank - 1];\n    let codeW = ``;\n    let codeH = ``;\n    let codeHEnd = ``;\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n                for (int i = 0; i < ${kw}; i++) {\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n                  if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n                    pad++;\n                    continue;\n                  }\n                  ${op1}\n                }`;\n    } else {\n      codeW = `\n                for (int i = 0; i < ${kw}; i++) {\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n                  ${op1}\n                }`;\n    }\n\n    if (kernelShape.length === 2) {\n      const kh = kernelShape[kernelShape.length - 2];\n      const sh = strides[strides.length - 2];\n      const phStart = pads[pads.length / 2 - 2];\n      const phEnd = pads[pads.length - 2];\n      const dimH = inputDims[rank - 2];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n              for (int j = 0; j < ${kh}; j++) {\n                x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n                if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                  pad+= ${kw};\n                  continue;\n                }\n            `;\n      } else {\n        codeH = `\n                for (int j = 0; j < ${kh}; j++) {\n                  x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            float process(int indices[${rank}]) {\n              int x[${rank}];\n              copyVec(indices, x);\n\n              float value = ${startVal};\n              int pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n              return value;\n            }\n          `;\n    return poolingCode;\n  } else {\n    const kernelSize = ShapeUtil.size(kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = pads.length;\n    const offsetToIndicesFunction = offsetToIndices(stridesRank);\n    const copyInputDims = copyArray(inputDims, 'inputDims');\n    const copyPads = copyArray(pads, 'pads');\n    const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n    const copyStrides = copyArray(strides, 'strides');\n    const hasPads = pads.reduce((sum, cur) => sum + cur);\n    let padCode = ``;\n    if (hasPads) {\n      padCode = `\n                if (x[j] >= inputDims[j] || x[j] < 0) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n                  }\n                  ${op1}`;\n    }\n    const poolingCode = `\n            ${offsetToIndicesFunction}\n            float process(int indices[${rank}]) {\n                int x[${rank}];\n                copyVec(indices, x);\n                int offset[${stridesRank}];\n                int pads[${padsRank}];\n                int inputDims[${rank}];\n                int kernelStrides[${stridesRank}];\n                int strides[${stridesRank}];\n                ${copyPads}\n                ${copyInputDims}\n                ${copyStrides}\n                ${copyKernelStrides}\n\n                float value = ${startVal};\n                int pad = 0;\n                bool isPad = false;\n                for (int i = 0; i < ${kernelSize}; i++) {\n                    offsetToIndices(i, kernelStrides, offset);\n                    isPad = false;\n                    for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n                      x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                        + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n                      ${padCode}\n                }\n                ${op2}\n\n                return value;\n            }`;\n    return poolingCode;\n  }\n}\n\nexport function copyArray(array: ReadonlyArray<number>, arrayName: string): string {\n  let block = ``;\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n}\n\nexport function offsetToIndices(rank: number): string {\n  return `\n    void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n      if (${rank} == 0) {\n        return;\n      }\n      for (int i = 0; i < ${rank} - 1; ++i) {\n        indices[i] = offset / strides[i];\n        offset -= indices[i] * strides[i];\n      }\n      indices[${rank} - 1] = offset;\n    }`;\n}\n","// Licensed under the MIT license.\n\nimport {ReduceBase} from '../../../ops/reduce-op';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nabstract class WebGLGenericReduce extends ReduceBase implements WebGLOperator {\n  abstract getOps(inputs: Tensor[], axes: number[]): string[];\n\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape: number[] = [];\n    const iRank = inputs[0].dims.length || 1;\n\n    const idxCopy = [];  // copy output indexes to input indexes\n\n    const axes = ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length);\n    const ops = this.getOps(inputs, axes);  // [init ops, reduce ops, final ops]\n    let reduceOps = ops[1];\n\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      // if this axis is reduced\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        if (this.keepDims) {\n          outputShape.push(1);\n        }  // else { remove the axis from outputShape; }\n\n        // loop over the d-th axis\n        reduceOps = `\n        for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n          inputIdx[${k}] = j${k};\n          ${reduceOps}\n        }\n        `;\n      } else {\n        idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n        outputShape.push(inputs[0].dims[k]);\n      }\n    }\n\n    const oRank = outputShape.length || 1;\n\n    const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport class WebGLReduceSum extends WebGLGenericReduce {\n  getOps(inputs: Tensor[]): string[] {\n    return ['value = 0.0;', 'value += _A(inputIdx);', ''];\n  }\n}\n\nexport class WebGLReduceMean extends WebGLGenericReduce {\n  getOps(inputs: Tensor[], axes: number[]): string[] {\n    let size = 1.0;\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        size *= inputs[0].dims[k];\n      }\n    }\n\n    return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n  }\n}\n\nexport class WebGLReduceMax extends WebGLGenericReduce {\n  getOps(inputs: Tensor[], axes: number[]): string[] {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n  }\n}\n\nexport class WebGLReduceMin extends WebGLGenericReduce {\n  getOps(inputs: Tensor[], axes: number[]): string[] {\n    const idxZero = [];\n    for (let k = 0; k < inputs[0].dims.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n  }\n}\n\nexport class WebGLReduceProd extends WebGLGenericReduce {\n  getOps(inputs: Tensor[]): string[] {\n    return ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n  }\n}\n\nexport class WebGLReduceLogSum extends WebGLGenericReduce {\n  getOps(inputs: Tensor[]): string[] {\n    return ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n  }\n}\n\nexport class WebGLReduceSumSquare extends WebGLGenericReduce {\n  getOps(inputs: Tensor[]): string[] {\n    return ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n  }\n}\n","// Licensed under the MIT license.\n\nimport {Slice, SliceV10} from '../../../ops/slice';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLSlice extends Slice implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    return createProgramInfo(handler, inputs[0], this.starts, this.ends, this.axes);\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    return createRunData(handler, programInfo, inputs);\n  }\n}\n\nexport class WebGLSliceV10 extends SliceV10 implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    if (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId) ||\n        (inputs.length >= 4 && !handler.session.isInitializer(inputs[3].dataId)) ||\n        (inputs.length >= 5 && !handler.session.isInitializer(inputs[4].dataId))) {\n      throw new Error(`dynamic slice attributes are not allowed`);\n    }\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n      throw new Error(`currently non-1 steps is not supported for Slice`);\n    }\n    const starts = Array.from(inputs[1].integerData);\n    const ends = Array.from(inputs[2].integerData);\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n\n    return createProgramInfo(handler, inputs[0], starts, ends, axes);\n  }\n\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    return createRunData(handler, programInfo, inputs);\n  }\n}\n\nfunction createProgramInfo(\n    handler: WebGLInferenceHandler, x: Tensor, starts: ReadonlyArray<number>, ends: ReadonlyArray<number>,\n    axes: ReadonlyArray<number>): ProgramInfo {\n  if (axes.length === 0) {\n    axes = x.dims.slice(0).map((val, ind) => ind);\n  }\n  axes = ShapeUtil.normalizeAxes(axes, x.dims.length);\n  starts = starts.map((start, ind) => {\n    if (start > x.dims[axes[ind]] - 1) {\n      return x.dims[axes[ind]];\n    }\n    return ShapeUtil.normalizeAxis(start, x.dims[axes[ind]]);\n  });\n  ends = ends.map((end, ind) => {\n    if (end > x.dims[axes[ind]] - 1) {\n      return x.dims[axes[ind]];\n    }\n    return ShapeUtil.normalizeAxis(end, x.dims[axes[ind]]);\n  });\n\n  const outputShape = x.dims.slice();\n\n  const sliceOps: string[] = [];\n  for (let i = 0; i < axes.length; i++) {\n    outputShape[axes[i]] = ends[i] - starts[i];\n    if (starts[i] > 0) {\n      sliceOps.push(`outputIdx[${axes[i]}] += ${starts[i]};`);\n    }  // else { sliceOps.push(`outputIdx[${axes[i]}] += 0;`); }\n  }\n\n  const rank = outputShape.length;\n  const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n  return {\n    inputLayouts: [handler.getOrCreateTextureLayout(x)],\n    outputLayout: handler.createTextureLayoutFromShape(outputShape),\n    samplers: ['A'],\n    shaderSource,\n  };\n}\n\nfunction createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n  const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n  return {\n    inputTextureDatas: inputTDs,\n    outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n    uniformData: {}\n  };\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Softmax} from '../../../ops/softmax';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\n\nexport class WebGLSoftmax extends Softmax {\n  constructor() {\n    super();\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\n      programInfos.forEach((pi, i) => {\n        const artifact = inferenceHandler.session.programManager.build(pi);\n        this.artifacts.push(artifact);\n      });\n    }\n\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\n    // return only the last output\n    return [runDatas[runDatas.length - 1].outputTextureData.tensor];\n  }\n  createSoftMaxProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, input: Tensor, N: number, D: number,\n      maxElementPerLogicalRow: TextureLayout, normalizationPerLogicalRow: TextureLayout): ProgramInfo {\n    const inputShape = input.dims.slice();\n    const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\n    const outputShape = inputShape;\n    const rank = outputShape.length;\n    const textureWidth = inputLayout.width;\n    const textureHeight = inputLayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\n    }\n\n    if (maxElementPerLogicalRow.shape.length !== 1 || normalizationPerLogicalRow.shape.length !== 1) {\n      throw new Error(`Dimensionality of the intermediate results should be 1`);\n    }\n\n    if (maxElementPerLogicalRow.shape[0] !== N || normalizationPerLogicalRow.shape[0] !== N) {\n      throw new Error(`Shape of the intermediate results should be equal to logical row count`);\n    }\n\n    const shaderSource = `\n    float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${D};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n    return {\n      inputLayouts: [inputLayout, maxElementPerLogicalRow, normalizationPerLogicalRow],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'Max', 'Norm'],\n      shaderSource,\n    };\n  }\n\n  /**\n   * Create a texture that contains the normalization factor for each of the 'N' rows\n   */\n  createComputScaleProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, maxElementPerLogicalRow: TextureLayout,\n      outputShape: number[]): ProgramInfo {\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\n    const rank = outputShape.length;\n    const textureWidth = xlayout.width;\n    const textureHeight = xlayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\n    }\n\n    if (outputShape.length !== 1) {\n      throw new Error(`Dimensionality of the output should be 1`);\n    }\n\n    if (outputShape[0] !== N) {\n      throw new Error(`Shape of the output should be equal to logical row count`);\n    }\n\n    if (maxElementPerLogicalRow.shape.length !== 1) {\n      throw new Error(`Dimensionality of the intermediate results should be 1`);\n    }\n\n    if (maxElementPerLogicalRow.shape[0] !== N) {\n      throw new Error(`Shape of the intermediate results should be equal to logical row count`);\n    }\n\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n    float process(int[${rank}] indices) {\n\n      int logical_row_start_offset = indices[0] * ${D};\n\n      float norm_factor = 0.0;\n      float max = _Max(indices);\n      for(int i=0; i<${D}; ++i)\n      {\n        norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\n        textureWidth}, ${textureHeight}))) - max);\n      }\n\n      return norm_factor;\n    }`;\n    return {\n      inputLayouts: [xlayout, maxElementPerLogicalRow],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A', 'Max'],\n      shaderSource,\n    };\n  }\n  /**\n   * Create a texture that contains the maximum value of each of the 'N' rows\n   */\n  createComputeMaxProgramInfo(\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, outputShape: number[]): ProgramInfo {\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\n    const rank = outputShape.length;\n    const textureWidth = xlayout.width;\n    const textureHeight = xlayout.height;\n\n    if (N < 1 || D < 1) {\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\n    }\n\n    if (outputShape.length !== 1) {\n      throw new Error(`Dimensionality of the output should be 1`);\n    }\n\n    if (outputShape[0] !== N) {\n      throw new Error(`Shape of the output should be equal to logical row count`);\n    }\n\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n    const shaderSource = `\n        float process(int[${rank}] indices) {\n\n          int logical_row_start_offset = indices[0] * ${D};\n\n          float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth}, ${\n        textureHeight} )));\n          for(int i=1; i<${D}; ++i)\n          {\n            float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\n        textureWidth}, ${textureHeight})));\n            if(current > max)\n              max = current;\n          }\n\n          return max;\n        }`;\n    return {\n      inputLayouts: [xlayout],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\n    const inputShape = inputs[0].dims.slice();\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\n    const N = ShapeUtil.sizeToDimension(inputShape, axis);\n    const D = ShapeUtil.sizeFromDimension(inputShape, axis);\n    const computeMaxProgramInfo = this.createComputeMaxProgramInfo(inferenceHandler, inputs[0], N, D, [N]);\n    const computeScaleProgramInfo =\n        this.createComputScaleProgramInfo(inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, [N]);\n    const softMaxProgramInfo = this.createSoftMaxProgramInfo(\n        inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, computeScaleProgramInfo.outputLayout);\n\n    const programInfos: ProgramInfo[] = [computeMaxProgramInfo, computeScaleProgramInfo, softMaxProgramInfo];\n    return programInfos;\n  }\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\n    const dataType = inputs[0].type;\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\n    const runDatas: RunData[] = [];\n    runDatas.push({\n      inputTextureDatas: [inputTD],\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\n      uniformData: {}\n    });\n    for (let i = 1; i < programInfos.length; ++i) {\n      runDatas.push({\n        inputTextureDatas: [...runDatas[i - 1].inputTextureDatas, runDatas[i - 1].outputTextureData],\n        outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[i].outputLayout, dataType),\n        uniformData: {}\n      });\n    }\n    return runDatas;\n  }\n  protected artifacts: Artifact[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Split} from '../../../ops/split';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData} from '../types';\n\nexport class WebGLSplit extends Split {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    if (!this.artifacts) {\n      this.artifacts = [];\n      const axis = ShapeUtil.normalizeAxis(this.axis, inputs[0].dims.length);\n      const count = this.getProgramCount(inferenceHandler, inputs, axis);\n      for (let i = 0; i < count; ++i) {\n        const programInfo = this.createProgramInfo(inferenceHandler, inputs[0], axis, i);\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\n        this.artifacts.push(artifact);\n      }\n    }\n    const results: Tensor[] = [];\n\n    this.artifacts.forEach(artifact => {\n      const rundata = this.createRunData(inferenceHandler, artifact.programInfo, inputs);\n      inferenceHandler.session.programManager.run(artifact, rundata);\n      results.push(rundata.outputTextureData.tensor);\n    });\n    return results;\n  }\n  getProgramCount(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): number {\n    const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, this.split, this.numOutputs);\n    return offsets.length;\n  }\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, input: Tensor, axis: number, index: number): ProgramInfo {\n    const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, this.split, this.numOutputs);\n    const offset = offsets[index];\n    const outputShape = shapes[index];\n    const rank = outputShape.length;\n    const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }`;\n    return {\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(input)],\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData:\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n  protected artifacts: Artifact[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Attribute} from '../attribute';\nimport {InferenceHandler} from '../backend';\nimport {Operator} from '../operators';\nimport {Tensor} from '../tensor';\n\nexport abstract class Split implements Operator {\n  constructor(protected numOutputs?: number) {}\n\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\n\n  initialize(attributes: Attribute): void {\n    this.axis = attributes.getInt('axis', 0);\n    this.split = attributes.getInts('split', []);\n  }\n\n  checkInputs(inputs: Tensor[]): boolean {\n    if (!inputs || inputs.length !== 1) {\n      return false;\n    }\n\n    return this.checkInputTypes(inputs);\n  }\n\n  protected checkInputTypes(inputs: Tensor[]): boolean {\n    if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n        inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n        inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected split: number[];\n  protected axis: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Squeeze} from '../../../ops/squeeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {reshape} from './reshape';\n\nexport class WebGLSqueeze extends Squeeze {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.squeezeShape(inputs[0].dims, this.axes);\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Sum} from '../../../ops/sum';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLSum extends Sum implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const outputShape = inputs[0].dims.slice();\n    const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n    const samplers = inputs.map((v, i) => `X${i}`);\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers,\n      shaderSource: `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }`,\n      hasMain: true\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Licensed under the MIT license.\n\nimport {Tile} from '../../../ops/tile';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLTile extends Tile implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShape = inputs[0].dims.slice();\n    const outputShape = new Array(inputShape.length);  // inputs[0].dims.slice();\n\n    const tileOps: string[] = [];\n    for (let i = 0; i < inputShape.length; i++) {\n      outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n      tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n    }\n\n    const rank = outputShape.length;\n    const shaderSource = `\n    float process(int outputIdx[${rank}]) {\n      int inputIdx[${rank}];\n      ${tileOps.join('\\n')}\n      return _A(inputIdx);\n    }`;\n    return {\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\n      samplers: ['A'],\n      shaderSource,\n    };\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Transpose} from '../../../ops/transpose';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {FunctionType, GlslPositionalFunction} from '../glsl-definitions';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLTranspose extends Transpose implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  getOutputShape(inputShapes: Array<ReadonlyArray<number>>): ReadonlyArray<number> {\n    const perm = this.getAdjustedPerm(inputShapes[0]);\n    return ShapeUtil.sortBasedOnPerm(inputShapes[0], perm);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputShapes = inputs.map(t => t.dims.slice());\n    const perm = this.getAdjustedPerm(inputShapes[0]);\n    const unpackedOutputShape = this.getOutputShape(inputShapes);\n    const rank = inputs[0].dims.length;\n    // A dims=[${inputs[0].dims.toString()}]\n    // out Dims=[${unpackedOutputShape.toString()}]\n    // based on perm=[${perm.toString()}]\n    const shaderSource = `\n      ${this.getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n    const outputLayout = handler.createTextureLayoutFromShape(unpackedOutputShape, 1, unpackedOutputShape);\n    return {inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])], outputLayout, samplers: ['A'], shaderSource};\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n  getPositionalFunction(handler: WebGLInferenceHandler, inputShape: number[], name?: string): GlslPositionalFunction {\n    const outputShape = this.getOutputShape([inputShape]);\n    if (!name) {\n      name = 'perm';\n    }\n    return {\n      name,\n      body: this.getPermFunctionBody(name, this.getAdjustedPerm(inputShape), outputShape.length),\n      type: FunctionType.Positional,\n      inputShape,\n      outputShape\n    };\n  }\n  protected getAdjustedPerm(inputShape: ReadonlyArray<number>): number[] {\n    let perm = this.perm;\n    if (perm && perm.length !== inputShape.length) {\n      perm = [...(inputShape.keys())].reverse();\n    }\n    return perm;\n  }\n  protected getPermFunctionBody(name: string, perm: number[], rank: number): string {\n    const reverseFunc = [];\n    reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n    for (let i = 0; i < rank; ++i) {\n      reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n    }\n    reverseFunc.push('\\t}');\n    return reverseFunc.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {UnaryOp} from '../../../ops/unary-op';\nimport {Tensor} from '../../../tensor';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\n\nexport class WebGLUnaryOp extends UnaryOp implements WebGLOperator {\n  constructor(protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected glslFunc: GlslValueFunction) {\n    super(typeConstraint);\n  }\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const outputShape = inputs[0].dims.slice();\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0]);\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    const shaderSource = `\n      ${this.glslFunc.body}\n      void main() {\n        vec4 v = ${glsl.texture2D}(A, TexCoords);\n        v = ${this.glslFunc.name}(v);\n        ${glsl.output} = v;\n      }\n      `;\n    const outputLayout = handler.createTextureLayoutFromShape(outputShape);\n    return {inputLayouts: [inputLayout], outputLayout, samplers: ['A'], shaderSource, hasMain: true};\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\n    return {\n      inputTextureDatas: inputTDs,\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\n      uniformData: {}\n    };\n  }\n}\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = `indentity_`;\n  const body = `\n  float ${name}(float a) {\n    return a;\n  }\n  vec4 ${name}(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = `neg_`;\n  const body = `\n  float ${name}(float a) {\n    return -a;\n  }\n  vec4 ${name}(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = `not_`;\n  const body = `\n  float ${name}(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}(bool a) {\n    return !a;\n  }\n  vec4 ${name}(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = `relu_`;\n  const body = `\n  float ${name}(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = `sigmoid_`;\n  const body = `\n  float ${name}(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = `tanh_`;\n  const body = `\n  float ${name}(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a) {\n    return ${fname}(a);\n  }\n  vec4 ${name}(vec4 v) {\n    return ${fname}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Unsqueeze} from '../../../ops/unsqueeze';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {reshape} from './reshape';\n\nexport class WebGLUnsqueeze extends Unsqueeze {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    const outputDims = ShapeUtil.unsqueezeShape(inputs[0].dims, this.axes);\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Upsample} from '../../../ops/upsample';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {Artifact, ProgramInfo, RunData, TextureLayout, VariableInfo, WebGLOperator} from '../types';\n\nexport class WebGLUpsample extends Upsample implements WebGLOperator {\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\n    return inferenceHandler.run(this, inputs);\n  }\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0]);\n    const [roi, scales, outputShape] = this.prepare(inputs);\n    this.roiCache = roi;\n    this.scalesCache = scales.map(x => Math.ceil(x));\n    const outputLayout = handler.createTextureLayoutFromShape(outputShape);\n    const dim = outputShape.length;\n\n    const glsl = getGlsl(handler.session.backend.glContext.version);\n    if (this.isResize) {\n      this.mappingOriginCache = [];\n      this.mappingWeightCache = [];\n      this.mappingExtrapolateCache = [];\n      this.mappingCoeffCache = [];\n      return createResizeProgramInfo(\n          glsl, this.mode, dim, inputLayout, outputLayout, scales, roi, this.useExtrapolation, this.extrapolationValue,\n          this.cubicCoefficientA, this.excludeOutside, this.coordinateTransformMode, this.getOriginalCoordinate,\n          this.getNearestPixel, this.mappingOriginCache, this.mappingWeightCache, this.mappingExtrapolateCache,\n          this.mappingCoeffCache);\n    } else {\n      return createUpsampleProgramInfo(glsl, this.mode, dim, inputLayout, outputLayout, scales);\n    }\n  }\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\n    const inputTD = handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0]);\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTD.tensor.type);\n    return {\n      inputTextureDatas: [inputTD],\n      outputTextureData: outputTD,\n      uniformData: {\n        scales: this.scalesCache,\n        mo: this.mappingOriginCache,\n        me: this.mappingExtrapolateCache,\n        mw: this.mappingWeightCache,\n        mc: this.mappingCoeffCache\n      }\n    };\n  }\n\n  protected roiCache: number[];\n  protected scalesCache: number[];\n  protected mappingOriginCache: number[];\n  protected mappingExtrapolateCache: number[];\n  protected mappingWeightCache: number[];\n  protected mappingCoeffCache: number[];\n\n  protected artifacts: Artifact[];\n}\n\nfunction createResizeProgramInfo(\n    glsl: Glsl, mode: string, dim: number, inputLayout: TextureLayout, outputLayout: TextureLayout,\n    scales: ReadonlyArray<number>, roi: ReadonlyArray<number>, extrapolationEnabled: boolean,\n    extrapolationValue: number, cubicCoefficientA: number, excludeOutside: boolean, coordinateTransformMode: string,\n    getOriginalCoordinate: Upsample.GetOriginalCoordinateFunc, getNearestPixel: Upsample.GetNearestPixelFunc,\n    mappingOriginCache: number[], mappingWeightCache: number[], mappingExtrapolateCache: number[],\n    mappingCoeffCache: number[]): ProgramInfo {\n  const isSame = scales.every(s => s === 1) && coordinateTransformMode !== 'tf_crop_and_resize';\n  if (isSame) {\n    return {\n      inputLayouts: [inputLayout],\n      outputLayout,\n      samplers: ['X'],\n      hasMain: true,\n      shaderSource: `void main() {\n        vec4 v = ${glsl.texture2D}(X, TexCoords);\n        ${glsl.output} = v;\n      }`\n    };\n  }\n\n  const inputShape = inputLayout.shape;\n  const inputHeight = inputShape[dim - 2];\n  const inputWidth = inputShape[dim - 1];\n  const outputShape = outputLayout.shape;\n  const outputHeight = outputShape[dim - 2];\n  const outputWidth = outputShape[dim - 1];\n  const scalesHeight = scales[dim - 2];\n  const scalesWidth = scales[dim - 1];\n  const roiStartHeight = roi[dim - 2];\n  const roiEndHeight = roi[dim - 2 + dim];\n  const roiStartWidth = roi[dim - 1];\n  const roiEndWidth = roi[dim - 1 + dim];\n\n  const precalculatedPitches = shaderPrecalculatedPitches(dim, outputShape, inputShape);\n  const getInputFloatFunction = shaderGetInputFloatFunction(inputLayout, glsl);\n\n  if (mode === 'nearest') {\n    const could2d =\n        dim >= 2 && coordinateTransformMode !== 'tf_crop_and_resize' && scales.some((s, i) => s === 1 && i < dim - 2);\n    if (could2d) {\n      fillResizeNearestMapping2D(\n          inputHeight, inputWidth, outputHeight, outputWidth, scalesHeight, scalesWidth, roiStartHeight, roiEndHeight,\n          roiStartWidth, roiEndWidth, extrapolationEnabled, getOriginalCoordinate, getNearestPixel, mappingOriginCache,\n          mappingExtrapolateCache);\n      const variables: VariableInfo[] = [{name: 'mo', type: 'int', arrayLength: mappingOriginCache.length}];\n      if (extrapolationEnabled) {\n        variables.push({name: 'me', type: 'int', arrayLength: mappingExtrapolateCache.length});\n      }\n      return {\n        inputLayouts: [inputLayout],\n        outputLayout,\n        samplers: ['X'],\n        shaderSource: `\n        ${getInputFloatFunction}\nfloat process(int indices[${dim}]) {\n  int input_index = 0;\n  int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n  ${precalculatedPitches}\n\n  ${\n            dim === 2 ? 'int m = output_index; int imageid = 0;' :\n                        `int imageid = output_index / output_pitches[${\n                            dim - 3}]; int m = output_index - imageid * output_pitches[${dim - 3}];`}\n  int h = m / output_pitches[${dim - 2}];\n  int w = m - h * output_pitches[${dim - 2}];\n\n  ${\n            extrapolationEnabled ? `if (me[h] + me[${outputHeight}+w] > 0) {\n    return float(${extrapolationValue});\n  }` :\n                                   ''}\n\n  input_index = ${dim === 2 ? '0' : `imageid * input_pitches[${dim - 3}]`} + mo[h] * input_pitches[${dim - 2}] + mo[${\n            outputHeight}+w];\n  return getInputFloat(input_index);\n}`,\n        variables\n      };\n    }\n\n    // could2d === false\n    throw new Error('non-2D nearest mode is not implemented yet');\n\n  } else if (mode === 'linear') {\n    fillResizeBilinearCoordinateMapping(\n        inputHeight, inputWidth, outputHeight, outputWidth, scalesHeight, scalesWidth, roiStartHeight, roiEndHeight,\n        roiStartWidth, roiEndWidth, extrapolationEnabled, getOriginalCoordinate, mappingOriginCache, mappingWeightCache,\n        mappingExtrapolateCache);\n    const variables: VariableInfo[] = [\n      {name: 'mo', type: 'int', arrayLength: mappingOriginCache.length},\n      {name: 'mw', type: 'float', arrayLength: mappingWeightCache.length}\n    ];\n    if (extrapolationEnabled) {\n      variables.push({name: 'me', type: 'int', arrayLength: mappingExtrapolateCache.length});\n    }\n    return {\n      inputLayouts: [inputLayout],\n      outputLayout,\n      samplers: ['X'],\n      shaderSource: `\n    ${getInputFloatFunction}\nfloat process(int indices[${dim}]) {\n  int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n  ${precalculatedPitches}\n\n  ${\n          dim === 2 ? 'int m = output_index; int imageid = 0;' :\n                      `int imageid = output_index / output_pitches[${\n                          dim - 3}]; int m = output_index - imageid * output_pitches[${dim - 3}];`}\n  int input_index = imageid * ${inputHeight * inputWidth};\n  int output_y = m / output_pitches[${dim - 2}];\n  int output_x = m - output_y * output_pitches[${dim - 2}];\n\n  ${\n          extrapolationEnabled ? `if (me[output_y] + me[${outputHeight}+output_x] > 0) {\n      return float(${extrapolationValue});\n    }` :\n                                 ''}\n\n  float y_offset_0 = mw[output_y];\n  int y_int = mo[output_y];\n  float x_offset_0 = mw[${outputHeight}+output_x];\n  int x_int = mo[${outputHeight}+output_x];\n  input_index += y_int * ${inputWidth} + x_int;\n\n  float x00 = getInputFloat(input_index);\n  bool end_of_h = (y_int >= ${inputHeight} - 1);\n  bool end_of_w = (x_int >= ${inputWidth} - 1);\n  float x10 = end_of_w ? x00 : getInputFloat(input_index + 1);\n  float x01 = end_of_h ? x00 : getInputFloat(input_index + ${inputWidth});\n  float x11 = end_of_w ? x01 : (end_of_h ? x10 : getInputFloat(input_index + ${inputWidth} + 1));\n\n  float y_offset_1 = 1.0 - y_offset_0;\n  float x_offset_1 = 1.0 - x_offset_0;\n\n  return x00 * (y_offset_1 * x_offset_1) +\n         x01 * (y_offset_0 * x_offset_1) +\n         x10 * (y_offset_1 * x_offset_0) +\n         x11 * (y_offset_0 * x_offset_0);\n}`,\n      variables\n    };\n\n  } else {  // cubic\n    fillResizeCubicCoordinateMapping(\n        inputHeight, inputWidth, outputHeight, outputWidth, scalesHeight, scalesWidth, roiStartHeight, roiEndHeight,\n        roiStartWidth, roiEndWidth, extrapolationEnabled, cubicCoefficientA, excludeOutside, getOriginalCoordinate,\n        mappingOriginCache, mappingExtrapolateCache, mappingCoeffCache);\n    const variables: VariableInfo[] = [\n      {name: 'mo', type: 'int', arrayLength: mappingOriginCache.length},\n      {name: 'mc', type: 'float', arrayLength: mappingCoeffCache.length}\n    ];\n    if (extrapolationEnabled) {\n      variables.push({name: 'me', type: 'int', arrayLength: mappingExtrapolateCache.length});\n    }\n    return {\n      inputLayouts: [inputLayout],\n      outputLayout,\n      samplers: ['X'],\n      shaderSource: `\n    ${getInputFloatFunction}\nfloat rowwise(int x, int y, int offset, float coeff0, float coeff1, float coeff2, float coeff3) {\n  int row_index = max(0, min(y, ${inputHeight - 1})) * ${inputWidth};\n  return coeff0 * getInputFloat(offset + row_index + max(0, min(x - 1, ${inputWidth} - 1))) +\n         coeff1 * getInputFloat(offset + row_index + max(0, min(x, ${inputWidth} - 1))) +\n         coeff2 * getInputFloat(offset + row_index + max(0, min(x + 1, ${inputWidth} - 1))) +\n         coeff3 * getInputFloat(offset + row_index + max(0, min(x + 2, ${inputWidth} - 1)));\n}\nfloat process(int indices[${dim}]) {\n  int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n  ${precalculatedPitches}\n\n  ${\n          dim === 2 ? 'int m = output_index; int imageid = 0;' :\n                      `int imageid = output_index / output_pitches[${\n                          dim - 3}]; int m = output_index - imageid * output_pitches[${dim - 3}];`}\n  int input_index = imageid * ${inputHeight * inputWidth};\n  int output_y = m / output_pitches[${dim - 2}];\n  int output_x = m - output_y * output_pitches[${dim - 2}];\n\n  ${\n          extrapolationEnabled ? `if (me[output_y] + me[${outputHeight}+output_x] > 0) {\n      return float(${extrapolationValue});\n    }` :\n                                 ''}\n\n  float w0 = mc[(${outputHeight}+output_x)*4];\n  float w1 = mc[(${outputHeight}+output_x)*4+1];\n  float w2 = mc[(${outputHeight}+output_x)*4+2];\n  float w3 = mc[(${outputHeight}+output_x)*4+3];\n  int x_int = mo[${outputHeight}+output_x];\n  float y0 = mc[output_y*4];\n  float y1 = mc[output_y*4+1];\n  float y2 = mc[output_y*4+2];\n  float y3 = mc[output_y*4+3];\n  int y_int = mo[output_y];\n\n  return y0 * rowwise(x_int, y_int - 1, input_index, w0, w1, w2, w3) +\n         y1 * rowwise(x_int, y_int, input_index, w0, w1, w2, w3) +\n         y2 * rowwise(x_int, y_int + 1, input_index, w0, w1, w2, w3) +\n         y3 * rowwise(x_int, y_int + 2, input_index, w0, w1, w2, w3);\n}`,\n      variables\n    };\n  }\n}\n\nfunction fillResizeNearestMapping2D(\n    inputHeight: number, inputWidth: number, outputHeight: number, outputWidth: number, scalesHeight: number,\n    scalesWidth: number, roiStartHeight: number, roiEndHeight: number, roiStartWidth: number, roiEndWidth: number,\n    extrapolationEnabled: boolean, getOriginalCoordinate: Upsample.GetOriginalCoordinateFunc,\n    getNearestPixel: Upsample.GetNearestPixelFunc, mappingOrigin: number[], mappingExtrapolation: number[]): void {\n  for (let i = 0; i < outputHeight; i++) {\n    let dim = i;\n    const originalCoord =\n        getOriginalCoordinate(dim, scalesHeight, outputHeight, inputHeight, roiStartHeight, roiEndHeight);\n    // extrapolate\n    mappingExtrapolation.push((extrapolationEnabled && (originalCoord < 0 || originalCoord > inputHeight - 1)) ? 1 : 0);\n    dim = Math.max(0, Math.min(inputHeight - 1, getNearestPixel(originalCoord, scalesHeight < 1)));\n    // origin\n    mappingOrigin.push(dim);\n  }\n\n  for (let i = 0; i < outputWidth; i++) {\n    let dim = i;\n    const originalCoord = getOriginalCoordinate(dim, scalesWidth, outputWidth, inputWidth, roiStartWidth, roiEndWidth);\n    // extrapolate\n    mappingExtrapolation.push((extrapolationEnabled && (originalCoord < 0 || originalCoord > inputWidth - 1)) ? 1 : 0);\n    dim = Math.max(0, Math.min(inputWidth - 1, getNearestPixel(originalCoord, scalesWidth < 1)));\n    // origin\n    mappingOrigin.push(dim);\n  }\n}\n\nfunction fillResizeBilinearCoordinateMapping(\n    inputHeight: number, inputWidth: number, outputHeight: number, outputWidth: number, scalesHeight: number,\n    scalesWidth: number, roiStartHeight: number, roiEndHeight: number, roiStartWidth: number, roiEndWidth: number,\n    extrapolationEnabled: boolean, getOriginalCoordinate: Upsample.GetOriginalCoordinateFunc, mappingOrigin: number[],\n    mappingWeight: number[], mappingExtrapolation: number[]) {\n  for (let i = 0; i < outputHeight; i++) {\n    let inputY = getOriginalCoordinate(i, scalesHeight, outputHeight, inputHeight, roiStartHeight, roiEndHeight);\n    mappingExtrapolation.push((extrapolationEnabled && (inputY < 0 || inputY > inputHeight - 1)) ? 1 : 0);\n    inputY = Math.max(0, Math.min(inputY, inputHeight - 1));\n    const intY = Math.floor(inputY);\n    mappingOrigin.push(intY);\n    mappingWeight.push(intY >= inputHeight - 1 ? 0.5 : inputY - intY);\n  }\n  for (let i = 0; i < outputWidth; i++) {\n    let inputX = getOriginalCoordinate(i, scalesWidth, outputWidth, inputWidth, roiStartWidth, roiEndWidth);\n    mappingExtrapolation.push((extrapolationEnabled && (inputX < 0 || inputX > inputWidth - 1)) ? 1 : 0);\n    inputX = Math.max(0, Math.min(inputX, inputWidth - 1));\n    const intX = Math.floor(inputX);\n    mappingOrigin.push(intX);\n    mappingWeight.push(intX >= inputWidth - 1 ? 0.5 : inputX - intX);\n  }\n}\n\nfunction fillResizeCubicCoordinateMapping(\n    inputHeight: number, inputWidth: number, outputHeight: number, outputWidth: number, scalesHeight: number,\n    scalesWidth: number, roiStartHeight: number, roiEndHeight: number, roiStartWidth: number, roiEndWidth: number,\n    extrapolationEnabled: boolean, cubicCoefficientA: number, excludeOutside: boolean,\n    getOriginalCoordinate: Upsample.GetOriginalCoordinateFunc, mappingOrigin: number[], mappingExtrapolation: number[],\n    mappingCoeffCache: number[]) {\n  for (let i = 0; i < outputHeight + outputWidth; i++) {\n    const isY = i < outputHeight;\n    const maxInputCoord = isY ? inputHeight : inputWidth;\n    const inputCoord = getOriginalCoordinate(\n        isY ? i : i - outputHeight, isY ? scalesHeight : scalesWidth, isY ? outputHeight : outputWidth, maxInputCoord,\n        isY ? roiStartHeight : roiStartWidth, isY ? roiEndHeight : roiEndWidth);\n    const intCoord = Math.floor(inputCoord);\n    const sCoord = Math.abs(intCoord - inputCoord);\n    let coeffSum = 1.0;\n    let coeff0 = ((cubicCoefficientA * (sCoord + 1) - 5 * cubicCoefficientA) * (sCoord + 1) + 8 * cubicCoefficientA) *\n            (sCoord + 1) -\n        4 * cubicCoefficientA;\n    let coeff1 = ((cubicCoefficientA + 2) * sCoord - (cubicCoefficientA + 3)) * sCoord * sCoord + 1;\n    let coeff2 = ((cubicCoefficientA + 2) * (1 - sCoord) - (cubicCoefficientA + 3)) * (1 - sCoord) * (1 - sCoord) + 1;\n    let coeff3 = ((cubicCoefficientA * (2 - sCoord) - 5 * cubicCoefficientA) * (2 - sCoord) + 8 * cubicCoefficientA) *\n            (2 - sCoord) -\n        4 * cubicCoefficientA;\n    if (excludeOutside) {\n      coeff0 = (intCoord - 1 < 0 || intCoord - 1 >= maxInputCoord) ? 0.0 : coeff0;\n      coeff1 = (intCoord + 0 < 0 || intCoord + 0 >= maxInputCoord) ? 0.0 : coeff1;\n      coeff2 = (intCoord + 1 < 0 || intCoord + 1 >= maxInputCoord) ? 0.0 : coeff2;\n      coeff3 = (intCoord + 2 < 0 || intCoord + 2 >= maxInputCoord) ? 0.0 : coeff3;\n      coeffSum = coeff0 + coeff1 + coeff2 + coeff3;\n    }\n    mappingOrigin.push(intCoord);\n    mappingExtrapolation.push((extrapolationEnabled && (inputCoord < 0 || inputCoord > maxInputCoord - 1)) ? 1 : 0);\n    mappingCoeffCache.push(coeff0 / coeffSum);\n    mappingCoeffCache.push(coeff1 / coeffSum);\n    mappingCoeffCache.push(coeff2 / coeffSum);\n    mappingCoeffCache.push(coeff3 / coeffSum);\n  }\n}\n\nfunction createUpsampleProgramInfo(\n    glsl: Glsl, mode: string, dim: number, inputLayout: TextureLayout, outputLayout: TextureLayout,\n    scales: ReadonlyArray<number>): ProgramInfo {\n  const outputShape = outputLayout.shape;\n  const inputShape = inputLayout.shape;\n  const precalculatedPitches = shaderPrecalculatedPitches(dim, outputShape, inputShape);\n  const getInputFloatFunction = shaderGetInputFloatFunction(inputLayout, glsl);\n\n  const shaderSource = mode === 'nearest' ?\n      // nearest\n      `\n        ${getInputFloatFunction}\n        float process(int indices[${dim}]) {\n          int input_index = 0;\n          int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n          ${precalculatedPitches}\n\n          int d, m;\n          for (int dim = 0; dim < ${dim}; ++dim) {\n            d = output_index / output_pitches[dim];\n            m = output_index - d * output_pitches[dim];\n            output_index = m;\n\n            if (scales[dim] != 1 && d > 0) {\n              int d2 = d / scales[dim];\n              m = d - d2 * scales[dim];\n              d = d2;\n            }\n            input_index += input_pitches[dim] * d;\n          }\n\n          return getInputFloat(input_index);\n        }` :\n      dim === 4 ?\n      // bilinear 4D\n          `\n        ${getInputFloatFunction}\n        float process(int indices[4]) {\n          int input_index = 0;\n          int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n          ${precalculatedPitches}\n\n          int m;\n          int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n          index_of_dim0 = output_index / output_pitches[0];\n          m = output_index - index_of_dim0 * output_pitches[0];\n          index_of_dim1 = m / output_pitches[1];\n          m = m - index_of_dim1 * output_pitches[1];\n          index_of_dim2 = m / output_pitches[2];\n          m = m - index_of_dim2 * output_pitches[2];\n          index_of_dim3 = m;\n\n          int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n          index_of_input_dim2 = index_of_dim2 / scales[2];\n          y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n          index_of_input_dim3 = index_of_dim3 / scales[3];\n          x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n          input_index = index_of_dim0 * input_pitches[0] +\n                        index_of_dim1 * input_pitches[1] +\n                        index_of_input_dim2 * input_pitches[2] +\n                        index_of_input_dim3;\n\n          float x00 = getInputFloat(input_index);\n          float x10, x01, x11;\n\n          bool end_of_dim2 = false;\n          if (index_of_input_dim2 == (${inputShape[2]} - 1)) {\n            // It's the end in dimension 2\n            x01 = x00;\n            end_of_dim2 = true;\n          } else {\n            x01 = getInputFloat(input_index + input_pitches[2]);\n          }\n\n          if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n            // It's the end in dimension 3\n            x10 = x00;\n            x11 = x01;\n          }\n          else {\n            x10 = getInputFloat(input_index + 1);\n            x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n          }\n\n          float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n          float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n          return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n        }` :\n          // bilinear 2D\n          `\n        ${getInputFloatFunction}\n        float process(int indices[2]) {\n          int input_index = 0;\n          int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\n\n          ${precalculatedPitches}\n\n          int m;\n          int index_of_dim0, index_of_dim1;\n          index_of_dim0 = output_index / output_pitches[0];\n          m = output_index - index_of_dim0 * output_pitches[0];\n          index_of_dim1 = m;\n\n          int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n          index_of_input_dim0 = index_of_dim0 / scales[0];\n          y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n          index_of_input_dim1 = index_of_dim1 / scales[1];\n          x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n          input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n          float x00 = getInputFloat(input_index);\n          float x10, x01, x11;\n\n          bool end_of_dim0 = false;\n          if (index_of_input_dim0 == (${inputShape[0]} - 1)) {\n            // It's the end in dimension 0\n            x01 = x00;\n            end_of_dim0 = true;\n          } else {\n            x01 = getInputFloat(input_index + input_pitches[0]);\n          }\n\n          if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n            // It's the end in dimension 1\n            x10 = x00;\n            x11 = x01;\n          }\n          else {\n            x10 = getInputFloat(input_index + 1);\n            x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n          }\n\n          float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n          float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n          return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n        }`;\n  return {\n    inputLayouts: [inputLayout],\n    outputLayout,\n    samplers: ['X'],\n    shaderSource,\n    variables: [{name: 'scales', type: 'int', arrayLength: scales.length}]\n  };\n}\n\nfunction shaderPrecalculatedPitches(\n    dim: number, outputShape: ReadonlyArray<number>, inputShape: ReadonlyArray<number>) {\n  const outputPitches = new Array<number>(dim);\n  const inputPitches = new Array<number>(dim);\n  let precalculatedPitches = `\n        int output_pitches[${dim}];\n        int input_pitches[${dim}];\n        `;\n  for (let d = dim - 1; d >= 0; d--) {\n    outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n    inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputShape[d + 1];\n\n    precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n  }\n  return precalculatedPitches;\n}\n\nfunction shaderGetInputFloatFunction(inputLayout: TextureLayout, glsl: Glsl) {\n  return `\nfloat getInputFloat(int index) {\n  vec2 coords = offsetToCoords(index, ${inputLayout.width}, ${inputLayout.height});\n  float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n  return value;\n}\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {env} from '../../env';\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {Artifact, ProgramInfo, RunData, TextureData, UniformData, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<{}, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(public profiler: Readonly<Profiler>, public glContext: WebGLContext) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: {}): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: {}, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, runData: RunData): void {\n    this.profiler.event('backend', 'ProgramManager.run', () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(runData.outputTextureData);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, runData.uniformData, runData.inputTextureDatas);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.doDraw(buildArtifact, runData);\n        gl.flush();\n      });\n    });\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.samplers, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected doDraw(artifact: Artifact, runData: RunData): void {\n    if (runData.draw) {\n      Logger.verbose('ProgramManager', 'Custom draw function');\n      runData.draw(this.glContext, artifact);\n    } else {\n      this.glContext.draw();\n    }\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${td.width}/${td.height}, shape=${td.shape}, type=${\n            td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, td.width, td.height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, uniformData: UniformData, textures: TextureData[]): void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, uniformData[name] as number[]);\n          } else {\n            gl.uniform1f(location, uniformData[name] as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, uniformData[name] as number[]);\n          } else {\n            gl.uniform1i(location, uniformData[name] as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(glContext: WebGLContext, programInfo: ProgramInfo) {\n    this.context = new GlslContext(glContext, programInfo);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, programInfo.outputLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.samplers, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = ``;\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + `\\n`;\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nconst INLINE_FUNC_DEF_REGEX: RegExp =\n    /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string, name: string}|null>, body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\n    return {...this.offsetToCoords(), ...this.coordsToOffset(), ...this.toVec(), ...this.valueFrom()};\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = `offsetToCoords`;\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = `coordsToOffset`;\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine;} {\n    const output = this.context.programInfo.outputLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const layout = programInfo.inputLayouts[i];\n      const shape = layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, `coordinates.offsetToCoords`, `fragcolor.getColorAsFloat`]);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, `coordinates.offsetToCoords`, `fragcolor.getColorAsFloat`]);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string;} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string;} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine;} {\n    const programInfo = this.context.programInfo;\n    const outputRank = programInfo.outputLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine;} {\n    const programInfo = this.context.programInfo;\n    const outputRank = programInfo.outputLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine;} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      const strides = programInfo.inputLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: ReadonlyArray<number>): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine;} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      const strides = programInfo.inputLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: ReadonlyArray<number>): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine;} {\n    const programInfo = this.context.programInfo;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.samplers.forEach((name, i) => {\n      const shape = programInfo.inputLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string;} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine;} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string;} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine;} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine;} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine;} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine;} {\n    const outputLayout = this.context.programInfo.outputLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger} from '../../instrument';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis: number;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: ReadonlyArray<number>, prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: ReadonlyArray<number>, prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU\\'s boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${layout.width}x${layout.height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(\n              texture, layout.width, layout.height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture =\n        this.glContext.allocateTexture(layout.width, layout.height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n        return new Int16Array(data);\n      case 'int32':\n        return new Int32Array(data);\n      case 'int8':\n        return new Int8Array(data);\n      case 'uint16':\n        return new Uint16Array(data);\n      case 'uint32':\n        return data as Uint32Array;\n      case 'uint8':\n      case 'bool':\n        return data as Uint8Array;\n      case 'float32':\n        return data as Float32Array;\n      case 'float64':\n        return new Float64Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\nfunction createCanvas(): HTMLCanvasElement {\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {env} from '../../env';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  textureFloatExtension: OES_texture_float|null;\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: {}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = 'Unknown WebGL Error: ' + error.toString(16);\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0\n    ]);  // lower right\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error(`both float32 and float16 TextureType are not supported`);\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, `precision highp float;void main(){gl_FragColor=vec4(0.5);}`);\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {env} from '../env';\n\nimport {Environment} from './env';\n\nclass ENV implements Environment {\n  public set debug(value: boolean) {\n    env.debug = value;\n  }\n  public get debug(): boolean {\n    return env.debug;\n  }\n}\n\nexport const envImpl = new ENV();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * represent a tensor with specified dimensions and data type.\n */\nexport interface Tensor {\n  /**\n   * get the dimensions of the tensor\n   */\n  readonly dims: ReadonlyArray<number>;\n\n  /**\n   * get the data type of the tensor\n   */\n  readonly type: Tensor.Type;\n\n  /**\n   * get the number of elements in the tensor\n   */\n  readonly size: number;\n\n  /**\n   * get the underlying data of the tensor\n   */\n  readonly data: Tensor.DataType;\n\n  /**\n   * get value of an element\n   * @param indices the indices to the element\n   * @returns value of the element\n   */\n  get(...indices: number[]): Tensor.ElementType;\n\n  /**\n   * get value of an element\n   * @param indices the indices to the element\n   * @returns value of the element\n   */\n  get(indices: ReadonlyArray<number>): Tensor.ElementType;\n\n  /**\n   * set value of an element\n   * @param value the value to set\n   * @param indices the indices to the element\n   */\n  set(value: Tensor.ElementType, ...indices: number[]): void;\n\n  /**\n   * set value of an element\n   * @param value the value to set\n   * @param indices the indices to the element\n   */\n  set(value: Tensor.ElementType, indices: ReadonlyArray<number>): void;\n}\n\nexport declare namespace Tensor {\n  interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    int32: Int32Array;\n    string: string[];\n  }\n\n  interface ElementTypeMap {\n    bool: boolean;\n    float32: number;\n    int32: number;\n    string: string;\n  }\n\n  type DataType = DataTypeMap[Type];\n  type ElementType = ElementTypeMap[Type];\n\n  /**\n   * represent the data type of a tensor\n   */\n  export type Type = keyof DataTypeMap;\n}\n\nexport interface TensorConstructor {\n  /**\n   * Create a Tensor with provided data, dimension, and type\n   * @param data The value of the tensor. It could a flat array or a TypedArray.\n   * @param type The data type. Should match the value of the tensor, else throw\n   *     TypeError exception.\n   * @param dims Optional. Should match the length of the value provided. If not\n   *     specified, dims will be inferred as a 1d tensor.\n   */\n  new(data: Tensor.DataType|boolean[]|number[], type: Tensor.Type, dims?: ReadonlyArray<number>): Tensor;\n}\n\nexport interface TensorConstructor {\n  // Tensor factory functions\n}\n\nexport interface Tensor {\n  // Tensor utilities\n}\n\nimport * as TensorImpl from './tensor-impl';\nexport const Tensor: TensorConstructor = TensorImpl.Tensor;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Tensor} from './tensor';\n\n/**\n * represent a runtime instance of an ONNX model\n */\nexport interface InferenceSession {\n  //#region loadModel\n\n  /**\n   * load an ONNX model asynchronously\n   * @param uri the URI of the model to load\n   */\n  loadModel(uri: string): Promise<void>;\n  /**\n   * load an ONNX model\n   * @param blob a Blob object representation of an ONNX model\n   */\n  loadModel(blob: Blob): Promise<void>;\n  /**\n   * load an ONNX model\n   * @param buffer an ArrayBuffer representation of an ONNX model\n   */\n  loadModel(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Promise<void>;\n  /**\n   * load an ONNX model\n   * @param buffer an Uint8Array representation of an ONNX model\n   */\n  loadModel(buffer: Uint8Array): Promise<void>;\n\n  //#endregion loadModel\n\n  /**\n   * execute the model asynchronously with the given inputs, output names and options\n   * @param inputs representation of the model input. It can be a string-to-tensor Map object or a plain object,\n   *     with all required inputs present with their names as keys; it can be a tensor array as well, with input\n   *     tensors inside in the order defined by the model.\n   * @param options Optional. A set of options that controls the behavior of model inference\n   * @returns a Promise object representing the result of the execution. Resolve to a string-to-tensor Map object\n   *     for the model output, or reject to any runtime error.\n   */\n  run(inputs: InferenceSession.InputType, options?: InferenceSession.RunOptions): Promise<InferenceSession.OutputType>;\n\n  /**\n   * start profiling for the session\n   */\n  startProfiling(): void;\n  /**\n   * end profiling for the session and flush data\n   */\n  endProfiling(): void;\n}\n\nexport declare namespace InferenceSession {\n  type TensorsMapType = ReadonlyMap<string, Tensor>;\n  type TensorsIndexType = {readonly [name: string]: Tensor};\n  type TensorsArrayType = ReadonlyArray<Tensor>;\n  type InputType = TensorsMapType|TensorsIndexType|TensorsArrayType;\n  type OutputType = TensorsMapType;\n\n  export namespace Config {\n    /**\n     * represent the configuration of the profiler that used in an inference session\n     */\n    export interface Profiler {\n      /**\n       * the max number of events to be recorded\n       */\n      maxNumberEvents?: number;\n      /**\n       * the maximum size of a batch to flush\n       */\n      flushBatchSize?: number;\n      /**\n       * the maximum interval in milliseconds to flush\n       */\n      flushIntervalInMilliseconds?: number;\n    }\n  }\n\n  /**\n   * configuration for creating a new inference session\n   */\n  export interface Config {\n    /**\n     * specify a hint of the preferred backend. If not set, the backend will be determined by the platform and\n     * environment.\n     */\n    backendHint?: string;\n\n    /**\n     * specify the configuration of the profiler that used in an inference session\n     */\n    profiler?: Config.Profiler;\n  }\n\n  /**\n   * options for running inference\n   */\n  export interface RunOptions {\n    /**\n     * represent a list of output names as an array of string. This must be a subset of the output list defined by the\n     * model. If not specified, use the model's output list.\n     */\n    outputNames?: ReadonlyArray<string>;\n  }\n}\n\nexport interface InferenceSessionConstructor {\n  /**\n   * construct a new inference session\n   * @param config specify configuration for creating a new inference session\n   */\n  new(config?: InferenceSession.Config): InferenceSession;\n}\n\nimport * as InferenceSessionImpl from './inference-session-impl';\nexport const InferenceSession: InferenceSessionConstructor = InferenceSessionImpl.InferenceSession;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Session} from '../session';\nimport {Tensor as InternalTensor} from '../tensor';\n\nimport {InferenceSession as InferenceSessionInterface} from './inference-session';\nimport * as TensorInterface from './tensor';\nimport {Tensor as ApiTensor} from './tensor-impl';\nimport * as tensorUtils from './tensor-impl-utils';\n\ntype InputType = InferenceSessionInterface.InputType;\ntype RunOptions = InferenceSessionInterface.RunOptions;\ntype OutputType = InferenceSessionInterface.OutputType;\n\nexport class InferenceSession implements InferenceSessionInterface {\n  session: Session;\n  constructor(config?: InferenceSessionInterface.Config) {\n    this.session = new Session(config);\n  }\n  loadModel(uri: string): Promise<void>;\n  loadModel(blob: Blob): Promise<void>;\n  loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  loadModel(buffer: Uint8Array): Promise<void>;\n  loadModel(arg0: string|Blob|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    if (typeof arg0 === 'string') {\n      return this.session.loadModel(arg0);\n    } else if (typeof Blob !== 'undefined' && (arg0 instanceof Blob)) {\n      // create a url from Blob\n      const url = URL.createObjectURL(arg0);\n      return this.session.loadModel(url);\n    } else if (arg0 instanceof ArrayBuffer) {\n      // load model from array buffer\n      return this.session.loadModel(arg0, byteOffset, length);\n    } else if (ArrayBuffer.isView(arg0)) {\n      // load model from Uint8array\n      return this.session.loadModel(arg0);\n    } else {\n      throw new Error('Model type is not supported.');\n    }\n  }\n\n  async run(inputFeed: InputType, options?: RunOptions): Promise<OutputType> {\n    let output = new Map<string, InternalTensor>();\n    if (inputFeed instanceof Map) {\n      const modelInputFeed = new Map<string, InternalTensor>();\n      inputFeed.forEach((value: ApiTensor, key: string) => {\n        modelInputFeed.set(key, value.internalTensor);\n      });\n      output = await this.session.run(modelInputFeed);\n    } else if (Array.isArray(inputFeed)) {\n      const modelInputFeed: InternalTensor[] = [];\n      inputFeed.forEach((value) => {\n        modelInputFeed.push(value.internalTensor);\n      });\n      output = await this.session.run(modelInputFeed);\n    } else {\n      const modelInputFeed = new Map<string, InternalTensor>();\n      for (const name in inputFeed) {\n        modelInputFeed.set(name, (inputFeed as {readonly [name: string]: ApiTensor})[name].internalTensor);\n      }\n    }\n    const convertedOutput: Map<string, TensorInterface.Tensor> = new Map<string, TensorInterface.Tensor>();\n    output.forEach((value, key) => {\n      convertedOutput.set(key, tensorUtils.fromInternalTensor(value));\n    });\n    return convertedOutput;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {Backend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<ReadonlyArray<number>>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await Backend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(Buffer.from(buf));\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(Buffer.from(buf));\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(Buffer.from(arr));\n      } else {\n        // load model from Uint8array\n        this.initialize(Buffer.from(arg));\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Buffer): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<ReadonlyArray<number>>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<ReadonlyArray<number>>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(\n      expectedDims: ReadonlyArray<number>, actualDims: ReadonlyArray<number>, noneDimSupported: boolean): boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error(`expected number of outputs do not match number of generated outputs`);\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>, graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function Backend(hint?: string|ReadonlyArray<string>): Promise<Backend> {\n  if (!hint) {\n    return Backend(['webgl', 'wasm', 'cpu']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = onnx.backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    if (!backendObj[backendHint].disabled) {\n      const backend = backendObj[backendHint] as Backend;\n      let init = backend.initialize();\n      if (typeof init === 'object' && 'then' in init) {\n        init = await init;\n      }\n      if (init) {\n        backendsCache.set(backendHint, backend);\n        return backend;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // tslint:disable-next-line:no-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event('node', thisOp.node.name, async () => {\n          const op = thisOp.op;\n          if (!op.checkInputs(inputTensors)) {\n            throw new Error(`invalid inputs detected; op: ${thisOp.node.name}`);\n          }\n\n          const result = op.run(inferenceHandler, inputTensors);\n\n          return result;\n        });\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      this.graph.getOutputIndices().forEach((outputIndex, i) => {\n        const thisValue = this._values[outputIndex];\n        if (thisValue === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        // tslint:disable-next-line:no-unused-expression-chai\n        thisValue.data;\n        output.push(thisValue);\n      });\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {LongUtil} from './util';\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Buffer, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets = modelProto.opsetImport.map(i => {\n      return {domain: i.domain as string, version: LongUtil.longToNumber(i.version!)};\n    });\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): ReadonlyArray<OpSet> {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {Tensor} from './tensor';\nimport {ProtoUtil} from './util';\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: ReadonlyArray<number>;\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: ReadonlyArray<number>;\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: ReadonlyArray<number>;\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: ReadonlyArray<number>;\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\nexport interface Graph {\n  getInputIndices(): ReadonlyArray<number>;\n  getInputNames(): ReadonlyArray<string>;\n  getOutputIndices(): ReadonlyArray<number>;\n  getOutputNames(): ReadonlyArray<string>;\n  getValues(): ReadonlyArray<Graph.Value>;\n  getNodes(): ReadonlyArray<Graph.Node>;\n}\n\n// tslint:disable-next-line:variable-name\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto, initializer?: Graph.Initializer) => new GraphImpl(graphProto, initializer)\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto) {\n    this.name = _nodeProto.name!;\n    this.opType = _nodeProto.opType!;\n    this.inputs = [];\n    this.outputs = [];\n    this.attributes = new Attribute(_nodeProto.attribute);\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): ReadonlyArray<number> {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): ReadonlyArray<string> {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): ReadonlyArray<number> {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): ReadonlyArray<string> {\n    return this._allOutputNames;\n  }\n\n  getValues(): ReadonlyArray<Graph.Value> {\n    return this._allData;\n  }\n\n  getNodes(): ReadonlyArray<Graph.Node> {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error(`missing attributes or missing tensor value in attributes for this Constant operator`);\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error(`missing output or incorrect number of outputs for this Constant operator`);\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error(`node outputs should not be initialized`);\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error(`from property of the Value object doesn't match index of Node being processed`);\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error(`model graph is cyclic`);\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    for (let i = 0; i < this._nodes.length; i++) {\n      if (!this._nodes[i].executeNode) {\n        // delete this node and shift all subsequent nodes up\n        offset++;\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n        this._nodes.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        // update the value table\n        this._nodes[i].inputs.forEach(value => {\n          const ind = this._allData[value]._to.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allData[value]._to[ind] = i;\n          }\n        });\n        this._nodes[i].outputs.forEach(value => {\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\n            this._allData[value]._from! = i;\n          }\n        });\n      }\n    }\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has only one input and the first output connected to other nodes\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.inputs.length > 1) {\n      throw new Error(`Node deletion with multiple inputs is not supported. `);\n    }\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error(`Node deletion with more than one output connected to other nodes is not supported. `);\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\n    // should not happen\n    if (delIndex === -1) {\n      throw new Error(`The Value object doesn't have the current Node in it's 'to' property `);\n    }\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error(`The Node object doesn't have the output Value in it's 'inputs' property `);\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error(`Dropout nodes should only contain one input. `);\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error(`Dropout nodes should contain either 1 or 2 output(s)`);\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error(`Dropout nodes's second output should not be referenced by other nodes`);\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Tensor} from './tensor';\nimport {LongUtil} from './util';\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        this._attributes.set(attr.name!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n      }\n\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto): Attribute.DataType {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto) {\n    if (attr.type === onnx.AttributeProto.AttributeType.GRAPH ||\n        attr.type === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attr.type === onnx.AttributeProto.AttributeType.INT && Long.isLong(value)) {\n      return value.toNumber();\n    }\n\n    // cast LONG[] to number[]\n    if (attr.type === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attr.type === onnx.AttributeProto.AttributeType.TENSOR) {\n      return Tensor.fromProto(value as onnx.ITensorProto);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attr.type === onnx.AttributeProto.AttributeType.TENSORS) {\n      const tensorProtos = value as onnx.ITensorProto[];\n      return tensorProtos.map(value => Tensor.fromProto(value));\n    }\n\n    // cast Uint8Array to string\n    if (attr.type === onnx.AttributeProto.AttributeType.STRING) {\n      const utf8String = value as Uint8Array;\n      return Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString();\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attr.type === onnx.AttributeProto.AttributeType.STRINGS) {\n      const utf8Strings = value as Uint8Array[];\n      return utf8Strings.map(\n          utf8String => Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString());\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n"],"sourceRoot":""}